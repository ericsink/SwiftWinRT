// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.Graphics.Canvas {
// type: Microsoft.Graphics.Canvas.CanvasActiveLayer
// runtime class
public class CanvasActiveLayer
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer { return _self; }
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.CanvasAntialiasing
// enum type
public typealias CanvasAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;

// type: Microsoft.Graphics.Canvas.CanvasBitmap
// runtime class
open class CanvasBitmap
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap { return _self; }
    // COMPOSABLE: Microsoft.Graphics.Canvas.ICanvasBitmapFactory
// composable interface not needed: Microsoft.Graphics.Canvas.ICanvasBitmapFactory
    // static interface not needed: Microsoft.Graphics.Canvas.ICanvasBitmapStatics
    // method not needed: get_SizeInPixels
    // method not needed: get_Size
    // method not needed: get_Bounds
    // method not needed: get_Format
    // method not needed: get_AlphaMode
    // method not needed: SaveAsync
    // method not needed: SaveAsync
    // method not needed: SaveAsync
    // method not needed: SaveAsync
    // method not needed: SaveAsync
    // method not needed: GetPixelBytes
    // method not needed: GetPixelBytes
    // method not needed: GetPixelBytes
    // method not needed: GetPixelBytes
    // method not needed: GetPixelColors
    // method not needed: GetPixelColors
    // method not needed: SetPixelBytes
    // method not needed: SetPixelBytes
    // method not needed: SetPixelBytes
    // method not needed: SetPixelBytes
    // method not needed: SetPixelColors
    // method not needed: SetPixelColors
    // method not needed: CopyPixelsFromBitmap
    // method not needed: CopyPixelsFromBitmap
    // method not needed: CopyPixelsFromBitmap
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : WinRT.Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
            return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
            return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    // instance interface not needed: Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    // method not needed: GetBounds
    // method not needed: GetBounds
    // instance interface not needed: Windows.Graphics.Effects.IGraphicsEffectSource
}

// type: Microsoft.Graphics.Canvas.CanvasBlend
// enum type
public typealias CanvasBlend = _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;

// type: Microsoft.Graphics.Canvas.CanvasBufferPrecision
// enum type
public typealias CanvasBufferPrecision = _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;

// type: Microsoft.Graphics.Canvas.CanvasComposite
// enum type
public typealias CanvasComposite = _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;

// type: Microsoft.Graphics.Canvas.CanvasDevice
// runtime class
public class CanvasDevice
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.ICanvasDevice;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.ICanvasDevice?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.ICanvasDevice { return _self; }
    public init(forceSoftwareRenderer : boolean) throws {
        let _af : ICanvasDeviceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasDevice");
        _self = try _af.CreateWithForceSoftwareRendererOption(forceSoftwareRenderer: forceSoftwareRenderer)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.CanvasDevice")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.Graphics.Canvas.ICanvasDeviceStatics
    // method not needed: get_ForceSoftwareRenderer
    // method not needed: get_MaximumBitmapSizeInPixels
    // method not needed: IsPixelFormatSupported
    // method not needed: IsBufferPrecisionSupported
    // method not needed: get_MaximumCacheSize
    // method not needed: put_MaximumCacheSize
    // method not needed: get_LowPriority
    // method not needed: put_LowPriority
    // method not needed: add_DeviceLost
    // method not needed: remove_DeviceLost
    // method not needed: IsDeviceLost
    // method not needed: RaiseDeviceLost
    // method not needed: Lock
    // instance interface not needed: Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Device() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
            return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.CanvasDpiRounding
// enum type
public typealias CanvasDpiRounding = _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;

// type: Microsoft.Graphics.Canvas.CanvasDrawingSession
// runtime class
public class CanvasDrawingSession
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession { return _self; }
    public func Clear(color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.Clear(color: color);
    }
    public func Clear(color : WinRT.Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.ClearHdr(color: color);
    }
    public func Flush() throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.Flush();
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOrigin(image: image);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffset(image: image, offset: offset);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoords(image: image, x: x, y: y);
    }
    public func DrawImage(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasBitmap>, destinationRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRect(bitmap: bitmap!.Interface(), destinationRectangle: destinationRectangle);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffsetWithSourceRect(image: image, offset: offset, sourceRectangle: sourceRectangle);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoordsWithSourceRect(image: image, x: x, y: y, sourceRectangle: sourceRectangle);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRectWithSourceRect(image: image, destinationRectangle: destinationRectangle, sourceRectangle: sourceRectangle);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffsetWithSourceRectAndOpacity(image: image, offset: offset, sourceRectangle: sourceRectangle, opacity: opacity);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoordsWithSourceRectAndOpacity(image: image, x: x, y: y, sourceRectangle: sourceRectangle, opacity: opacity);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRectWithSourceRectAndOpacity(image: image, destinationRectangle: destinationRectangle, sourceRectangle: sourceRectangle, opacity: opacity);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(image: image, offset: offset, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(image: image, x: x, y: y, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRectWithSourceRectAndOpacityAndInterpolation(image: image, destinationRectangle: destinationRectangle, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(image: image, offset: offset, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, composite: composite);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(image: image, x: x, y: y, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, composite: composite);
    }
    public func DrawImage(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(image: image, destinationRectangle: destinationRectangle, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, composite: composite);
    }
    public func DrawImage(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasBitmap>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap: bitmap!.Interface(), offset: offset, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, perspective: perspective);
    }
    public func DrawImage(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasBitmap>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap: bitmap!.Interface(), x: x, y: y, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, perspective: perspective);
    }
    public func DrawImage(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasBitmap>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap: bitmap!.Interface(), destinationRectangle: destinationRectangle, sourceRectangle: sourceRectangle, opacity: opacity, interpolation: interpolation, perspective: perspective);
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithBrush(point0: point0, point1: point1, brush: brush);
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithBrush(x0: x0, y0: y0, x1: x1, y1: y1, brush: brush);
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithColor(point0: point0, point1: point1, color: color);
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithColor(x0: x0, y0: y0, x1: x1, y1: y1, color: color);
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithBrushAndStrokeWidth(point0: point0, point1: point1, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithBrushAndStrokeWidth(x0: x0, y0: y0, x1: x1, y1: y1, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithColorAndStrokeWidth(point0: point0, point1: point1, color: color, strokeWidth: strokeWidth);
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithColorAndStrokeWidth(x0: x0, y0: y0, x1: x1, y1: y1, color: color, strokeWidth: strokeWidth);
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithBrushAndStrokeWidthAndStrokeStyle(point0: point0, point1: point1, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x0: x0, y0: y0, x1: x1, y1: y1, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawLine(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineWithColorAndStrokeWidthAndStrokeStyle(point0: point0, point1: point1, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawLine(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x0: x0, y0: y0, x1: x1, y1: y1, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithBrush(rect: rect, brush: brush);
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithBrush(x: x, y: y, w: w, h: h, brush: brush);
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithColor(rect: rect, color: color);
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithColor(x: x, y: y, w: w, h: h, color: color);
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithBrushAndStrokeWidth(rect: rect, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithBrushAndStrokeWidth(x: x, y: y, w: w, h: h, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithColorAndStrokeWidth(rect: rect, color: color, strokeWidth: strokeWidth);
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithColorAndStrokeWidth(x: x, y: y, w: w, h: h, color: color, strokeWidth: strokeWidth);
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect: rect, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x: x, y: y, w: w, h: h, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRectangle(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(rect: rect, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x: x, y: y, w: w, h: h, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func FillRectangle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleWithBrush(rect: rect, brush: brush);
    }
    public func FillRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleAtCoordsWithBrush(x: x, y: y, w: w, h: h, brush: brush);
    }
    public func FillRectangle(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleWithColor(rect: rect, color: color);
    }
    public func FillRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleAtCoordsWithColor(x: x, y: y, w: w, h: h, color: color);
    }
    public func FillRectangle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleWithBrushAndOpacityBrush(rect: rect, brush: brush, opacityBrush: opacityBrush);
    }
    public func FillRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRectangleAtCoordsWithBrushAndOpacityBrush(x: x, y: y, w: w, h: h, brush: brush, opacityBrush: opacityBrush);
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithBrush(rect: rect, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithBrush(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithColor(rect: rect, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithColor(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithBrushAndStrokeWidth(rect: rect, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithColorAndStrokeWidth(rect: rect, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth);
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth);
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect: rect, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(rect: rect, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func FillRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRoundedRectangleWithBrush(rect: rect, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func FillRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRoundedRectangleAtCoordsWithBrush(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func FillRoundedRectangle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRoundedRectangleWithColor(rect: rect, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func FillRoundedRectangle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillRoundedRectangleAtCoordsWithColor(x: x, y: y, w: w, h: h, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithBrush(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithBrush(x: x, y: y, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithColor(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithColor(x: x, y: y, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithBrushAndStrokeWidth(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithBrushAndStrokeWidth(x: x, y: y, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithColorAndStrokeWidth(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth);
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithColorAndStrokeWidth(x: x, y: y, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth);
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x: x, y: y, radiusX: radiusX, radiusY: radiusY, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x: x, y: y, radiusX: radiusX, radiusY: radiusY, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func FillEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillEllipseWithBrush(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func FillEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillEllipseAtCoordsWithBrush(x: x, y: y, radiusX: radiusX, radiusY: radiusY, brush: brush);
    }
    public func FillEllipse(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillEllipseWithColor(centerPoint: centerPoint, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func FillEllipse(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillEllipseAtCoordsWithColor(x: x, y: y, radiusX: radiusX, radiusY: radiusY, color: color);
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithBrush(centerPoint: centerPoint, radius: radius, brush: brush);
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithBrush(x: x, y: y, radius: radius, brush: brush);
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithColor(centerPoint: centerPoint, radius: radius, color: color);
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithColor(x: x, y: y, radius: radius, color: color);
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithBrushAndStrokeWidth(centerPoint: centerPoint, radius: radius, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithBrushAndStrokeWidth(x: x, y: y, radius: radius, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithColorAndStrokeWidth(centerPoint: centerPoint, radius: radius, color: color, strokeWidth: strokeWidth);
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithColorAndStrokeWidth(x: x, y: y, radius: radius, color: color, strokeWidth: strokeWidth);
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(centerPoint: centerPoint, radius: radius, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x: x, y: y, radius: radius, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleWithColorAndStrokeWidthAndStrokeStyle(centerPoint: centerPoint, radius: radius, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x: x, y: y, radius: radius, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func FillCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillCircleWithBrush(centerPoint: centerPoint, radius: radius, brush: brush);
    }
    public func FillCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillCircleAtCoordsWithBrush(x: x, y: y, radius: radius, brush: brush);
    }
    public func FillCircle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillCircleWithColor(centerPoint: centerPoint, radius: radius, color: color);
    }
    public func FillCircle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillCircleAtCoordsWithColor(x: x, y: y, radius: radius, color: color);
    }
    public func DrawText(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointWithColor(text: text, point: point, color: color);
    }
    public func DrawText(text : Swift.String, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointCoordsWithColor(text: text, x: x, y: y, color: color);
    }
    public func DrawText(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointWithBrushAndFormat(text: text, point: point, brush: brush, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, rectangle : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtRectWithBrushAndFormat(text: text, rectangle: rectangle, brush: brush, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointCoordsWithBrushAndFormat(text: text, x: x, y: y, brush: brush, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtRectCoordsWithBrushAndFormat(text: text, x: x, y: y, w: w, h: h, brush: brush, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointWithColorAndFormat(text: text, point: point, color: color, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, rectangle : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtRectWithColorAndFormat(text: text, rectangle: rectangle, color: color, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtPointCoordsWithColorAndFormat(text: text, x: x, y: y, color: color, format: format!.Interface());
    }
    public func DrawText(text : Swift.String, x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextAtRectCoordsWithColorAndFormat(text: text, x: x, y: y, w: w, h: h, color: color, format: format!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithBrush(geometry: geometry!.Interface(), offset: offset, brush: brush);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithColor(geometry: geometry!.Interface(), offset: offset, color: color);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithBrush(geometry: geometry!.Interface(), x: x, y: y, brush: brush);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithColor(geometry: geometry!.Interface(), x: x, y: y, color: color);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithBrush(geometry: geometry!.Interface(), brush: brush);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithColor(geometry: geometry!.Interface(), color: color);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithBrushAndStrokeWidth(geometry: geometry!.Interface(), offset: offset, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithColorAndStrokeWidth(geometry: geometry!.Interface(), offset: offset, color: color, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithBrushAndStrokeWidth(geometry: geometry!.Interface(), x: x, y: y, brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithColorAndStrokeWidth(geometry: geometry!.Interface(), x: x, y: y, color: color, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithBrushAndStrokeWidth(geometry: geometry!.Interface(), brush: brush, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithColorAndStrokeWidth(geometry: geometry!.Interface(), color: color, strokeWidth: strokeWidth);
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), offset: offset, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), offset: offset, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), x: x, y: y, brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), x: x, y: y, color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), brush: brush, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func DrawGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(geometry: geometry!.Interface(), color: color, strokeWidth: strokeWidth, strokeStyle: strokeStyle!.Interface());
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryWithBrush(geometry: geometry!.Interface(), offset: offset, brush: brush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryWithBrushAndOpacityBrush(geometry: geometry!.Interface(), offset: offset, brush: brush, opacityBrush: opacityBrush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryWithColor(geometry: geometry!.Interface(), offset: offset, color: color);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtCoordsWithBrush(geometry: geometry!.Interface(), x: x, y: y, brush: brush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtCoordsWithBrushAndOpacityBrush(geometry: geometry!.Interface(), x: x, y: y, brush: brush, opacityBrush: opacityBrush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtCoordsWithColor(geometry: geometry!.Interface(), x: x, y: y, color: color);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtOriginWithBrush(geometry: geometry!.Interface(), brush: brush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtOriginWithBrushAndOpacityBrush(geometry: geometry!.Interface(), brush: brush, opacityBrush: opacityBrush);
    }
    public func FillGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.FillGeometryAtOriginWithColor(geometry: geometry!.Interface(), color: color);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryWithBrush(geometry: geometry!.Interface(), offset: offset, brush: brush);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryWithColor(geometry: geometry!.Interface(), offset: offset, color: color);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryAtCoordsWithBrush(geometry: geometry!.Interface(), x: x, y: y, brush: brush);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryAtCoordsWithColor(geometry: geometry!.Interface(), x: x, y: y, color: color);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryAtOriginWithBrush(geometry: geometry!.Interface(), brush: brush);
    }
    public func DrawCachedGeometry(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawCachedGeometryAtOriginWithColor(geometry: geometry!.Interface(), color: color);
    }
    public func DrawTextLayout(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextLayout>, point : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextLayoutWithBrush(textLayout: textLayout!.Interface(), point: point, brush: brush);
    }
    public func DrawTextLayout(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextLayout>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextLayoutAtCoordsWithBrush(textLayout: textLayout!.Interface(), x: x, y: y, brush: brush);
    }
    public func DrawTextLayout(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextLayout>, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextLayoutWithColor(textLayout: textLayout!.Interface(), point: point, color: color);
    }
    public func DrawTextLayout(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextLayout>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawTextLayoutAtCoordsWithColor(textLayout: textLayout!.Interface(), x: x, y: y, color: color);
    }
    public func DrawGradientMesh(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGradientMeshAtOrigin(gradientMesh: gradientMesh!.Interface());
    }
    public func DrawGradientMesh(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh>, point : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGradientMesh(gradientMesh: gradientMesh!.Interface(), point: point);
    }
    public func DrawGradientMesh(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh>, x : Swift.Float, y : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGradientMeshAtCoords(gradientMesh: gradientMesh!.Interface(), x: x, y: y);
    }
    public func DrawSvg(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawSvgAtOrigin(svgDocument: svgDocument!.Interface(), viewportSize: viewportSize);
    }
    public func DrawSvg(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size, point : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawSvgAtPoint(svgDocument: svgDocument!.Interface(), viewportSize: viewportSize, point: point);
    }
    public func DrawSvg(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size, x : Swift.Float, y : Swift.Float) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawSvgAtCoords(svgDocument: svgDocument!.Interface(), viewportSize: viewportSize, x: x, y: y);
    }
    public func get_Antialiasing() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_Antialiasing();
    }
    public func put_Antialiasing(value : WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_Antialiasing(value: value);
    }
    public func get_Blend() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasBlend {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_Blend();
    }
    public func put_Blend(value : WinRT.Microsoft.Graphics.Canvas.CanvasBlend) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_Blend(value: value);
    }
    public func get_TextAntialiasing() throws -> WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_TextAntialiasing();
    }
    public func put_TextAntialiasing(value : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_TextAntialiasing(value: value);
    }
    public func get_TextRenderingParameters() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters(plok: _ifc.get_TextRenderingParameters());
    }
    public func put_TextRenderingParameters(value : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_TextRenderingParameters(value: value!.Interface());
    }
    public func get_Transform() throws -> WinRT.Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_Transform();
    }
    public func put_Transform(value : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value);
    }
    public func get_Units() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasUnits {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_Units();
    }
    public func put_Units(value : WinRT.Microsoft.Graphics.Canvas.CanvasUnits) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_Units(value: value);
    }
    public func get_EffectBufferPrecision() throws -> Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_EffectBufferPrecision();
    }
    public func put_EffectBufferPrecision(value : Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_EffectBufferPrecision(value: value);
    }
    public func get_EffectTileSize() throws -> WinRT.Windows.Graphics.Imaging.BitmapSize {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.get_EffectTileSize();
    }
    public func put_EffectTileSize(value : WinRT.Windows.Graphics.Imaging.BitmapSize) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.put_EffectTileSize(value: value);
    }
    public func CreateLayer(opacity : Swift.Float) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacity(opacity: opacity));
    }
    public func CreateLayer(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityBrush(opacityBrush: opacityBrush));
    }
    public func CreateLayer(opacity : Swift.Float, clipRectangle : WinRT.Windows.Foundation.Rect) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityAndClipRectangle(opacity: opacity, clipRectangle: clipRectangle));
    }
    public func CreateLayer(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipRectangle : WinRT.Windows.Foundation.Rect) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityBrushAndClipRectangle(opacityBrush: opacityBrush, clipRectangle: clipRectangle));
    }
    public func CreateLayer(opacity : Swift.Float, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityAndClipGeometry(opacity: opacity, clipGeometry: clipGeometry!.Interface()));
    }
    public func CreateLayer(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityBrushAndClipGeometry(opacityBrush: opacityBrush, clipGeometry: clipGeometry!.Interface()));
    }
    public func CreateLayer(opacity : Swift.Float, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityAndClipGeometryAndTransform(opacity: opacity, clipGeometry: clipGeometry!.Interface(), geometryTransform: geometryTransform));
    }
    public func CreateLayer(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithOpacityBrushAndClipGeometryAndTransform(opacityBrush: opacityBrush, clipGeometry: clipGeometry!.Interface(), geometryTransform: geometryTransform));
    }
    public func CreateLayer(opacity : Swift.Float, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipRectangle : WinRT.Windows.Foundation.Rect, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2, options : WinRT.Microsoft.Graphics.Canvas.CanvasLayerOptions) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasActiveLayer(plok: _ifc.CreateLayerWithAllOptions(opacity: opacity, opacityBrush: opacityBrush, clipRectangle: clipRectangle, clipGeometry: clipGeometry!.Interface(), geometryTransform: geometryTransform, options: options));
    }
    public func DrawGlyphRun(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGlyphRun(point: point, fontFace: fontFace!.Interface(), fontSize: fontSize, glyphsLength: glyphsLength, glyphs: glyphs, isSideways: isSideways, bidiLevel: bidiLevel, brush: brush);
    }
    public func DrawGlyphRun(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, measuringMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGlyphRunWithMeasuringMode(point: point, fontFace: fontFace!.Interface(), fontSize: fontSize, glyphsLength: glyphsLength, glyphs: glyphs, isSideways: isSideways, bidiLevel: bidiLevel, brush: brush, measuringMode: measuringMode);
    }
    public func DrawGlyphRun(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, measuringMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, localeName : Swift.String, textString : Swift.String, clusterMapIndicesLength : UINT32, clusterMapIndices : Optional<UnsafeMutablePointer<INT32>>, textPosition : Swift.UInt32) throws -> Void {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try _ifc.DrawGlyphRunWithMeasuringModeAndDescription(point: point, fontFace: fontFace!.Interface(), fontSize: fontSize, glyphsLength: glyphsLength, glyphs: glyphs, isSideways: isSideways, bidiLevel: bidiLevel, brush: brush, measuringMode: measuringMode, localeName: localeName, textString: textString, clusterMapIndicesLength: clusterMapIndicesLength, clusterMapIndices: clusterMapIndices, textPosition: textPosition);
    }
    public func CreateSpriteBatch() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch(plok: _ifc.CreateSpriteBatch());
    }
    public func CreateSpriteBatch(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch(plok: _ifc.CreateSpriteBatchWithSortMode(sortMode: sortMode));
    }
    public func CreateSpriteBatch(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch(plok: _ifc.CreateSpriteBatchWithSortModeAndInterpolation(sortMode: sortMode, interpolation: interpolation));
    }
    public func CreateSpriteBatch(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, options : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteOptions) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasSpriteBatch(plok: _ifc.CreateSpriteBatchWithSortModeAndInterpolationAndOptions(sortMode: sortMode, interpolation: interpolation, options: options));
    }
    public var Antialiasing : WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.Antialiasing;
        }
    }
    public var Blend : WinRT.Microsoft.Graphics.Canvas.CanvasBlend {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.Blend;
        }
    }
    public var EffectBufferPrecision : Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.EffectBufferPrecision;
        }
    }
    public var EffectTileSize : WinRT.Windows.Graphics.Imaging.BitmapSize {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.EffectTileSize;
        }
    }
    public var TextAntialiasing : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.TextAntialiasing;
        }
    }
    public var TextRenderingParameters : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters(plok: _ifc.TextRenderingParameters);
        }
    }
    public var Transform : WinRT.Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.Transform;
        }
    }
    public var Units : WinRT.Microsoft.Graphics.Canvas.CanvasUnits {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasDrawingSession = try _self.QueryInterface();
            return try _ifc.Units;
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : WinRT.Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
            return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
            return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.CanvasImageInterpolation
// enum type
public typealias CanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;

// type: Microsoft.Graphics.Canvas.CanvasLayerOptions
// enum type
public typealias CanvasLayerOptions = _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;

// type: Microsoft.Graphics.Canvas.CanvasSpriteBatch
// runtime class
public class CanvasSpriteBatch
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch { return _self; }
    // static interface not needed: Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: Draw
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    // method not needed: DrawFromSpriteSheet
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : WinRT.Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
            return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<WinRT.Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
            return try WinRT.Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.CanvasSpriteOptions
// enum type
public typealias CanvasSpriteOptions = _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;

// type: Microsoft.Graphics.Canvas.CanvasSpriteSortMode
// enum type
public typealias CanvasSpriteSortMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;

// type: Microsoft.Graphics.Canvas.CanvasUnits
// enum type
public typealias CanvasUnits = _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;

// type: Microsoft.Graphics.Canvas.ICanvasActiveLayer
// interface type
open class ICanvasActiveLayer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x49ecfc58, Data2: 0x5e1c, Data3 : 0x4ee3, Data4 : (0x80, 0x88, 0x54, 0x2f, 0x94, 0xe9, 0x3c, 0x60)) }
} // ICanvasActiveLayer


// type: Microsoft.Graphics.Canvas.ICanvasBitmap
// interface type
open class ICanvasBitmap
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc57532ed, Data2: 0x709e, Data3 : 0x4ac2, Data4 : (0x86, 0xbe, 0xa1, 0xec, 0x3a, 0x7f, 0xa8, 0xfe)) }
// method not needed: get_SizeInPixels
// method not needed: get_Size
// method not needed: get_Bounds
// method not needed: get_Format
// method not needed: get_AlphaMode
// method not needed: SaveToFileAsync
// method not needed: SaveToFileWithBitmapFileFormatAsync
// method not needed: SaveToFileWithBitmapFileFormatAndQualityAsync
// method not needed: SaveToStreamAsync
// method not needed: SaveToStreamWithQualityAsync
// method not needed: GetPixelBytes
// method not needed: GetPixelBytesWithSubrectangle
// method not needed: GetPixelBytesWithBuffer
// method not needed: GetPixelBytesWithBufferAndSubrectangle
// method not needed: GetPixelColors
// method not needed: GetPixelColorsWithSubrectangle
// method not needed: SetPixelBytes
// method not needed: SetPixelBytesWithSubrectangle
// method not needed: SetPixelBytesWithBuffer
// method not needed: SetPixelBytesWithBufferAndSubrectangle
// method not needed: SetPixelColors
// method not needed: SetPixelColorsWithSubrectangle
// method not needed: CopyPixelsFromBitmap
// method not needed: CopyPixelsFromBitmapWithDestPoint
// method not needed: CopyPixelsFromBitmapWithDestPointAndSourceRect
} // ICanvasBitmap


// type: Microsoft.Graphics.Canvas.ICanvasDevice
// interface type
open class ICanvasDevice
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa27f0b5d, Data2: 0xec2c, Data3 : 0x4d4f, Data4 : (0x94, 0x8f, 0x0a, 0xa1, 0xe9, 0x5e, 0x33, 0xe6)) }
// method not needed: get_ForceSoftwareRenderer
// method not needed: get_MaximumBitmapSizeInPixels
// method not needed: IsPixelFormatSupported
// method not needed: IsBufferPrecisionSupported
// method not needed: get_MaximumCacheSize
// method not needed: put_MaximumCacheSize
// method not needed: get_LowPriority
// method not needed: put_LowPriority
// method not needed: add_DeviceLost
// method not needed: remove_DeviceLost
// method not needed: IsDeviceLost
// method not needed: RaiseDeviceLost
// method not needed: Lock
} // ICanvasDevice


// type: Microsoft.Graphics.Canvas.ICanvasDeviceFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasDeviceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe2c2bf21, Data2: 0x5418, Data3 : 0x43b9, Data4 : (0xa2, 0xda, 0x53, 0x9e, 0x28, 0x7c, 0x79, 0x0f)) }
    // Microsoft.Graphics.Canvas.CanvasDevice CreateWithForceSoftwareRendererOption(bool)
    public func _n_CreateWithForceSoftwareRendererOption(_ forceSoftwareRenderer : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithForceSoftwareRendererOption(pThis, forceSoftwareRenderer, __presult))
        }
    }
    public func CreateWithForceSoftwareRendererOption(forceSoftwareRenderer : boolean) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_CreateWithForceSoftwareRendererOption(forceSoftwareRenderer, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
} // ICanvasDeviceFactory


// type: Microsoft.Graphics.Canvas.ICanvasDrawingSession
// interface type
open class ICanvasDrawingSession
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf60afd09, Data2: 0xe623, Data3 : 0x4be0, Data4 : (0xb7, 0x50, 0x57, 0x8a, 0xa9, 0x20, 0xb1, 0xdb)) }
    // void Clear(Windows.UI.Color)
    public func _n_Clear(_ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis, color))
        }
    }
    public func Clear(color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_Clear(color);
    }
    // void Clear(Windows.Foundation.Numerics.Vector4)
    public func _n_ClearHdr(_ color : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ClearHdr(pThis, color))
        }
    }
    public func ClearHdr(color : WinRT.Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_ClearHdr(color);
    }
    // void Flush()
    public func _n_Flush() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Flush(pThis))
        }
    }
    public func Flush() throws -> Void {
        try self._n_Flush();
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage)
    public func _n_DrawImageAtOrigin(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOrigin(pThis, image))
        }
    }
    public func DrawImageAtOrigin(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>) throws -> Void {
        try self._n_DrawImageAtOrigin(RawPointer(image));
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Numerics.Vector2)
    public func _n_DrawImageAtOffset(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffset(pThis, image, offset))
        }
    }
    public func DrawImageAtOffset(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_DrawImageAtOffset(RawPointer(image), offset);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, System.Single, System.Single)
    public func _n_DrawImageAtCoords(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ x : FLOAT, _ y : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoords(pThis, image, x, y))
        }
    }
    public func DrawImageAtCoords(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float) throws -> Void {
        try self._n_DrawImageAtCoords(RawPointer(image), x, y);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.CanvasBitmap, Windows.Foundation.Rect)
    public func _n_DrawImageToRect(_ bitmap : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRect(pThis, bitmap, destinationRectangle))
        }
    }
    public func DrawImageToRect(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap>, destinationRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        try self._n_DrawImageToRect(RawPointer(bitmap), destinationRectangle);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Numerics.Vector2, Windows.Foundation.Rect)
    public func _n_DrawImageAtOffsetWithSourceRect(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ sourceRectangle : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRect(pThis, image, offset, sourceRectangle))
        }
    }
    public func DrawImageAtOffsetWithSourceRect(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        try self._n_DrawImageAtOffsetWithSourceRect(RawPointer(image), offset, sourceRectangle);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, System.Single, System.Single, Windows.Foundation.Rect)
    public func _n_DrawImageAtCoordsWithSourceRect(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ x : FLOAT, _ y : FLOAT, _ sourceRectangle : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRect(pThis, image, x, y, sourceRectangle))
        }
    }
    public func DrawImageAtCoordsWithSourceRect(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        try self._n_DrawImageAtCoordsWithSourceRect(RawPointer(image), x, y, sourceRectangle);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Rect, Windows.Foundation.Rect)
    public func _n_DrawImageToRectWithSourceRect(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect, _ sourceRectangle : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRect(pThis, image, destinationRectangle, sourceRectangle))
        }
    }
    public func DrawImageToRectWithSourceRect(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect) throws -> Void {
        try self._n_DrawImageToRectWithSourceRect(RawPointer(image), destinationRectangle, sourceRectangle);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Numerics.Vector2, Windows.Foundation.Rect, System.Single)
    public func _n_DrawImageAtOffsetWithSourceRectAndOpacity(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacity(pThis, image, offset, sourceRectangle, opacity))
        }
    }
    public func DrawImageAtOffsetWithSourceRectAndOpacity(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        try self._n_DrawImageAtOffsetWithSourceRectAndOpacity(RawPointer(image), offset, sourceRectangle, opacity);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, System.Single, System.Single, Windows.Foundation.Rect, System.Single)
    public func _n_DrawImageAtCoordsWithSourceRectAndOpacity(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ x : FLOAT, _ y : FLOAT, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacity(pThis, image, x, y, sourceRectangle, opacity))
        }
    }
    public func DrawImageAtCoordsWithSourceRectAndOpacity(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        try self._n_DrawImageAtCoordsWithSourceRectAndOpacity(RawPointer(image), x, y, sourceRectangle, opacity);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Rect, Windows.Foundation.Rect, System.Single)
    public func _n_DrawImageToRectWithSourceRectAndOpacity(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacity(pThis, image, destinationRectangle, sourceRectangle, opacity))
        }
    }
    public func DrawImageToRectWithSourceRectAndOpacity(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float) throws -> Void {
        try self._n_DrawImageToRectWithSourceRectAndOpacity(RawPointer(image), destinationRectangle, sourceRectangle, opacity);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Numerics.Vector2, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    public func _n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(pThis, image, offset, sourceRectangle, opacity, interpolation))
        }
    }
    public func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(RawPointer(image), offset, sourceRectangle, opacity, interpolation);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, System.Single, System.Single, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    public func _n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ x : FLOAT, _ y : FLOAT, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(pThis, image, x, y, sourceRectangle, opacity, interpolation))
        }
    }
    public func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(RawPointer(image), x, y, sourceRectangle, opacity, interpolation);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Rect, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    public func _n_DrawImageToRectWithSourceRectAndOpacityAndInterpolation(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolation(pThis, image, destinationRectangle, sourceRectangle, opacity, interpolation))
        }
    }
    public func DrawImageToRectWithSourceRectAndOpacityAndInterpolation(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_DrawImageToRectWithSourceRectAndOpacityAndInterpolation(RawPointer(image), destinationRectangle, sourceRectangle, opacity, interpolation);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Numerics.Vector2, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Microsoft.Graphics.Canvas.CanvasComposite)
    public func _n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ composite : _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, image, offset, sourceRectangle, opacity, interpolation, composite))
        }
    }
    public func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        try self._n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(RawPointer(image), offset, sourceRectangle, opacity, interpolation, composite);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, System.Single, System.Single, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Microsoft.Graphics.Canvas.CanvasComposite)
    public func _n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ x : FLOAT, _ y : FLOAT, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ composite : _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, image, x, y, sourceRectangle, opacity, interpolation, composite))
        }
    }
    public func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        try self._n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(RawPointer(image), x, y, sourceRectangle, opacity, interpolation, composite);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.ICanvasImage, Windows.Foundation.Rect, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Microsoft.Graphics.Canvas.CanvasComposite)
    public func _n_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(_ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ composite : _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(pThis, image, destinationRectangle, sourceRectangle, opacity, interpolation, composite))
        }
    }
    public func DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(image : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasImage>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, composite : WinRT.Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        try self._n_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(RawPointer(image), destinationRectangle, sourceRectangle, opacity, interpolation, composite);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.CanvasBitmap, Windows.Foundation.Numerics.Vector2, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Windows.Foundation.Numerics.Matrix4x4)
    public func _n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(_ bitmap : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ perspective : _q_CWindows_CFoundation_CNumerics_CMatrix4x4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, bitmap, offset, sourceRectangle, opacity, interpolation, perspective))
        }
    }
    public func DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap>, offset : WinRT.Windows.Foundation.Numerics.Vector2, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        try self._n_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(RawPointer(bitmap), offset, sourceRectangle, opacity, interpolation, perspective);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.CanvasBitmap, System.Single, System.Single, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Windows.Foundation.Numerics.Matrix4x4)
    public func _n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(_ bitmap : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap>>, _ x : FLOAT, _ y : FLOAT, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ perspective : _q_CWindows_CFoundation_CNumerics_CMatrix4x4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, bitmap, x, y, sourceRectangle, opacity, interpolation, perspective))
        }
    }
    public func DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap>, x : Swift.Float, y : Swift.Float, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        try self._n_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(RawPointer(bitmap), x, y, sourceRectangle, opacity, interpolation, perspective);
    }
    // void DrawImage(Microsoft.Graphics.Canvas.CanvasBitmap, Windows.Foundation.Rect, Windows.Foundation.Rect, System.Single, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Windows.Foundation.Numerics.Matrix4x4)
    public func _n_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(_ bitmap : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap>>, _ destinationRectangle : _q_CWindows_CFoundation_CRect, _ sourceRectangle : _q_CWindows_CFoundation_CRect, _ opacity : FLOAT, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ perspective : _q_CWindows_CFoundation_CNumerics_CMatrix4x4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(pThis, bitmap, destinationRectangle, sourceRectangle, opacity, interpolation, perspective))
        }
    }
    public func DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasBitmap>, destinationRectangle : WinRT.Windows.Foundation.Rect, sourceRectangle : WinRT.Windows.Foundation.Rect, opacity : Swift.Float, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, perspective : WinRT.Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        try self._n_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(RawPointer(bitmap), destinationRectangle, sourceRectangle, opacity, interpolation, perspective);
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawLineWithBrush(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrush(pThis, point0, point1, brush))
        }
    }
    public func DrawLineWithBrush(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawLineWithBrush(point0, point1, RawPointer(brush));
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawLineAtCoordsWithBrush(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrush(pThis, x0, y0, x1, y1, brush))
        }
    }
    public func DrawLineAtCoordsWithBrush(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawLineAtCoordsWithBrush(x0, y0, x1, y1, RawPointer(brush));
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_DrawLineWithColor(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColor(pThis, point0, point1, color))
        }
    }
    public func DrawLineWithColor(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawLineWithColor(point0, point1, color);
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawLineAtCoordsWithColor(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColor(pThis, x0, y0, x1, y1, color))
        }
    }
    public func DrawLineAtCoordsWithColor(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawLineAtCoordsWithColor(x0, y0, x1, y1, color);
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawLineWithBrushAndStrokeWidth(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrushAndStrokeWidth(pThis, point0, point1, brush, strokeWidth))
        }
    }
    public func DrawLineWithBrushAndStrokeWidth(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawLineWithBrushAndStrokeWidth(point0, point1, RawPointer(brush), strokeWidth);
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawLineAtCoordsWithBrushAndStrokeWidth(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrushAndStrokeWidth(pThis, x0, y0, x1, y1, brush, strokeWidth))
        }
    }
    public func DrawLineAtCoordsWithBrushAndStrokeWidth(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawLineAtCoordsWithBrushAndStrokeWidth(x0, y0, x1, y1, RawPointer(brush), strokeWidth);
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Windows.UI.Color, System.Single)
    public func _n_DrawLineWithColorAndStrokeWidth(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColorAndStrokeWidth(pThis, point0, point1, color, strokeWidth))
        }
    }
    public func DrawLineWithColorAndStrokeWidth(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawLineWithColorAndStrokeWidth(point0, point1, color, strokeWidth);
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawLineAtCoordsWithColorAndStrokeWidth(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColorAndStrokeWidth(pThis, x0, y0, x1, y1, color, strokeWidth))
        }
    }
    public func DrawLineAtCoordsWithColorAndStrokeWidth(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawLineAtCoordsWithColorAndStrokeWidth(x0, y0, x1, y1, color, strokeWidth);
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawLineWithBrushAndStrokeWidthAndStrokeStyle(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithBrushAndStrokeWidthAndStrokeStyle(pThis, point0, point1, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawLineWithBrushAndStrokeWidthAndStrokeStyle(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawLineWithBrushAndStrokeWidthAndStrokeStyle(point0, point1, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x0, y0, x1, y1, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawLine(Windows.Foundation.Numerics.Vector2, Windows.Foundation.Numerics.Vector2, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawLineWithColorAndStrokeWidthAndStrokeStyle(_ point0 : _q_CWindows_CFoundation_CNumerics_CVector2, _ point1 : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineWithColorAndStrokeWidthAndStrokeStyle(pThis, point0, point1, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawLineWithColorAndStrokeWidthAndStrokeStyle(point0 : WinRT.Windows.Foundation.Numerics.Vector2, point1 : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawLineWithColorAndStrokeWidthAndStrokeStyle(point0, point1, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawLine(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ x0 : FLOAT, _ y0 : FLOAT, _ x1 : FLOAT, _ y1 : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x0, y0, x1, y1, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x0 : Swift.Float, y0 : Swift.Float, x1 : Swift.Float, y1 : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRectangle(Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawRectangleWithBrush(_ rect : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrush(pThis, rect, brush))
        }
    }
    public func DrawRectangleWithBrush(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawRectangleWithBrush(rect, RawPointer(brush));
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawRectangleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrush(pThis, x, y, w, h, brush))
        }
    }
    public func DrawRectangleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithBrush(x, y, w, h, RawPointer(brush));
    }
    // void DrawRectangle(Windows.Foundation.Rect, Windows.UI.Color)
    public func _n_DrawRectangleWithColor(_ rect : _q_CWindows_CFoundation_CRect, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColor(pThis, rect, color))
        }
    }
    public func DrawRectangleWithColor(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawRectangleWithColor(rect, color);
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawRectangleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColor(pThis, x, y, w, h, color))
        }
    }
    public func DrawRectangleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithColor(x, y, w, h, color);
    }
    // void DrawRectangle(Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawRectangleWithBrushAndStrokeWidth(_ rect : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrushAndStrokeWidth(pThis, rect, brush, strokeWidth))
        }
    }
    public func DrawRectangleWithBrushAndStrokeWidth(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRectangleWithBrushAndStrokeWidth(rect, RawPointer(brush), strokeWidth);
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawRectangleAtCoordsWithBrushAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, w, h, brush, strokeWidth))
        }
    }
    public func DrawRectangleAtCoordsWithBrushAndStrokeWidth(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, RawPointer(brush), strokeWidth);
    }
    // void DrawRectangle(Windows.Foundation.Rect, Windows.UI.Color, System.Single)
    public func _n_DrawRectangleWithColorAndStrokeWidth(_ rect : _q_CWindows_CFoundation_CRect, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColorAndStrokeWidth(pThis, rect, color, strokeWidth))
        }
    }
    public func DrawRectangleWithColorAndStrokeWidth(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRectangleWithColorAndStrokeWidth(rect, color, strokeWidth);
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawRectangleAtCoordsWithColorAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColorAndStrokeWidth(pThis, x, y, w, h, color, strokeWidth))
        }
    }
    public func DrawRectangleAtCoordsWithColorAndStrokeWidth(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, color, strokeWidth);
    }
    // void DrawRectangle(Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(_ rect : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(pThis, rect, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRectangle(Windows.Foundation.Rect, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(_ rect : _q_CWindows_CFoundation_CRect, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(pThis, rect, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(rect, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRectangle(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void FillRectangle(Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRectangleWithBrush(_ rect : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithBrush(pThis, rect, brush))
        }
    }
    public func FillRectangleWithBrush(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRectangleWithBrush(rect, RawPointer(brush));
    }
    // void FillRectangle(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRectangleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithBrush(pThis, x, y, w, h, brush))
        }
    }
    public func FillRectangleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRectangleAtCoordsWithBrush(x, y, w, h, RawPointer(brush));
    }
    // void FillRectangle(Windows.Foundation.Rect, Windows.UI.Color)
    public func _n_FillRectangleWithColor(_ rect : _q_CWindows_CFoundation_CRect, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithColor(pThis, rect, color))
        }
    }
    public func FillRectangleWithColor(rect : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillRectangleWithColor(rect, color);
    }
    // void FillRectangle(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillRectangleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithColor(pThis, x, y, w, h, color))
        }
    }
    public func FillRectangleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillRectangleAtCoordsWithColor(x, y, w, h, color);
    }
    // void FillRectangle(Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRectangleWithBrushAndOpacityBrush(_ rect : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleWithBrushAndOpacityBrush(pThis, rect, brush, opacityBrush))
        }
    }
    public func FillRectangleWithBrushAndOpacityBrush(rect : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRectangleWithBrushAndOpacityBrush(rect, RawPointer(brush), RawPointer(opacityBrush));
    }
    // void FillRectangle(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRectangleAtCoordsWithBrushAndOpacityBrush(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRectangleAtCoordsWithBrushAndOpacityBrush(pThis, x, y, w, h, brush, opacityBrush))
        }
    }
    public func FillRectangleAtCoordsWithBrushAndOpacityBrush(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRectangleAtCoordsWithBrushAndOpacityBrush(x, y, w, h, RawPointer(brush), RawPointer(opacityBrush));
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawRoundedRectangleWithBrush(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrush(pThis, rect, radiusX, radiusY, brush))
        }
    }
    public func DrawRoundedRectangleWithBrush(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawRoundedRectangleWithBrush(rect, radiusX, radiusY, RawPointer(brush));
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawRoundedRectangleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrush(pThis, x, y, w, h, radiusX, radiusY, brush))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, RawPointer(brush));
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawRoundedRectangleWithColor(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColor(pThis, rect, radiusX, radiusY, color))
        }
    }
    public func DrawRoundedRectangleWithColor(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawRoundedRectangleWithColor(rect, radiusX, radiusY, color);
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawRoundedRectangleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColor(pThis, x, y, w, h, radiusX, radiusY, color))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, color);
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawRoundedRectangleWithBrushAndStrokeWidth(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrushAndStrokeWidth(pThis, rect, radiusX, radiusY, brush, strokeWidth))
        }
    }
    public func DrawRoundedRectangleWithBrushAndStrokeWidth(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRoundedRectangleWithBrushAndStrokeWidth(rect, radiusX, radiusY, RawPointer(brush), strokeWidth);
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, w, h, radiusX, radiusY, brush, strokeWidth))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, radiusX, radiusY, RawPointer(brush), strokeWidth);
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawRoundedRectangleWithColorAndStrokeWidth(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColorAndStrokeWidth(pThis, rect, radiusX, radiusY, color, strokeWidth))
        }
    }
    public func DrawRoundedRectangleWithColorAndStrokeWidth(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRoundedRectangleWithColorAndStrokeWidth(rect, radiusX, radiusY, color, strokeWidth);
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(pThis, x, y, w, h, radiusX, radiusY, color, strokeWidth))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, radiusX, radiusY, color, strokeWidth);
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(pThis, rect, radiusX, radiusY, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect, radiusX, radiusY, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, radiusX, radiusY, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(pThis, rect, radiusX, radiusY, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(rect, radiusX, radiusY, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, w, h, radiusX, radiusY, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void FillRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRoundedRectangleWithBrush(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleWithBrush(pThis, rect, radiusX, radiusY, brush))
        }
    }
    public func FillRoundedRectangleWithBrush(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRoundedRectangleWithBrush(rect, radiusX, radiusY, RawPointer(brush));
    }
    // void FillRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillRoundedRectangleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleAtCoordsWithBrush(pThis, x, y, w, h, radiusX, radiusY, brush))
        }
    }
    public func FillRoundedRectangleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, RawPointer(brush));
    }
    // void FillRoundedRectangle(Windows.Foundation.Rect, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillRoundedRectangleWithColor(_ rect : _q_CWindows_CFoundation_CRect, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleWithColor(pThis, rect, radiusX, radiusY, color))
        }
    }
    public func FillRoundedRectangleWithColor(rect : WinRT.Windows.Foundation.Rect, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillRoundedRectangleWithColor(rect, radiusX, radiusY, color);
    }
    // void FillRoundedRectangle(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillRoundedRectangleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillRoundedRectangleAtCoordsWithColor(pThis, x, y, w, h, radiusX, radiusY, color))
        }
    }
    public func FillRoundedRectangleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, color);
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawEllipseWithBrush(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrush(pThis, centerPoint, radiusX, radiusY, brush))
        }
    }
    public func DrawEllipseWithBrush(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawEllipseWithBrush(centerPoint, radiusX, radiusY, RawPointer(brush));
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawEllipseAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrush(pThis, x, y, radiusX, radiusY, brush))
        }
    }
    public func DrawEllipseAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, RawPointer(brush));
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawEllipseWithColor(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColor(pThis, centerPoint, radiusX, radiusY, color))
        }
    }
    public func DrawEllipseWithColor(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawEllipseWithColor(centerPoint, radiusX, radiusY, color);
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawEllipseAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColor(pThis, x, y, radiusX, radiusY, color))
        }
    }
    public func DrawEllipseAtCoordsWithColor(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithColor(x, y, radiusX, radiusY, color);
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawEllipseWithBrushAndStrokeWidth(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrushAndStrokeWidth(pThis, centerPoint, radiusX, radiusY, brush, strokeWidth))
        }
    }
    public func DrawEllipseWithBrushAndStrokeWidth(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawEllipseWithBrushAndStrokeWidth(centerPoint, radiusX, radiusY, RawPointer(brush), strokeWidth);
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawEllipseAtCoordsWithBrushAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrushAndStrokeWidth(pThis, x, y, radiusX, radiusY, brush, strokeWidth))
        }
    }
    public func DrawEllipseAtCoordsWithBrushAndStrokeWidth(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithBrushAndStrokeWidth(x, y, radiusX, radiusY, RawPointer(brush), strokeWidth);
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawEllipseWithColorAndStrokeWidth(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColorAndStrokeWidth(pThis, centerPoint, radiusX, radiusY, color, strokeWidth))
        }
    }
    public func DrawEllipseWithColorAndStrokeWidth(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawEllipseWithColorAndStrokeWidth(centerPoint, radiusX, radiusY, color, strokeWidth);
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawEllipseAtCoordsWithColorAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColorAndStrokeWidth(pThis, x, y, radiusX, radiusY, color, strokeWidth))
        }
    }
    public func DrawEllipseAtCoordsWithColorAndStrokeWidth(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithColorAndStrokeWidth(x, y, radiusX, radiusY, color, strokeWidth);
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(pThis, centerPoint, radiusX, radiusY, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(centerPoint, radiusX, radiusY, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, radiusX, radiusY, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(pThis, centerPoint, radiusX, radiusY, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(centerPoint, radiusX, radiusY, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawEllipse(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, radiusX, radiusY, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void FillEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillEllipseWithBrush(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseWithBrush(pThis, centerPoint, radiusX, radiusY, brush))
        }
    }
    public func FillEllipseWithBrush(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillEllipseWithBrush(centerPoint, radiusX, radiusY, RawPointer(brush));
    }
    // void FillEllipse(System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillEllipseAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseAtCoordsWithBrush(pThis, x, y, radiusX, radiusY, brush))
        }
    }
    public func FillEllipseAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, RawPointer(brush));
    }
    // void FillEllipse(Windows.Foundation.Numerics.Vector2, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillEllipseWithColor(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseWithColor(pThis, centerPoint, radiusX, radiusY, color))
        }
    }
    public func FillEllipseWithColor(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillEllipseWithColor(centerPoint, radiusX, radiusY, color);
    }
    // void FillEllipse(System.Single, System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillEllipseAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ radiusX : FLOAT, _ radiusY : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillEllipseAtCoordsWithColor(pThis, x, y, radiusX, radiusY, color))
        }
    }
    public func FillEllipseAtCoordsWithColor(x : Swift.Float, y : Swift.Float, radiusX : Swift.Float, radiusY : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillEllipseAtCoordsWithColor(x, y, radiusX, radiusY, color);
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawCircleWithBrush(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrush(pThis, centerPoint, radius, brush))
        }
    }
    public func DrawCircleWithBrush(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawCircleWithBrush(centerPoint, radius, RawPointer(brush));
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawCircleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrush(pThis, x, y, radius, brush))
        }
    }
    public func DrawCircleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawCircleAtCoordsWithBrush(x, y, radius, RawPointer(brush));
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Windows.UI.Color)
    public func _n_DrawCircleWithColor(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColor(pThis, centerPoint, radius, color))
        }
    }
    public func DrawCircleWithColor(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawCircleWithColor(centerPoint, radius, color);
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawCircleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColor(pThis, x, y, radius, color))
        }
    }
    public func DrawCircleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawCircleAtCoordsWithColor(x, y, radius, color);
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawCircleWithBrushAndStrokeWidth(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrushAndStrokeWidth(pThis, centerPoint, radius, brush, strokeWidth))
        }
    }
    public func DrawCircleWithBrushAndStrokeWidth(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawCircleWithBrushAndStrokeWidth(centerPoint, radius, RawPointer(brush), strokeWidth);
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawCircleAtCoordsWithBrushAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrushAndStrokeWidth(pThis, x, y, radius, brush, strokeWidth))
        }
    }
    public func DrawCircleAtCoordsWithBrushAndStrokeWidth(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawCircleAtCoordsWithBrushAndStrokeWidth(x, y, radius, RawPointer(brush), strokeWidth);
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawCircleWithColorAndStrokeWidth(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColorAndStrokeWidth(pThis, centerPoint, radius, color, strokeWidth))
        }
    }
    public func DrawCircleWithColorAndStrokeWidth(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawCircleWithColorAndStrokeWidth(centerPoint, radius, color, strokeWidth);
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawCircleAtCoordsWithColorAndStrokeWidth(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColorAndStrokeWidth(pThis, x, y, radius, color, strokeWidth))
        }
    }
    public func DrawCircleAtCoordsWithColorAndStrokeWidth(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawCircleAtCoordsWithColorAndStrokeWidth(x, y, radius, color, strokeWidth);
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(pThis, centerPoint, radius, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(centerPoint, radius, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, x, y, radius, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radius, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawCircle(Windows.Foundation.Numerics.Vector2, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawCircleWithColorAndStrokeWidthAndStrokeStyle(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleWithColorAndStrokeWidthAndStrokeStyle(pThis, centerPoint, radius, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawCircleWithColorAndStrokeWidthAndStrokeStyle(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawCircleWithColorAndStrokeWidthAndStrokeStyle(centerPoint, radius, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawCircle(System.Single, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, x, y, radius, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radius, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void FillCircle(Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillCircleWithBrush(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleWithBrush(pThis, centerPoint, radius, brush))
        }
    }
    public func FillCircleWithBrush(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillCircleWithBrush(centerPoint, radius, RawPointer(brush));
    }
    // void FillCircle(System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillCircleAtCoordsWithBrush(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleAtCoordsWithBrush(pThis, x, y, radius, brush))
        }
    }
    public func FillCircleAtCoordsWithBrush(x : Swift.Float, y : Swift.Float, radius : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillCircleAtCoordsWithBrush(x, y, radius, RawPointer(brush));
    }
    // void FillCircle(Windows.Foundation.Numerics.Vector2, System.Single, Windows.UI.Color)
    public func _n_FillCircleWithColor(_ centerPoint : _q_CWindows_CFoundation_CNumerics_CVector2, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleWithColor(pThis, centerPoint, radius, color))
        }
    }
    public func FillCircleWithColor(centerPoint : WinRT.Windows.Foundation.Numerics.Vector2, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillCircleWithColor(centerPoint, radius, color);
    }
    // void FillCircle(System.Single, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillCircleAtCoordsWithColor(_ x : FLOAT, _ y : FLOAT, _ radius : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillCircleAtCoordsWithColor(pThis, x, y, radius, color))
        }
    }
    public func FillCircleAtCoordsWithColor(x : Swift.Float, y : Swift.Float, radius : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillCircleAtCoordsWithColor(x, y, radius, color);
    }
    // void DrawText(System.String, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_DrawTextAtPointWithColor(_ text : Optional<HSTRING>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithColor(pThis, text, point, color))
        }
    }
    public func DrawTextAtPointWithColor(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointWithColor(__hstr_text.hRef.hString, point, color);
        }
    }
    // void DrawText(System.String, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawTextAtPointCoordsWithColor(_ text : Optional<HSTRING>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithColor(pThis, text, x, y, color))
        }
    }
    public func DrawTextAtPointCoordsWithColor(text : Swift.String, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointCoordsWithColor(__hstr_text.hRef.hString, x, y, color);
        }
    }
    // void DrawText(System.String, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtPointWithBrushAndFormat(_ text : Optional<HSTRING>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithBrushAndFormat(pThis, text, point, brush, format))
        }
    }
    public func DrawTextAtPointWithBrushAndFormat(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointWithBrushAndFormat(__hstr_text.hRef.hString, point, RawPointer(brush), RawPointer(format));
        }
    }
    // void DrawText(System.String, Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtRectWithBrushAndFormat(_ text : Optional<HSTRING>, _ rectangle : _q_CWindows_CFoundation_CRect, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectWithBrushAndFormat(pThis, text, rectangle, brush, format))
        }
    }
    public func DrawTextAtRectWithBrushAndFormat(text : Swift.String, rectangle : WinRT.Windows.Foundation.Rect, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtRectWithBrushAndFormat(__hstr_text.hRef.hString, rectangle, RawPointer(brush), RawPointer(format));
        }
    }
    // void DrawText(System.String, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtPointCoordsWithBrushAndFormat(_ text : Optional<HSTRING>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithBrushAndFormat(pThis, text, x, y, brush, format))
        }
    }
    public func DrawTextAtPointCoordsWithBrushAndFormat(text : Swift.String, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointCoordsWithBrushAndFormat(__hstr_text.hRef.hString, x, y, RawPointer(brush), RawPointer(format));
        }
    }
    // void DrawText(System.String, System.Single, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtRectCoordsWithBrushAndFormat(_ text : Optional<HSTRING>, _ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectCoordsWithBrushAndFormat(pThis, text, x, y, w, h, brush, format))
        }
    }
    public func DrawTextAtRectCoordsWithBrushAndFormat(text : Swift.String, x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtRectCoordsWithBrushAndFormat(__hstr_text.hRef.hString, x, y, w, h, RawPointer(brush), RawPointer(format));
        }
    }
    // void DrawText(System.String, Windows.Foundation.Numerics.Vector2, Windows.UI.Color, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtPointWithColorAndFormat(_ text : Optional<HSTRING>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointWithColorAndFormat(pThis, text, point, color, format))
        }
    }
    public func DrawTextAtPointWithColorAndFormat(text : Swift.String, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointWithColorAndFormat(__hstr_text.hRef.hString, point, color, RawPointer(format));
        }
    }
    // void DrawText(System.String, Windows.Foundation.Rect, Windows.UI.Color, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtRectWithColorAndFormat(_ text : Optional<HSTRING>, _ rectangle : _q_CWindows_CFoundation_CRect, _ color : _q_CWindows_CUI_CColor, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectWithColorAndFormat(pThis, text, rectangle, color, format))
        }
    }
    public func DrawTextAtRectWithColorAndFormat(text : Swift.String, rectangle : WinRT.Windows.Foundation.Rect, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtRectWithColorAndFormat(__hstr_text.hRef.hString, rectangle, color, RawPointer(format));
        }
    }
    // void DrawText(System.String, System.Single, System.Single, Windows.UI.Color, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtPointCoordsWithColorAndFormat(_ text : Optional<HSTRING>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtPointCoordsWithColorAndFormat(pThis, text, x, y, color, format))
        }
    }
    public func DrawTextAtPointCoordsWithColorAndFormat(text : Swift.String, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtPointCoordsWithColorAndFormat(__hstr_text.hRef.hString, x, y, color, RawPointer(format));
        }
    }
    // void DrawText(System.String, System.Single, System.Single, System.Single, System.Single, Windows.UI.Color, Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    public func _n_DrawTextAtRectCoordsWithColorAndFormat(_ text : Optional<HSTRING>, _ x : FLOAT, _ y : FLOAT, _ w : FLOAT, _ h : FLOAT, _ color : _q_CWindows_CUI_CColor, _ format : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextAtRectCoordsWithColorAndFormat(pThis, text, x, y, w, h, color, format))
        }
    }
    public func DrawTextAtRectCoordsWithColorAndFormat(text : Swift.String, x : Swift.Float, y : Swift.Float, w : Swift.Float, h : Swift.Float, color : WinRT.Windows.UI.Color, format : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_DrawTextAtRectCoordsWithColorAndFormat(__hstr_text.hRef.hString, x, y, w, h, color, RawPointer(format));
        }
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawGeometryWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrush(pThis, geometry, offset, brush))
        }
    }
    public func DrawGeometryWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawGeometryWithBrush(RawPointer(geometry), offset, RawPointer(brush));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_DrawGeometryWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColor(pThis, geometry, offset, color))
        }
    }
    public func DrawGeometryWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawGeometryWithColor(RawPointer(geometry), offset, color);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawGeometryAtCoordsWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrush(pThis, geometry, x, y, brush))
        }
    }
    public func DrawGeometryAtCoordsWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithBrush(RawPointer(geometry), x, y, RawPointer(brush));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawGeometryAtCoordsWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColor(pThis, geometry, x, y, color))
        }
    }
    public func DrawGeometryAtCoordsWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithColor(RawPointer(geometry), x, y, color);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawGeometryAtOriginWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrush(pThis, geometry, brush))
        }
    }
    public func DrawGeometryAtOriginWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawGeometryAtOriginWithBrush(RawPointer(geometry), RawPointer(brush));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.UI.Color)
    public func _n_DrawGeometryAtOriginWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColor(pThis, geometry, color))
        }
    }
    public func DrawGeometryAtOriginWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawGeometryAtOriginWithColor(RawPointer(geometry), color);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawGeometryWithBrushAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrushAndStrokeWidth(pThis, geometry, offset, brush, strokeWidth))
        }
    }
    public func DrawGeometryWithBrushAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryWithBrushAndStrokeWidth(RawPointer(geometry), offset, RawPointer(brush), strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Windows.UI.Color, System.Single)
    public func _n_DrawGeometryWithColorAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColorAndStrokeWidth(pThis, geometry, offset, color, strokeWidth))
        }
    }
    public func DrawGeometryWithColorAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryWithColorAndStrokeWidth(RawPointer(geometry), offset, color, strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawGeometryAtCoordsWithBrushAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrushAndStrokeWidth(pThis, geometry, x, y, brush, strokeWidth))
        }
    }
    public func DrawGeometryAtCoordsWithBrushAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithBrushAndStrokeWidth(RawPointer(geometry), x, y, RawPointer(brush), strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Windows.UI.Color, System.Single)
    public func _n_DrawGeometryAtCoordsWithColorAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColorAndStrokeWidth(pThis, geometry, x, y, color, strokeWidth))
        }
    }
    public func DrawGeometryAtCoordsWithColorAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithColorAndStrokeWidth(RawPointer(geometry), x, y, color, strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single)
    public func _n_DrawGeometryAtOriginWithBrushAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrushAndStrokeWidth(pThis, geometry, brush, strokeWidth))
        }
    }
    public func DrawGeometryAtOriginWithBrushAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryAtOriginWithBrushAndStrokeWidth(RawPointer(geometry), RawPointer(brush), strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.UI.Color, System.Single)
    public func _n_DrawGeometryAtOriginWithColorAndStrokeWidth(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColorAndStrokeWidth(pThis, geometry, color, strokeWidth))
        }
    }
    public func DrawGeometryAtOriginWithColorAndStrokeWidth(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float) throws -> Void {
        try self._n_DrawGeometryAtOriginWithColorAndStrokeWidth(RawPointer(geometry), color, strokeWidth);
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(pThis, geometry, offset, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(RawPointer(geometry), offset, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(pThis, geometry, offset, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(RawPointer(geometry), offset, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(pThis, geometry, x, y, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(RawPointer(geometry), x, y, RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(pThis, geometry, x, y, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(RawPointer(geometry), x, y, color, strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(pThis, geometry, brush, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(RawPointer(geometry), RawPointer(brush), strokeWidth, RawPointer(strokeStyle));
    }
    // void DrawGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.UI.Color, System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle)
    public func _n_DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ color : _q_CWindows_CUI_CColor, _ strokeWidth : FLOAT, _ strokeStyle : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(pThis, geometry, color, strokeWidth, strokeStyle))
        }
    }
    public func DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, color : WinRT.Windows.UI.Color, strokeWidth : Swift.Float, strokeStyle : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle>) throws -> Void {
        try self._n_DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(RawPointer(geometry), color, strokeWidth, RawPointer(strokeStyle));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithBrush(pThis, geometry, offset, brush))
        }
    }
    public func FillGeometryWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryWithBrush(RawPointer(geometry), offset, RawPointer(brush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryWithBrushAndOpacityBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithBrushAndOpacityBrush(pThis, geometry, offset, brush, opacityBrush))
        }
    }
    public func FillGeometryWithBrushAndOpacityBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryWithBrushAndOpacityBrush(RawPointer(geometry), offset, RawPointer(brush), RawPointer(opacityBrush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_FillGeometryWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryWithColor(pThis, geometry, offset, color))
        }
    }
    public func FillGeometryWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillGeometryWithColor(RawPointer(geometry), offset, color);
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryAtCoordsWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithBrush(pThis, geometry, x, y, brush))
        }
    }
    public func FillGeometryAtCoordsWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryAtCoordsWithBrush(RawPointer(geometry), x, y, RawPointer(brush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryAtCoordsWithBrushAndOpacityBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithBrushAndOpacityBrush(pThis, geometry, x, y, brush, opacityBrush))
        }
    }
    public func FillGeometryAtCoordsWithBrushAndOpacityBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryAtCoordsWithBrushAndOpacityBrush(RawPointer(geometry), x, y, RawPointer(brush), RawPointer(opacityBrush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, System.Single, System.Single, Windows.UI.Color)
    public func _n_FillGeometryAtCoordsWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtCoordsWithColor(pThis, geometry, x, y, color))
        }
    }
    public func FillGeometryAtCoordsWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillGeometryAtCoordsWithColor(RawPointer(geometry), x, y, color);
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryAtOriginWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithBrush(pThis, geometry, brush))
        }
    }
    public func FillGeometryAtOriginWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryAtOriginWithBrush(RawPointer(geometry), RawPointer(brush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_FillGeometryAtOriginWithBrushAndOpacityBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithBrushAndOpacityBrush(pThis, geometry, brush, opacityBrush))
        }
    }
    public func FillGeometryAtOriginWithBrushAndOpacityBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_FillGeometryAtOriginWithBrushAndOpacityBrush(RawPointer(geometry), RawPointer(brush), RawPointer(opacityBrush));
    }
    // void FillGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.UI.Color)
    public func _n_FillGeometryAtOriginWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FillGeometryAtOriginWithColor(pThis, geometry, color))
        }
    }
    public func FillGeometryAtOriginWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_FillGeometryAtOriginWithColor(RawPointer(geometry), color);
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawCachedGeometryWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryWithBrush(pThis, geometry, offset, brush))
        }
    }
    public func DrawCachedGeometryWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawCachedGeometryWithBrush(RawPointer(geometry), offset, RawPointer(brush));
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_DrawCachedGeometryWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ offset : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryWithColor(pThis, geometry, offset, color))
        }
    }
    public func DrawCachedGeometryWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, offset : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawCachedGeometryWithColor(RawPointer(geometry), offset, color);
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawCachedGeometryAtCoordsWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtCoordsWithBrush(pThis, geometry, x, y, brush))
        }
    }
    public func DrawCachedGeometryAtCoordsWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawCachedGeometryAtCoordsWithBrush(RawPointer(geometry), x, y, RawPointer(brush));
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawCachedGeometryAtCoordsWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtCoordsWithColor(pThis, geometry, x, y, color))
        }
    }
    public func DrawCachedGeometryAtCoordsWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawCachedGeometryAtCoordsWithColor(RawPointer(geometry), x, y, color);
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawCachedGeometryAtOriginWithBrush(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtOriginWithBrush(pThis, geometry, brush))
        }
    }
    public func DrawCachedGeometryAtOriginWithBrush(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawCachedGeometryAtOriginWithBrush(RawPointer(geometry), RawPointer(brush));
    }
    // void DrawCachedGeometry(Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry, Windows.UI.Color)
    public func _n_DrawCachedGeometryAtOriginWithColor(_ geometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>>, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawCachedGeometryAtOriginWithColor(pThis, geometry, color))
        }
    }
    public func DrawCachedGeometryAtOriginWithColor(geometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry>, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawCachedGeometryAtOriginWithColor(RawPointer(geometry), color);
    }
    // void DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout, Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawTextLayoutWithBrush(_ textLayout : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutWithBrush(pThis, textLayout, point, brush))
        }
    }
    public func DrawTextLayoutWithBrush(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout>, point : WinRT.Windows.Foundation.Numerics.Vector2, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawTextLayoutWithBrush(RawPointer(textLayout), point, RawPointer(brush));
    }
    // void DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout, System.Single, System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawTextLayoutAtCoordsWithBrush(_ textLayout : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>, _ x : FLOAT, _ y : FLOAT, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutAtCoordsWithBrush(pThis, textLayout, x, y, brush))
        }
    }
    public func DrawTextLayoutAtCoordsWithBrush(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout>, x : Swift.Float, y : Swift.Float, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawTextLayoutAtCoordsWithBrush(RawPointer(textLayout), x, y, RawPointer(brush));
    }
    // void DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout, Windows.Foundation.Numerics.Vector2, Windows.UI.Color)
    public func _n_DrawTextLayoutWithColor(_ textLayout : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutWithColor(pThis, textLayout, point, color))
        }
    }
    public func DrawTextLayoutWithColor(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout>, point : WinRT.Windows.Foundation.Numerics.Vector2, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawTextLayoutWithColor(RawPointer(textLayout), point, color);
    }
    // void DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout, System.Single, System.Single, Windows.UI.Color)
    public func _n_DrawTextLayoutAtCoordsWithColor(_ textLayout : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>, _ x : FLOAT, _ y : FLOAT, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawTextLayoutAtCoordsWithColor(pThis, textLayout, x, y, color))
        }
    }
    public func DrawTextLayoutAtCoordsWithColor(textLayout : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout>, x : Swift.Float, y : Swift.Float, color : WinRT.Windows.UI.Color) throws -> Void {
        try self._n_DrawTextLayoutAtCoordsWithColor(RawPointer(textLayout), x, y, color);
    }
    // void DrawGradientMesh(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh)
    public func _n_DrawGradientMeshAtOrigin(_ gradientMesh : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMeshAtOrigin(pThis, gradientMesh))
        }
    }
    public func DrawGradientMeshAtOrigin(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh>) throws -> Void {
        try self._n_DrawGradientMeshAtOrigin(RawPointer(gradientMesh));
    }
    // void DrawGradientMesh(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh, Windows.Foundation.Numerics.Vector2)
    public func _n_DrawGradientMesh(_ gradientMesh : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh>>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMesh(pThis, gradientMesh, point))
        }
    }
    public func DrawGradientMesh(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh>, point : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_DrawGradientMesh(RawPointer(gradientMesh), point);
    }
    // void DrawGradientMesh(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh, System.Single, System.Single)
    public func _n_DrawGradientMeshAtCoords(_ gradientMesh : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh>>, _ x : FLOAT, _ y : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGradientMeshAtCoords(pThis, gradientMesh, x, y))
        }
    }
    public func DrawGradientMeshAtCoords(gradientMesh : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh>, x : Swift.Float, y : Swift.Float) throws -> Void {
        try self._n_DrawGradientMeshAtCoords(RawPointer(gradientMesh), x, y);
    }
    // void DrawSvg(Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument, Windows.Foundation.Size)
    public func _n_DrawSvgAtOrigin(_ svgDocument : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>, _ viewportSize : _q_CWindows_CFoundation_CSize) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtOrigin(pThis, svgDocument, viewportSize))
        }
    }
    public func DrawSvgAtOrigin(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size) throws -> Void {
        try self._n_DrawSvgAtOrigin(RawPointer(svgDocument), viewportSize);
    }
    // void DrawSvg(Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument, Windows.Foundation.Size, Windows.Foundation.Numerics.Vector2)
    public func _n_DrawSvgAtPoint(_ svgDocument : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>, _ viewportSize : _q_CWindows_CFoundation_CSize, _ point : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtPoint(pThis, svgDocument, viewportSize, point))
        }
    }
    public func DrawSvgAtPoint(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size, point : WinRT.Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_DrawSvgAtPoint(RawPointer(svgDocument), viewportSize, point);
    }
    // void DrawSvg(Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument, Windows.Foundation.Size, System.Single, System.Single)
    public func _n_DrawSvgAtCoords(_ svgDocument : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>, _ viewportSize : _q_CWindows_CFoundation_CSize, _ x : FLOAT, _ y : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawSvgAtCoords(pThis, svgDocument, viewportSize, x, y))
        }
    }
    public func DrawSvgAtCoords(svgDocument : Optional<WinRT.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument>, viewportSize : WinRT.Windows.Foundation.Size, x : Swift.Float, y : Swift.Float) throws -> Void {
        try self._n_DrawSvgAtCoords(RawPointer(svgDocument), viewportSize, x, y);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAntialiasing get_Antialiasing()
    public func _n_get_Antialiasing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Antialiasing(pThis, __presult))
        }
    }
    public func get_Antialiasing() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased;
        try self._n_get_Antialiasing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Antialiasing(Microsoft.Graphics.Canvas.CanvasAntialiasing)
    public func _n_put_Antialiasing(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Antialiasing(pThis, value))
        }
    }
    public func put_Antialiasing(value : WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Void {
        try self._n_put_Antialiasing(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasBlend get_Blend()
    public func _n_get_Blend(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Blend(pThis, __presult))
        }
    }
    public func get_Blend() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasBlend {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend = _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver;
        try self._n_get_Blend(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Blend(Microsoft.Graphics.Canvas.CanvasBlend)
    public func _n_put_Blend(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Blend(pThis, value))
        }
    }
    public func put_Blend(value : WinRT.Microsoft.Graphics.Canvas.CanvasBlend) throws -> Void {
        try self._n_put_Blend(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing get_TextAntialiasing()
    public func _n_get_TextAntialiasing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAntialiasing(pThis, __presult))
        }
    }
    public func get_TextAntialiasing() throws -> WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto;
        try self._n_get_TextAntialiasing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextAntialiasing(Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing)
    public func _n_put_TextAntialiasing(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAntialiasing(pThis, value))
        }
    }
    public func put_TextAntialiasing(value : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing) throws -> Void {
        try self._n_put_TextAntialiasing(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters get_TextRenderingParameters()
    public func _n_get_TextRenderingParameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextRenderingParameters(pThis, __presult))
        }
    }
    public func get_TextRenderingParameters() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>> = nil;
        try self._n_get_TextRenderingParameters(&__result);
        return WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters(consuming: __result);
    }
    // [IsSpecialName] void put_TextRenderingParameters(Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters)
    public func _n_put_TextRenderingParameters(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextRenderingParameters(pThis, value))
        }
    }
    public func put_TextRenderingParameters(value : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters>) throws -> Void {
        try self._n_put_TextRenderingParameters(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Matrix3x2 get_Transform()
    public func _n_get_Transform(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix3x2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, __presult))
        }
    }
    public func get_Transform() throws -> WinRT.Windows.Foundation.Numerics.Matrix3x2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix3x2 = _q_CWindows_CFoundation_CNumerics_CMatrix3x2(M11: 0, M12: 0, M21: 0, M22: 0, M31: 0, M32: 0);
        try self._n_get_Transform(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    public func _n_put_Transform(_ value : _q_CWindows_CFoundation_CNumerics_CMatrix3x2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, value))
        }
    }
    public func put_Transform(value : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        try self._n_put_Transform(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasUnits get_Units()
    public func _n_get_Units(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Units(pThis, __presult))
        }
    }
    public func get_Units() throws -> WinRT.Microsoft.Graphics.Canvas.CanvasUnits {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits = _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips;
        try self._n_get_Units(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Units(Microsoft.Graphics.Canvas.CanvasUnits)
    public func _n_put_Units(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Units(pThis, value))
        }
    }
    public func put_Units(value : WinRT.Microsoft.Graphics.Canvas.CanvasUnits) throws -> Void {
        try self._n_put_Units(value);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Microsoft.Graphics.Canvas.CanvasBufferPrecision> get_EffectBufferPrecision()
    public func _n_get_EffectBufferPrecision(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectBufferPrecision(pThis, __presult))
        }
    }
    public func get_EffectBufferPrecision() throws -> Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>> = nil;
        try self._n_get_EffectBufferPrecision(&__result);
        return WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision(consuming: __result);
    }
    // [IsSpecialName] void put_EffectBufferPrecision(Windows.Foundation.IReference<Microsoft.Graphics.Canvas.CanvasBufferPrecision>)
    public func _n_put_EffectBufferPrecision(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EffectBufferPrecision(pThis, value))
        }
    }
    public func put_EffectBufferPrecision(value : Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        try self._n_put_EffectBufferPrecision(RawPointer(value));
    }
    // [IsSpecialName] Windows.Graphics.Imaging.BitmapSize get_EffectTileSize()
    public func _n_get_EffectTileSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CGraphics_CImaging_CBitmapSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectTileSize(pThis, __presult))
        }
    }
    public func get_EffectTileSize() throws -> WinRT.Windows.Graphics.Imaging.BitmapSize {
        var __result : _q_CWindows_CGraphics_CImaging_CBitmapSize = _q_CWindows_CGraphics_CImaging_CBitmapSize(Width: 0, Height: 0);
        try self._n_get_EffectTileSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_EffectTileSize(Windows.Graphics.Imaging.BitmapSize)
    public func _n_put_EffectTileSize(_ value : _q_CWindows_CGraphics_CImaging_CBitmapSize) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EffectTileSize(pThis, value))
        }
    }
    public func put_EffectTileSize(value : WinRT.Windows.Graphics.Imaging.BitmapSize) throws -> Void {
        try self._n_put_EffectTileSize(value);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(System.Single)
    public func _n_CreateLayerWithOpacity(_ opacity : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacity(pThis, opacity, __presult))
        }
    }
    public func CreateLayerWithOpacity(opacity : Swift.Float) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacity(opacity, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_CreateLayerWithOpacityBrush(_ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrush(pThis, opacityBrush, __presult))
        }
    }
    public func CreateLayerWithOpacityBrush(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityBrush(RawPointer(opacityBrush), &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(System.Single, Windows.Foundation.Rect)
    public func _n_CreateLayerWithOpacityAndClipRectangle(_ opacity : FLOAT, _ clipRectangle : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipRectangle(pThis, opacity, clipRectangle, __presult))
        }
    }
    public func CreateLayerWithOpacityAndClipRectangle(opacity : Swift.Float, clipRectangle : WinRT.Windows.Foundation.Rect) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityAndClipRectangle(opacity, clipRectangle, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Windows.Foundation.Rect)
    public func _n_CreateLayerWithOpacityBrushAndClipRectangle(_ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ clipRectangle : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipRectangle(pThis, opacityBrush, clipRectangle, __presult))
        }
    }
    public func CreateLayerWithOpacityBrushAndClipRectangle(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipRectangle : WinRT.Windows.Foundation.Rect) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityBrushAndClipRectangle(RawPointer(opacityBrush), clipRectangle, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasGeometry)
    public func _n_CreateLayerWithOpacityAndClipGeometry(_ opacity : FLOAT, _ clipGeometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipGeometry(pThis, opacity, clipGeometry, __presult))
        }
    }
    public func CreateLayerWithOpacityAndClipGeometry(opacity : Swift.Float, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityAndClipGeometry(opacity, RawPointer(clipGeometry), &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Geometry.CanvasGeometry)
    public func _n_CreateLayerWithOpacityBrushAndClipGeometry(_ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ clipGeometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipGeometry(pThis, opacityBrush, clipGeometry, __presult))
        }
    }
    public func CreateLayerWithOpacityBrushAndClipGeometry(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityBrushAndClipGeometry(RawPointer(opacityBrush), RawPointer(clipGeometry), &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(System.Single, Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Matrix3x2)
    public func _n_CreateLayerWithOpacityAndClipGeometryAndTransform(_ opacity : FLOAT, _ clipGeometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ geometryTransform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityAndClipGeometryAndTransform(pThis, opacity, clipGeometry, geometryTransform, __presult))
        }
    }
    public func CreateLayerWithOpacityAndClipGeometryAndTransform(opacity : Swift.Float, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityAndClipGeometryAndTransform(opacity, RawPointer(clipGeometry), geometryTransform, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Matrix3x2)
    public func _n_CreateLayerWithOpacityBrushAndClipGeometryAndTransform(_ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ clipGeometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ geometryTransform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithOpacityBrushAndClipGeometryAndTransform(pThis, opacityBrush, clipGeometry, geometryTransform, __presult))
        }
    }
    public func CreateLayerWithOpacityBrushAndClipGeometryAndTransform(opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithOpacityBrushAndClipGeometryAndTransform(RawPointer(opacityBrush), RawPointer(clipGeometry), geometryTransform, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasActiveLayer CreateLayer(System.Single, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Geometry.CanvasGeometry, Windows.Foundation.Numerics.Matrix3x2, Microsoft.Graphics.Canvas.CanvasLayerOptions)
    public func _n_CreateLayerWithAllOptions(_ opacity : FLOAT, _ opacityBrush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ clipRectangle : _q_CWindows_CFoundation_CRect, _ clipGeometry : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>>, _ geometryTransform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ options : _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLayerWithAllOptions(pThis, opacity, opacityBrush, clipRectangle, clipGeometry, geometryTransform, options, __presult))
        }
    }
    public func CreateLayerWithAllOptions(opacity : Swift.Float, opacityBrush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, clipRectangle : WinRT.Windows.Foundation.Rect, clipGeometry : Optional<WinRT.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry>, geometryTransform : WinRT.Windows.Foundation.Numerics.Matrix3x2, options : WinRT.Microsoft.Graphics.Canvas.CanvasLayerOptions) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer>> = nil;
        try self._n_CreateLayerWithAllOptions(opacity, RawPointer(opacityBrush), clipRectangle, RawPointer(clipGeometry), geometryTransform, options, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasActiveLayer(consuming: __result);
    }
    // void DrawGlyphRun(Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], bool, System.UInt32, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    public func _n_DrawGlyphRun(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ glyphsLength : UINT32, _ glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ isSideways : boolean, _ bidiLevel : UINT32, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGlyphRun(pThis, point, fontFace, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, brush))
        }
    }
    public func DrawGlyphRun(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_DrawGlyphRun(point, RawPointer(fontFace), fontSize, glyphsLength, glyphs, isSideways, bidiLevel, RawPointer(brush));
    }
    // void DrawGlyphRun(Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], bool, System.UInt32, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode)
    public func _n_DrawGlyphRunWithMeasuringMode(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ glyphsLength : UINT32, _ glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ isSideways : boolean, _ bidiLevel : UINT32, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGlyphRunWithMeasuringMode(pThis, point, fontFace, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, brush, measuringMode))
        }
    }
    public func DrawGlyphRunWithMeasuringMode(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, measuringMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode) throws -> Void {
        try self._n_DrawGlyphRunWithMeasuringMode(point, RawPointer(fontFace), fontSize, glyphsLength, glyphs, isSideways, bidiLevel, RawPointer(brush), measuringMode);
    }
    // void DrawGlyphRun(Windows.Foundation.Numerics.Vector2, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], bool, System.UInt32, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, System.String, System.String, System.Int32[], System.UInt32)
    public func _n_DrawGlyphRunWithMeasuringModeAndDescription(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ glyphsLength : UINT32, _ glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ isSideways : boolean, _ bidiLevel : UINT32, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode, _ localeName : Optional<HSTRING>, _ textString : Optional<HSTRING>, _ clusterMapIndicesLength : UINT32, _ clusterMapIndices : Optional<UnsafeMutablePointer<INT32>>, _ textPosition : UINT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGlyphRunWithMeasuringModeAndDescription(pThis, point, fontFace, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, brush, measuringMode, localeName, textString, clusterMapIndicesLength, clusterMapIndices, textPosition))
        }
    }
    public func DrawGlyphRunWithMeasuringModeAndDescription(point : WinRT.Windows.Foundation.Numerics.Vector2, fontFace : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, brush : Optional<WinRT.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>, measuringMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, localeName : Swift.String, textString : Swift.String, clusterMapIndicesLength : UINT32, clusterMapIndices : Optional<UnsafeMutablePointer<INT32>>, textPosition : Swift.UInt32) throws -> Void {
        let __hstr_localeName = try HString(localeName);
        return try withExtendedLifetime(__hstr_localeName) {
        let __hstr_textString = try HString(textString);
        return try withExtendedLifetime(__hstr_textString) {
        try self._n_DrawGlyphRunWithMeasuringModeAndDescription(point, RawPointer(fontFace), fontSize, glyphsLength, glyphs, isSideways, bidiLevel, RawPointer(brush), measuringMode, __hstr_localeName.hRef.hString, __hstr_textString.hRef.hString, clusterMapIndicesLength, clusterMapIndices, textPosition);
        }
        }
    }
    // Microsoft.Graphics.Canvas.CanvasSpriteBatch CreateSpriteBatch()
    public func _n_CreateSpriteBatch(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatch(pThis, __presult))
        }
    }
    public func CreateSpriteBatch() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>> = nil;
        try self._n_CreateSpriteBatch(&__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasSpriteBatch CreateSpriteBatch(Microsoft.Graphics.Canvas.CanvasSpriteSortMode)
    public func _n_CreateSpriteBatchWithSortMode(_ sortMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortMode(pThis, sortMode, __presult))
        }
    }
    public func CreateSpriteBatchWithSortMode(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>> = nil;
        try self._n_CreateSpriteBatchWithSortMode(sortMode, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasSpriteBatch CreateSpriteBatch(Microsoft.Graphics.Canvas.CanvasSpriteSortMode, Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    public func _n_CreateSpriteBatchWithSortModeAndInterpolation(_ sortMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortModeAndInterpolation(pThis, sortMode, interpolation, __presult))
        }
    }
    public func CreateSpriteBatchWithSortModeAndInterpolation(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>> = nil;
        try self._n_CreateSpriteBatchWithSortModeAndInterpolation(sortMode, interpolation, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasSpriteBatch CreateSpriteBatch(Microsoft.Graphics.Canvas.CanvasSpriteSortMode, Microsoft.Graphics.Canvas.CanvasImageInterpolation, Microsoft.Graphics.Canvas.CanvasSpriteOptions)
    public func _n_CreateSpriteBatchWithSortModeAndInterpolationAndOptions(_ sortMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode, _ interpolation : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation, _ options : _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSpriteBatchWithSortModeAndInterpolationAndOptions(pThis, sortMode, interpolation, options, __presult))
        }
    }
    public func CreateSpriteBatchWithSortModeAndInterpolationAndOptions(sortMode : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode, interpolation : WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation, options : WinRT.Microsoft.Graphics.Canvas.CanvasSpriteOptions) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch>> = nil;
        try self._n_CreateSpriteBatchWithSortModeAndInterpolationAndOptions(sortMode, interpolation, options, &__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasSpriteBatch(consuming: __result);
    }
    public var Antialiasing : WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing {
        get throws {
            return try get_Antialiasing();
        }
    }
    public var Blend : WinRT.Microsoft.Graphics.Canvas.CanvasBlend {
        get throws {
            return try get_Blend();
        }
    }
    public var EffectBufferPrecision : Optional<WinRT.Windows.Foundation.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
            return try get_EffectBufferPrecision();
        }
    }
    public var EffectTileSize : WinRT.Windows.Graphics.Imaging.BitmapSize {
        get throws {
            return try get_EffectTileSize();
        }
    }
    public var TextAntialiasing : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
        get throws {
            return try get_TextAntialiasing();
        }
    }
    public var TextRenderingParameters : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters> {
        get throws {
            return try get_TextRenderingParameters();
        }
    }
    public var Transform : WinRT.Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
            return try get_Transform();
        }
    }
    public var Units : WinRT.Microsoft.Graphics.Canvas.CanvasUnits {
        get throws {
            return try get_Units();
        }
    }
} // ICanvasDrawingSession


// type: Microsoft.Graphics.Canvas.ICanvasImage
// interface type
open class ICanvasImage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x794966d3, Data2: 0x6a64, Data3 : 0x47e9, Data4 : (0x8d, 0xa8, 0xb4, 0x6a, 0xaa, 0x24, 0xd5, 0x3b)) }
// method not needed: GetBounds
// method not needed: GetBoundsWithTransform
} // ICanvasImage


// type: Microsoft.Graphics.Canvas.ICanvasResourceCreator
// interface type
open class ICanvasResourceCreator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8f6d8aa8, Data2: 0x492f, Data3 : 0x4bc6, Data4 : (0xb3, 0xd0, 0xe7, 0xf5, 0xea, 0xe8, 0x4b, 0x11)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    public func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return WinRT.Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    public var Device : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
} // ICanvasResourceCreator


// type: Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
// interface type
open class ICanvasResourceCreatorWithDpi
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1a75b512, Data2: 0xe9fa, Data3 : 0x49e6, Data4 : (0xa8, 0x76, 0x38, 0xca, 0xe1, 0x94, 0x01, 0x3e)) }
    // [IsSpecialName] System.Single get_Dpi()
    public func _n_get_Dpi(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dpi(pThis, __presult))
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Dpi(&__result);
        return __result;
    }
    // System.Single ConvertPixelsToDips(System.Int32)
    public func _n_ConvertPixelsToDips(_ pixels : INT32, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertPixelsToDips(pThis, pixels, __presult))
        }
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_ConvertPixelsToDips(pixels, &__result);
        return __result;
    }
    // System.Int32 ConvertDipsToPixels(System.Single, Microsoft.Graphics.Canvas.CanvasDpiRounding)
    public func _n_ConvertDipsToPixels(_ dips : FLOAT, _ dpiRounding : _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertDipsToPixels(pThis, dips, dpiRounding, __presult))
        }
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : WinRT.Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_ConvertDipsToPixels(dips, dpiRounding, &__result);
        return __result;
    }
    public var Dpi : Swift.Float {
        get throws {
            return try get_Dpi();
        }
    }
} // ICanvasResourceCreatorWithDpi


// type: Microsoft.Graphics.Canvas.ICanvasSpriteBatch
// interface type
open class ICanvasSpriteBatch
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa065dce4, Data2: 0xa7f2, Data3 : 0x4df4, Data4 : (0x84, 0x05, 0xea, 0x9e, 0x3a, 0x21, 0x5b, 0xf8)) }
// method not needed: DrawToRect
// method not needed: DrawAtOffset
// method not needed: DrawWithTransform
// method not needed: DrawToRectWithTint
// method not needed: DrawAtOffsetWithTint
// method not needed: DrawWithTransformAndTint
// method not needed: DrawToRectWithTintAndFlip
// method not needed: DrawWithTransformAndTintAndFlip
// method not needed: DrawAtOffsetWithTintAndTransform
// method not needed: DrawFromSpriteSheetToRect
// method not needed: DrawFromSpriteSheetAtOffset
// method not needed: DrawFromSpriteSheetWithTransform
// method not needed: DrawFromSpriteSheetToRectWithTint
// method not needed: DrawFromSpriteSheetAtOffsetWithTint
// method not needed: DrawFromSpriteSheetWithTransformAndTint
// method not needed: DrawFromSpriteSheetToRectWithTintAndFlip
// method not needed: DrawFromSpriteSheetWithTransformAndTintAndFlip
// method not needed: DrawFromSpriteSheetAtOffsetWithTintAndTransform
} // ICanvasSpriteBatch


}
extension WinRT.Microsoft.Graphics.Canvas.CanvasAntialiasing {
    public static var Antialiased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Aliased;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasBlend {
    public static var SourceOver : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver;
        }
    }
    public static var Copy : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Copy;
        }
    }
    public static var Min : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Min;
        }
    }
    public static var Add : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Add;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasBufferPrecision {
    public static var Precision8UIntNormalized : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized;
        }
    }
    public static var Precision8UIntNormalizedSrgb : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalizedSrgb;
        }
    }
    public static var Precision16UIntNormalized : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16UIntNormalized;
        }
    }
    public static var Precision16Float : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16Float;
        }
    }
    public static var Precision32Float : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision32Float;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasComposite {
    public static var SourceOver : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver;
        }
    }
    public static var DestinationOver : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOver;
        }
    }
    public static var SourceIn : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceIn;
        }
    }
    public static var DestinationIn : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationIn;
        }
    }
    public static var SourceOut : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOut;
        }
    }
    public static var DestinationOut : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOut;
        }
    }
    public static var SourceAtop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceAtop;
        }
    }
    public static var DestinationAtop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationAtop;
        }
    }
    public static var Xor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Xor;
        }
    }
    public static var Add : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Add;
        }
    }
    public static var Copy : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Copy;
        }
    }
    public static var BoundedCopy : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_BoundedCopy;
        }
    }
    public static var MaskInvert : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_MaskInvert;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasDpiRounding {
    public static var Floor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Floor;
        }
    }
    public static var Round : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Round;
        }
    }
    public static var Ceiling : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Ceiling;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasImageInterpolation {
    public static var NearestNeighbor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        }
    }
    public static var Linear : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Linear;
        }
    }
    public static var Cubic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Cubic;
        }
    }
    public static var MultiSampleLinear : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_MultiSampleLinear;
        }
    }
    public static var Anisotropic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Anisotropic;
        }
    }
    public static var HighQualityCubic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_HighQualityCubic;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasLayerOptions {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_None;
        }
    }
    public static var InitializeFromBackground : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_InitializeFromBackground;
        }
    }
    public static var IgnoreAlpha : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_IgnoreAlpha;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasSpriteOptions {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_None;
        }
    }
    public static var ClampToSourceRect : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_ClampToSourceRect;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasSpriteSortMode {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_None;
        }
    }
    public static var Bitmap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_Bitmap;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.CanvasUnits {
    public static var Dips : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips;
        }
    }
    public static var Pixels : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Pixels;
        }
    }
}
