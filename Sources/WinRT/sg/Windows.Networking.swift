// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.Networking {
// type: Windows.Networking.EndpointPair
// runtime class
public class EndpointPair
{
    // activatable interface not needed: Windows.Networking.IEndpointPairFactory
}

// type: Windows.Networking.HostName
// runtime class
public class HostName
{
    // activatable interface not needed: Windows.Networking.IHostNameFactory
    // static interface not needed: Windows.Networking.IHostNameStatics
}

// type: Windows.Networking.HostNameSortOptions
// enum type
public typealias HostNameSortOptions = _q_CWindows_CNetworking_CHostNameSortOptions;

// type: Windows.Networking.IEndpointPair
// interface type
public class IEndpointPair
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33a0aa36, Data2: 0xf8fa, Data3 : 0x4b30, Data4 : (0xb8, 0x56, 0x76, 0x51, 0x7c, 0x3b, 0xd0, 0x6d)) }
// method not needed: get_LocalHostName
// method not needed: put_LocalHostName
// method not needed: get_LocalServiceName
// method not needed: put_LocalServiceName
// method not needed: get_RemoteHostName
// method not needed: put_RemoteHostName
// method not needed: get_RemoteServiceName
// method not needed: put_RemoteServiceName
} // IEndpointPair


// type: Windows.Networking.IHostName
// interface type
public class IHostName
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbf8ecaad, Data2: 0xed96, Data3 : 0x49a7, Data4 : (0x90, 0x84, 0xd4, 0x16, 0xca, 0xe8, 0x8d, 0xcb)) }
// method not needed: get_IPInformation
// method not needed: get_RawName
// method not needed: get_DisplayName
// method not needed: get_CanonicalName
// method not needed: get_Type
// method not needed: IsEqual
} // IHostName


}
extension WinRT.Windows.Networking.HostNameSortOptions {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameSortOptions_None;
        }
    }
    public static var OptimizeForLongConnections : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameSortOptions_OptimizeForLongConnections;
        }
    }
}
