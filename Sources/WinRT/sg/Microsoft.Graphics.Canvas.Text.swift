// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.Graphics.Canvas.Text {
// type: Microsoft.Graphics.Canvas.Text.CanvasFontFace
// runtime class
public class CanvasFontFace
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.Text.ICanvasFontFace { return _self; }
    // method not needed: GetRecommendedRenderingMode
    // method not needed: GetRecommendedRenderingMode
    // method not needed: GetRecommendedGridFit
    // method not needed: get_GlyphBox
    // method not needed: get_SubscriptPosition
    // method not needed: get_SubscriptSize
    // method not needed: get_SuperscriptPosition
    // method not needed: get_SuperscriptSize
    // method not needed: get_HasTypographicMetrics
    // method not needed: get_Ascent
    // method not needed: get_Descent
    // method not needed: get_LineGap
    // method not needed: get_CapHeight
    // method not needed: get_LowercaseLetterHeight
    // method not needed: get_UnderlinePosition
    // method not needed: get_UnderlineThickness
    // method not needed: get_StrikethroughPosition
    // method not needed: get_StrikethroughThickness
    // method not needed: get_CaretSlopeRise
    // method not needed: get_CaretSlopeRun
    // method not needed: get_CaretOffset
    // method not needed: get_UnicodeRanges
    // method not needed: get_IsMonospaced
    // method not needed: GetVerticalGlyphVariants
    // method not needed: get_HasVerticalGlyphVariants
    // method not needed: get_FileFormatType
    // method not needed: get_Simulations
    // method not needed: get_IsSymbolFont
    // method not needed: get_GlyphCount
    // method not needed: GetGlyphIndices
    // method not needed: GetGlyphMetrics
    // method not needed: GetGdiCompatibleGlyphMetrics
    // method not needed: get_Weight
    // method not needed: get_Stretch
    // method not needed: get_Style
    // method not needed: get_FamilyNames
    // method not needed: get_FaceNames
    // method not needed: GetInformationalStrings
    // method not needed: HasCharacter
    // method not needed: GetGlyphRunBounds
    // method not needed: GetGlyphRunBounds
    // method not needed: get_Panose
    // method not needed: GetSupportedTypographicFeatureNames
    // method not needed: GetSupportedTypographicFeatureNames
    // method not needed: GetTypographicFeatureGlyphSupport
    // method not needed: GetTypographicFeatureGlyphSupport
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyph
// struct type
public typealias CanvasGlyph = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing
// enum type
public typealias CanvasTextAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextFormat
// runtime class
public class CanvasTextFormat
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics
    // method not needed: get_Direction
    // method not needed: put_Direction
    // method not needed: get_FontFamily
    // method not needed: put_FontFamily
    // method not needed: get_FontSize
    // method not needed: put_FontSize
    // method not needed: get_FontStretch
    // method not needed: put_FontStretch
    // method not needed: get_FontStyle
    // method not needed: put_FontStyle
    // method not needed: get_FontWeight
    // method not needed: put_FontWeight
    // method not needed: get_IncrementalTabStop
    // method not needed: put_IncrementalTabStop
    // method not needed: get_LineSpacing
    // method not needed: put_LineSpacing
    // method not needed: get_LineSpacingBaseline
    // method not needed: put_LineSpacingBaseline
    // method not needed: get_LocaleName
    // method not needed: put_LocaleName
    // method not needed: get_VerticalAlignment
    // method not needed: put_VerticalAlignment
    // method not needed: get_HorizontalAlignment
    // method not needed: put_HorizontalAlignment
    // method not needed: get_TrimmingGranularity
    // method not needed: put_TrimmingGranularity
    // method not needed: get_TrimmingDelimiter
    // method not needed: put_TrimmingDelimiter
    // method not needed: get_TrimmingDelimiterCount
    // method not needed: put_TrimmingDelimiterCount
    // method not needed: get_WordWrapping
    // method not needed: put_WordWrapping
    // method not needed: get_Options
    // method not needed: put_Options
    // method not needed: get_VerticalGlyphOrientation
    // method not needed: put_VerticalGlyphOrientation
    // method not needed: get_OpticalAlignment
    // method not needed: put_OpticalAlignment
    // method not needed: get_LastLineWrapping
    // method not needed: put_LastLineWrapping
    // method not needed: get_LineSpacingMode
    // method not needed: put_LineSpacingMode
    // method not needed: get_TrimmingSign
    // method not needed: put_TrimmingSign
    // method not needed: get_CustomTrimmingSign
    // method not needed: put_CustomTrimmingSign
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextGridFit
// enum type
public typealias CanvasTextGridFit = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextLayout
// runtime class
public class CanvasTextLayout
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout { return _self; }
    public init(resourceCreator : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Swift.String, textFormat : Optional<WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws {
        let _af : ICanvasTextLayoutFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextLayout");
        _self = try _af.Create(resourceCreator: resourceCreator, textString: textString, textFormat: textFormat!.Interface(), requestedWidth: requestedWidth, requestedHeight: requestedHeight)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics
    // method not needed: GetFormatChangeIndices
    // method not needed: get_Direction
    // method not needed: put_Direction
    // method not needed: get_DefaultFontFamily
    // method not needed: get_DefaultFontSize
    // method not needed: get_DefaultFontStretch
    // method not needed: get_DefaultFontStyle
    // method not needed: get_DefaultFontWeight
    // method not needed: get_IncrementalTabStop
    // method not needed: put_IncrementalTabStop
    // method not needed: get_LineSpacing
    // method not needed: put_LineSpacing
    // method not needed: get_LineSpacingBaseline
    // method not needed: put_LineSpacingBaseline
    // method not needed: get_DefaultLocaleName
    // method not needed: get_VerticalAlignment
    // method not needed: put_VerticalAlignment
    // method not needed: get_HorizontalAlignment
    // method not needed: put_HorizontalAlignment
    // method not needed: get_TrimmingGranularity
    // method not needed: put_TrimmingGranularity
    // method not needed: get_TrimmingDelimiter
    // method not needed: put_TrimmingDelimiter
    // method not needed: get_TrimmingDelimiterCount
    // method not needed: put_TrimmingDelimiterCount
    // method not needed: get_WordWrapping
    // method not needed: put_WordWrapping
    // method not needed: get_Options
    // method not needed: put_Options
    // method not needed: get_LineSpacingMode
    // method not needed: put_LineSpacingMode
    // method not needed: get_TrimmingSign
    // method not needed: put_TrimmingSign
    // method not needed: get_CustomTrimmingSign
    // method not needed: put_CustomTrimmingSign
    // method not needed: get_RequestedSize
    // method not needed: put_RequestedSize
    // method not needed: GetMinimumLineLength
    // method not needed: GetBrush
    // method not needed: GetCustomBrush
    // method not needed: GetFontFamily
    // method not needed: GetFontSize
    // method not needed: GetFontStretch
    // method not needed: GetFontStyle
    // method not needed: GetFontWeight
    // method not needed: GetLocaleName
    // method not needed: GetStrikethrough
    // method not needed: GetUnderline
    // method not needed: GetInlineObject
    // method not needed: SetColor
    // method not needed: SetBrush
    // method not needed: SetCustomBrush
    // method not needed: SetFontFamily
    // method not needed: SetFontSize
    // method not needed: SetFontStretch
    // method not needed: SetFontStyle
    // method not needed: SetFontWeight
    // method not needed: SetLocaleName
    // method not needed: SetStrikethrough
    // method not needed: SetUnderline
    // method not needed: SetInlineObject
    // method not needed: DrawToTextRenderer
    // method not needed: DrawToTextRenderer
    // method not needed: get_LineMetrics
    // method not needed: get_ClusterMetrics
    // method not needed: SetTypography
    // method not needed: GetTypography
    // method not needed: get_LayoutBounds
    // method not needed: get_LayoutBoundsIncludingTrailingWhitespace
    // method not needed: get_LineCount
    // method not needed: get_MaximumBidiReorderingDepth
    // method not needed: get_DrawBounds
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: GetCaretPosition
    // method not needed: GetCaretPosition
    // method not needed: GetCharacterRegions
    // method not needed: GetPairKerning
    // method not needed: SetPairKerning
    // method not needed: GetLeadingCharacterSpacing
    // method not needed: GetTrailingCharacterSpacing
    // method not needed: GetMinimumCharacterAdvance
    // method not needed: SetCharacterSpacing
    // method not needed: get_VerticalGlyphOrientation
    // method not needed: put_VerticalGlyphOrientation
    // method not needed: get_OpticalAlignment
    // method not needed: put_OpticalAlignment
    // method not needed: get_LastLineWrapping
    // method not needed: put_LastLineWrapping
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : WinRT.Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode
// enum type
public typealias CanvasTextMeasuringMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode
// enum type
public typealias CanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
// runtime class
public class CanvasTextRenderingParameters
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters;
    internal init(plok: WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters { return _self; }
    public init(textRenderingMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws {
        let _af : ICanvasTextRenderingParametersFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters");
        _self = try _af.Create(textRenderingMode: textRenderingMode, gridFit: gridFit)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_RenderingMode
    // method not needed: get_GridFit
}

// type: Microsoft.Graphics.Canvas.Text.ICanvasFontFace
// interface type
open class ICanvasFontFace
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5199d129, Data2: 0x4ef9, Data3 : 0x4dee, Data4 : (0xb7, 0x4c, 0x4d, 0xc9, 0x10, 0x20, 0x1a, 0x7f)) }
// method not needed: GetRecommendedRenderingMode
// method not needed: GetRecommendedRenderingModeWithAllOptions
// method not needed: GetRecommendedGridFit
// method not needed: get_GlyphBox
// method not needed: get_SubscriptPosition
// method not needed: get_SubscriptSize
// method not needed: get_SuperscriptPosition
// method not needed: get_SuperscriptSize
// method not needed: get_HasTypographicMetrics
// method not needed: get_Ascent
// method not needed: get_Descent
// method not needed: get_LineGap
// method not needed: get_CapHeight
// method not needed: get_LowercaseLetterHeight
// method not needed: get_UnderlinePosition
// method not needed: get_UnderlineThickness
// method not needed: get_StrikethroughPosition
// method not needed: get_StrikethroughThickness
// method not needed: get_CaretSlopeRise
// method not needed: get_CaretSlopeRun
// method not needed: get_CaretOffset
// method not needed: get_UnicodeRanges
// method not needed: get_IsMonospaced
// method not needed: GetVerticalGlyphVariants
// method not needed: get_HasVerticalGlyphVariants
// method not needed: get_FileFormatType
// method not needed: get_Simulations
// method not needed: get_IsSymbolFont
// method not needed: get_GlyphCount
// method not needed: GetGlyphIndices
// method not needed: GetGlyphMetrics
// method not needed: GetGdiCompatibleGlyphMetrics
// method not needed: get_Weight
// method not needed: get_Stretch
// method not needed: get_Style
// method not needed: get_FamilyNames
// method not needed: get_FaceNames
// method not needed: GetInformationalStrings
// method not needed: HasCharacter
// method not needed: GetGlyphRunBounds
// method not needed: GetGlyphRunBoundsWithMeasuringMode
// method not needed: get_Panose
// method not needed: GetSupportedTypographicFeatureNames
// method not needed: GetSupportedTypographicFeatureNamesWithLocale
// method not needed: GetTypographicFeatureGlyphSupport
// method not needed: GetTypographicFeatureGlyphSupportWithLocale
} // ICanvasFontFace


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextFormat
// interface type
open class ICanvasTextFormat
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaf61bfdc, Data2: 0xeabb, Data3 : 0x4d38, Data4 : (0xba, 0x1b, 0xaf, 0xb3, 0x40, 0x61, 0x2d, 0x33)) }
// method not needed: get_Direction
// method not needed: put_Direction
// method not needed: get_FontFamily
// method not needed: put_FontFamily
// method not needed: get_FontSize
// method not needed: put_FontSize
// method not needed: get_FontStretch
// method not needed: put_FontStretch
// method not needed: get_FontStyle
// method not needed: put_FontStyle
// method not needed: get_FontWeight
// method not needed: put_FontWeight
// method not needed: get_IncrementalTabStop
// method not needed: put_IncrementalTabStop
// method not needed: get_LineSpacing
// method not needed: put_LineSpacing
// method not needed: get_LineSpacingBaseline
// method not needed: put_LineSpacingBaseline
// method not needed: get_LocaleName
// method not needed: put_LocaleName
// method not needed: get_VerticalAlignment
// method not needed: put_VerticalAlignment
// method not needed: get_HorizontalAlignment
// method not needed: put_HorizontalAlignment
// method not needed: get_TrimmingGranularity
// method not needed: put_TrimmingGranularity
// method not needed: get_TrimmingDelimiter
// method not needed: put_TrimmingDelimiter
// method not needed: get_TrimmingDelimiterCount
// method not needed: put_TrimmingDelimiterCount
// method not needed: get_WordWrapping
// method not needed: put_WordWrapping
// method not needed: get_Options
// method not needed: put_Options
// method not needed: get_VerticalGlyphOrientation
// method not needed: put_VerticalGlyphOrientation
// method not needed: get_OpticalAlignment
// method not needed: put_OpticalAlignment
// method not needed: get_LastLineWrapping
// method not needed: put_LastLineWrapping
// method not needed: get_LineSpacingMode
// method not needed: put_LineSpacingMode
// method not needed: get_TrimmingSign
// method not needed: put_TrimmingSign
// method not needed: get_CustomTrimmingSign
// method not needed: put_CustomTrimmingSign
} // ICanvasTextFormat


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayout
// interface type
open class ICanvasTextLayout
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbae63e54, Data2: 0x48ae, Data3 : 0x4446, Data4 : (0xa2, 0xc7, 0xb6, 0xef, 0x93, 0x80, 0x6c, 0x20)) }
// method not needed: GetFormatChangeIndices
// method not needed: get_Direction
// method not needed: put_Direction
// method not needed: get_DefaultFontFamily
// method not needed: get_DefaultFontSize
// method not needed: get_DefaultFontStretch
// method not needed: get_DefaultFontStyle
// method not needed: get_DefaultFontWeight
// method not needed: get_IncrementalTabStop
// method not needed: put_IncrementalTabStop
// method not needed: get_LineSpacing
// method not needed: put_LineSpacing
// method not needed: get_LineSpacingBaseline
// method not needed: put_LineSpacingBaseline
// method not needed: get_DefaultLocaleName
// method not needed: get_VerticalAlignment
// method not needed: put_VerticalAlignment
// method not needed: get_HorizontalAlignment
// method not needed: put_HorizontalAlignment
// method not needed: get_TrimmingGranularity
// method not needed: put_TrimmingGranularity
// method not needed: get_TrimmingDelimiter
// method not needed: put_TrimmingDelimiter
// method not needed: get_TrimmingDelimiterCount
// method not needed: put_TrimmingDelimiterCount
// method not needed: get_WordWrapping
// method not needed: put_WordWrapping
// method not needed: get_Options
// method not needed: put_Options
// method not needed: get_LineSpacingMode
// method not needed: put_LineSpacingMode
// method not needed: get_TrimmingSign
// method not needed: put_TrimmingSign
// method not needed: get_CustomTrimmingSign
// method not needed: put_CustomTrimmingSign
// method not needed: get_RequestedSize
// method not needed: put_RequestedSize
// method not needed: GetMinimumLineLength
// method not needed: GetBrush
// method not needed: GetCustomBrush
// method not needed: GetFontFamily
// method not needed: GetFontSize
// method not needed: GetFontStretch
// method not needed: GetFontStyle
// method not needed: GetFontWeight
// method not needed: GetLocaleName
// method not needed: GetStrikethrough
// method not needed: GetUnderline
// method not needed: GetInlineObject
// method not needed: SetColor
// method not needed: SetBrush
// method not needed: SetCustomBrush
// method not needed: SetFontFamily
// method not needed: SetFontSize
// method not needed: SetFontStretch
// method not needed: SetFontStyle
// method not needed: SetFontWeight
// method not needed: SetLocaleName
// method not needed: SetStrikethrough
// method not needed: SetUnderline
// method not needed: SetInlineObject
// method not needed: DrawToTextRenderer
// method not needed: DrawToTextRendererWithCoords
// method not needed: get_LineMetrics
// method not needed: get_ClusterMetrics
// method not needed: SetTypography
// method not needed: GetTypography
// method not needed: get_LayoutBounds
// method not needed: get_LayoutBoundsIncludingTrailingWhitespace
// method not needed: get_LineCount
// method not needed: get_MaximumBidiReorderingDepth
// method not needed: get_DrawBounds
// method not needed: HitTest
// method not needed: HitTestWithCoords
// method not needed: HitTestWithDescription
// method not needed: HitTestWithDescriptionAndCoords
// method not needed: HitTestWithDescriptionAndTrailingSide
// method not needed: HitTestWithDescriptionAndCoordsAndTrailingSide
// method not needed: GetCaretPosition
// method not needed: GetCaretPositionWithDescription
// method not needed: GetCharacterRegions
// method not needed: GetPairKerning
// method not needed: SetPairKerning
// method not needed: GetLeadingCharacterSpacing
// method not needed: GetTrailingCharacterSpacing
// method not needed: GetMinimumCharacterAdvance
// method not needed: SetCharacterSpacing
// method not needed: get_VerticalGlyphOrientation
// method not needed: put_VerticalGlyphOrientation
// method not needed: get_OpticalAlignment
// method not needed: put_OpticalAlignment
// method not needed: get_LastLineWrapping
// method not needed: put_LastLineWrapping
// method not needed: get_Device
} // ICanvasTextLayout


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextLayoutFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9c1f7179, Data2: 0xacd0, Data3 : 0x4680, Data4 : (0x93, 0xd5, 0x95, 0xa6, 0x24, 0x7e, 0x8f, 0x6b)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextLayout Create(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.String, Microsoft.Graphics.Canvas.Text.CanvasTextFormat, System.Single, System.Single)
    public func _n_Create(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ textString : Optional<HSTRING>, _ textFormat : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>, _ requestedWidth : FLOAT, _ requestedHeight : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceCreator, textString, textFormat, requestedWidth, requestedHeight, __presult))
        }
    }
    public func Create(resourceCreator : Optional<WinRT.Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Swift.String, textFormat : Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout> {
        let __hstr_textString = try HString(textString);
        return try withExtendedLifetime(__hstr_textString) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>> = nil;
        try self._n_Create(RawPointer(resourceCreator), __hstr_textString.hRef.hString, RawPointer(textFormat), requestedWidth, requestedHeight, &__result);
        return WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout(consuming: __result);
        }
    }
} // ICanvasTextLayoutFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
// interface type
open class ICanvasTextRenderingParameters
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb20bf738, Data2: 0xedb9, Data3 : 0x4eec, Data4 : (0xa1, 0x2f, 0xb6, 0xae, 0x32, 0xe8, 0xac, 0xe6)) }
// method not needed: get_RenderingMode
// method not needed: get_GridFit
} // ICanvasTextRenderingParameters


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextRenderingParametersFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd240ac25, Data2: 0x4d23, Data3 : 0x4964, Data4 : (0x9d, 0x9a, 0xdb, 0x2f, 0xc8, 0xaf, 0x18, 0x5d)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters Create(Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, Microsoft.Graphics.Canvas.Text.CanvasTextGridFit)
    public func _n_Create(_ textRenderingMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode, _ gridFit : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, textRenderingMode, gridFit, __presult))
        }
    }
    public func Create(textRenderingMode : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws -> Optional<WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>> = nil;
        try self._n_Create(textRenderingMode, gridFit, &__result);
        return WinRT.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters(consuming: __result);
    }
} // ICanvasTextRenderingParametersFactory


}
extension WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto;
        }
    }
    public static var ClearType : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType;
        }
    }
    public static var Grayscale : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default;
        }
    }
    public static var Disable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable;
        }
    }
    public static var Enable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode {
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural;
        }
    }
}
extension WinRT.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural;
        }
    }
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural;
        }
    }
    public static var NaturalSymmetric : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric;
        }
    }
    public static var Outline : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline;
        }
    }
    public static var NaturalSymmetricDownsampled : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled;
        }
    }
}
