// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.UI.Xaml.Documents {
// type: Microsoft.UI.Xaml.Documents.IInline
// interface type
open class IInline
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x813d427a, Data2: 0x8980, Data3 : 0x5a79, Data4 : (0xa8, 0xfa, 0xf2, 0x79, 0x19, 0xcf, 0xb2, 0x4f)) }
} // IInline


// type: Microsoft.UI.Xaml.Documents.IInlineFactory
// interface type
// COMPOSITION INTERFACE
open class IInlineFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfd253a36, Data2: 0xfa2b, Data3 : 0x5b30, Data4 : (0x89, 0xa8, 0x9f, 0x57, 0x78, 0x71, 0xec, 0x07)) }
    // Microsoft.UI.Xaml.Documents.Inline CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.IInline> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.Documents.IInline(consuming: __result);
    }
} // IInlineFactory


// type: Microsoft.UI.Xaml.Documents.ITextElement
// interface type
open class ITextElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa122ba22, Data2: 0x833f, Data3 : 0x5220, Data4 : (0xa4, 0x7e, 0x6c, 0xd5, 0x07, 0x53, 0x1a, 0xbe)) }
// method not needed: get_Name
// method not needed: get_FontSize
// method not needed: put_FontSize
// method not needed: get_FontFamily
// method not needed: put_FontFamily
// method not needed: get_FontWeight
// method not needed: put_FontWeight
// method not needed: get_FontStyle
// method not needed: put_FontStyle
// method not needed: get_FontStretch
// method not needed: put_FontStretch
// method not needed: get_CharacterSpacing
// method not needed: put_CharacterSpacing
// method not needed: get_Foreground
// method not needed: put_Foreground
// method not needed: get_Language
// method not needed: put_Language
// method not needed: get_IsTextScaleFactorEnabled
// method not needed: put_IsTextScaleFactorEnabled
// method not needed: get_TextDecorations
// method not needed: put_TextDecorations
// method not needed: get_ContentStart
// method not needed: get_ContentEnd
// method not needed: get_ElementStart
// method not needed: get_ElementEnd
// method not needed: get_AllowFocusOnInteraction
// method not needed: put_AllowFocusOnInteraction
// method not needed: get_AccessKey
// method not needed: put_AccessKey
// method not needed: get_ExitDisplayModeOnAccessKeyInvoked
// method not needed: put_ExitDisplayModeOnAccessKeyInvoked
// method not needed: get_IsAccessKeyScope
// method not needed: put_IsAccessKeyScope
// method not needed: get_AccessKeyScopeOwner
// method not needed: put_AccessKeyScopeOwner
// method not needed: get_KeyTipPlacementMode
// method not needed: put_KeyTipPlacementMode
// method not needed: get_KeyTipHorizontalOffset
// method not needed: put_KeyTipHorizontalOffset
// method not needed: get_KeyTipVerticalOffset
// method not needed: put_KeyTipVerticalOffset
// method not needed: get_XamlRoot
// method not needed: put_XamlRoot
// method not needed: add_AccessKeyDisplayRequested
// method not needed: remove_AccessKeyDisplayRequested
// method not needed: add_AccessKeyDisplayDismissed
// method not needed: remove_AccessKeyDisplayDismissed
// method not needed: add_AccessKeyInvoked
// method not needed: remove_AccessKeyInvoked
// method not needed: FindName
} // ITextElement


// type: Microsoft.UI.Xaml.Documents.ITextHighlighter
// interface type
open class ITextHighlighter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb756e861, Data2: 0x1d2b, Data3 : 0x5f6f, Data4 : (0x81, 0xfd, 0xc5, 0x1a, 0x5b, 0xc0, 0x68, 0xff)) }
// method not needed: get_Ranges
// method not needed: get_Foreground
// method not needed: put_Foreground
// method not needed: get_Background
// method not needed: put_Background
} // ITextHighlighter


// type: Microsoft.UI.Xaml.Documents.ITextHighlighterFactory
// interface type
// COMPOSITION INTERFACE
open class ITextHighlighterFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69c7311f, Data2: 0xc019, Data3 : 0x5b93, Data4 : (0xb5, 0x11, 0x81, 0x41, 0x85, 0x43, 0xba, 0xb7)) }
    // Microsoft.UI.Xaml.Documents.TextHighlighter CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextHighlighter> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.Documents.ITextHighlighter(consuming: __result);
    }
} // ITextHighlighterFactory


// type: Microsoft.UI.Xaml.Documents.ITextPointer
// interface type
open class ITextPointer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x842eb385, Data2: 0xee41, Data3 : 0x5930, Data4 : (0x97, 0x9b, 0x43, 0x8f, 0xa7, 0x52, 0x5a, 0x51)) }
// method not needed: get_Parent
// method not needed: get_VisualParent
// method not needed: get_LogicalDirection
// method not needed: get_Offset
// method not needed: GetCharacterRect
// method not needed: GetPositionAtOffset
} // ITextPointer


// type: Microsoft.UI.Xaml.Documents.Inline
// runtime class
open class Inline
    :
    Microsoft.UI.Xaml.Documents.TextElement
{
    private var _self : WinRT.Microsoft.UI.Xaml.Documents.IInline;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Documents.IInline?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Documents.IInline { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Documents.IInlineFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IInlineFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.Inline"));
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Documents.InlineCollection
// runtime class
public class InlineCollection
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline;
    internal init(plok: WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline { return _self; }
    // method not needed: GetAt
    // method not needed: get_Size
    // method not needed: GetView
    // method not needed: IndexOf
    // method not needed: SetAt
    // method not needed: InsertAt
    // method not needed: RemoveAt
    public func Append(value : Optional<WinRT.Microsoft.UI.Xaml.Documents.Inline>) throws -> Void {
        let _ifc : WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    // method not needed: RemoveAtEnd
    // method not needed: Clear
    // method not needed: GetMany
    // method not needed: ReplaceAll
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.Documents.Inline, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.Documents.TextElement
// runtime class
open class TextElement
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : WinRT.Microsoft.UI.Xaml.Documents.ITextElement;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Documents.ITextElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Documents.ITextElement { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Documents.ITextElementFactory
// composable interface not needed: Microsoft.UI.Xaml.Documents.ITextElementFactory
    // static interface not needed: Microsoft.UI.Xaml.Documents.ITextElementStatics
    // method not needed: get_Name
    // method not needed: get_FontSize
    // method not needed: put_FontSize
    // method not needed: get_FontFamily
    // method not needed: put_FontFamily
    // method not needed: get_FontWeight
    // method not needed: put_FontWeight
    // method not needed: get_FontStyle
    // method not needed: put_FontStyle
    // method not needed: get_FontStretch
    // method not needed: put_FontStretch
    // method not needed: get_CharacterSpacing
    // method not needed: put_CharacterSpacing
    // method not needed: get_Foreground
    // method not needed: put_Foreground
    // method not needed: get_Language
    // method not needed: put_Language
    // method not needed: get_IsTextScaleFactorEnabled
    // method not needed: put_IsTextScaleFactorEnabled
    // method not needed: get_TextDecorations
    // method not needed: put_TextDecorations
    // method not needed: get_ContentStart
    // method not needed: get_ContentEnd
    // method not needed: get_ElementStart
    // method not needed: get_ElementEnd
    // method not needed: get_AllowFocusOnInteraction
    // method not needed: put_AllowFocusOnInteraction
    // method not needed: get_AccessKey
    // method not needed: put_AccessKey
    // method not needed: get_ExitDisplayModeOnAccessKeyInvoked
    // method not needed: put_ExitDisplayModeOnAccessKeyInvoked
    // method not needed: get_IsAccessKeyScope
    // method not needed: put_IsAccessKeyScope
    // method not needed: get_AccessKeyScopeOwner
    // method not needed: put_AccessKeyScopeOwner
    // method not needed: get_KeyTipPlacementMode
    // method not needed: put_KeyTipPlacementMode
    // method not needed: get_KeyTipHorizontalOffset
    // method not needed: put_KeyTipHorizontalOffset
    // method not needed: get_KeyTipVerticalOffset
    // method not needed: put_KeyTipVerticalOffset
    // method not needed: get_XamlRoot
    // method not needed: put_XamlRoot
    // method not needed: add_AccessKeyDisplayRequested
    // method not needed: remove_AccessKeyDisplayRequested
    // method not needed: add_AccessKeyDisplayDismissed
    // method not needed: remove_AccessKeyDisplayDismissed
    // method not needed: add_AccessKeyInvoked
    // method not needed: remove_AccessKeyInvoked
    // method not needed: FindName
    // instance interface not needed: Microsoft.UI.Xaml.Documents.ITextElementOverrides
}

// type: Microsoft.UI.Xaml.Documents.TextHighlighter
// runtime class
open class TextHighlighter
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.UI.Xaml.Documents.ITextHighlighter;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Documents.ITextHighlighter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Documents.ITextHighlighter { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Documents.ITextHighlighterFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ITextHighlighterFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Documents.TextHighlighter"));
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Documents.ITextHighlighterStatics
    // method not needed: get_Ranges
    // method not needed: get_Foreground
    // method not needed: put_Foreground
    // method not needed: get_Background
    // method not needed: put_Background
}

// type: Microsoft.UI.Xaml.Documents.TextPointer
// runtime class
public class TextPointer
    :
    WinRT.Object
{
    private var _self : WinRT.Microsoft.UI.Xaml.Documents.ITextPointer;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Documents.ITextPointer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Documents.ITextPointer { return _self; }
    // method not needed: get_Parent
    // method not needed: get_VisualParent
    // method not needed: get_LogicalDirection
    // method not needed: get_Offset
    // method not needed: GetCharacterRect
    // method not needed: GetPositionAtOffset
}

}
