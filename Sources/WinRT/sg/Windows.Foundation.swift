// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.Foundation {
// type: Windows.Foundation.AsyncActionCompletedHandler
// delegate type
open class IAsyncActionCompletedHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4ed5c81, Data2: 0x76c9, Data3 : 0x40bd, Data4 : (0x8b, 0xe6, 0xb1, 0xd9, 0x0f, 0xb2, 0x0a, 0xe7)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncAction, Windows.Foundation.AsyncStatus)
    public func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<__q_CWindows_CFoundation_CIAsyncAction>>, _ asyncStatus : __q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: __q_CWindows_CFoundation_CIAsyncActionCompletedHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<WinRT.Windows.Foundation.IAsyncAction>, asyncStatus : __q_CWindows_CFoundation_CAsyncStatus) throws {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
}

// type: Windows.Foundation.AsyncStatus
// enum type
public typealias AsyncStatus = __q_CWindows_CFoundation_CAsyncStatus;

// type: Windows.Foundation.IAsyncAction
// interface type
public class IAsyncAction
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5a648006, Data2: 0x843a, Data3 : 0x4da9, Data4 : (0x86, 0x5b, 0x9d, 0x26, 0xe5, 0xdf, 0xad, 0x7b)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncActionCompletedHandler)
    public func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<__q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>) throws {
        return try perform(as: __q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<WinRT.Windows.Foundation.IAsyncActionCompletedHandler>) throws {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncActionCompletedHandler get_Completed()
    public func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<__q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>>?) throws {
        return try perform(as: __q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<WinRT.Windows.Foundation.IAsyncActionCompletedHandler> {
        var __result : Optional<UnsafeMutablePointer<__q_CWindows_CFoundation_CIAsyncActionCompletedHandler>> = nil;
        try self._n_get_Completed(&__result);
        return WinRT.Windows.Foundation.IAsyncActionCompletedHandler(consuming: __result);
    }
    // void GetResults()
    public func _n_GetResults() throws {
        return try perform(as: __q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
        }
    }
    public func GetResults() throws {
        try self._n_GetResults();
    }
    public var Completed : Optional<WinRT.Windows.Foundation.IAsyncActionCompletedHandler> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncAction


// type: Windows.Foundation.IAsyncInfo
// interface type
public class IAsyncInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x00000036, Data2: 0x0000, Data3 : 0x0000, Data4 : (0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46)) }
// method not needed: get_Id
    // [IsSpecialName] Windows.Foundation.AsyncStatus get_Status()
    public func _n_get_Status(_ __presult: UnsafeMutablePointer<__q_CWindows_CFoundation_CAsyncStatus>?) throws {
        return try perform(as: __q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> __q_CWindows_CFoundation_CAsyncStatus {
        var __result : __q_CWindows_CFoundation_CAsyncStatus = defaultValue();
        try self._n_get_Status(&__result);
        return __result;
    }
// method not needed: get_ErrorCode
// method not needed: Cancel
// method not needed: Close
    public var Status : __q_CWindows_CFoundation_CAsyncStatus {
        get throws {
            return try get_Status();
        }
    }
} // IAsyncInfo


}
extension WinRT.Windows.Foundation.AsyncStatus {
    public static var Canceled : Self {
        get {
            return __q_CWindows_CFoundation_CAsyncStatus_Canceled;
        }
    }
    public static var Completed : Self {
        get {
            return __q_CWindows_CFoundation_CAsyncStatus_Completed;
        }
    }
    public static var Error : Self {
        get {
            return __q_CWindows_CFoundation_CAsyncStatus_Error;
        }
    }
    public static var Started : Self {
        get {
            return __q_CWindows_CFoundation_CAsyncStatus_Started;
        }
    }
}
