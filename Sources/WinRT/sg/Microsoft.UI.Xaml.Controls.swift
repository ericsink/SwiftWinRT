// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.UI.Xaml.Controls {
// type: Microsoft.UI.Xaml.Controls.ContextMenuEventArgs
// runtime class
public class ContextMenuEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.Controls.IContextMenuEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Controls.IContextMenuEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Controls.IContextMenuEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_CursorLeft
    // method not needed: get_CursorTop
}

// type: Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler
// delegate type
open class IContextMenuOpeningEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd010ff61, Data2: 0x4067, Data3 : 0x526a, Data4 : (0x95, 0xa3, 0x51, 0x75, 0x77, 0xbc, 0x52, 0x73)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Controls.ContextMenuEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.Controls.IContextMenuEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ContextMenuOpeningEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = ContextMenuOpeningEventHandler.from($0)
        _ = instance?.retain()
        let __res = ULONG(_getRetainCount(instance!.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let instance = ContextMenuOpeningEventHandler.from($0)
        let __res = ULONG(_getRetainCount(instance!.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>>) in
        guard let self = ContextMenuOpeningEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Microsoft.UI.Xaml.Controls.ContextMenuEventArgs(plok: WinRT.Microsoft.UI.Xaml.Controls.IContextMenuEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler
        public var wrapper: Unmanaged<ContextMenuOpeningEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<ContextMenuOpeningEventHandler>.passUnretained(self)
    }
    private static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<ContextMenuOpeningEventHandler>? {
        return pUnk?.bindMemory(to: ContextMenuOpeningEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.IContextMenuEventArgs
// interface type
open class IContextMenuEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x65637bb3, Data2: 0xe279, Data3 : 0x5507, Data4 : (0xbd, 0x16, 0x6f, 0x7b, 0xa6, 0x70, 0x5f, 0x31)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_CursorLeft
// method not needed: get_CursorTop
} // IContextMenuEventArgs


// type: Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs
// interface type
open class IIsTextTrimmedChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c709b2f, Data2: 0x16ba, Data3 : 0x55d2, Data4 : (0xb6, 0xf6, 0xdf, 0xc5, 0x4a, 0x1e, 0xd0, 0x21)) }
} // IIsTextTrimmedChangedEventArgs


// type: Microsoft.UI.Xaml.Controls.ITextBlock
// interface type
open class ITextBlock
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1ac8d84f, Data2: 0x392c, Data3 : 0x5c7e, Data4 : (0x83, 0xf5, 0xa5, 0x3e, 0x3b, 0xf0, 0xab, 0xb0)) }
    // [IsSpecialName] System.Double get_FontSize()
    public func _n_get_FontSize(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Double)
    public func _n_put_FontSize(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.FontFamily get_FontFamily()
    public func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.IFontFamily> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
        try self._n_get_FontFamily(&__result);
        return WinRT.Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
    }
    // [IsSpecialName] void put_FontFamily(Microsoft.UI.Xaml.Media.FontFamily)
    public func _n_put_FontFamily(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Optional<WinRT.Microsoft.UI.Xaml.Media.IFontFamily>) throws -> Void {
        try self._n_put_FontFamily(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    public func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> WinRT.Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    public func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : WinRT.Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    public func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> WinRT.Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    public func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : WinRT.Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    public func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> WinRT.Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    public func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : WinRT.Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] System.Int32 get_CharacterSpacing()
    public func _n_get_CharacterSpacing(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, __presult))
        }
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CharacterSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CharacterSpacing(System.Int32)
    public func _n_put_CharacterSpacing(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
        }
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        try self._n_put_CharacterSpacing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Foreground()
    public func _n_get_Foreground(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, __presult))
        }
    }
    public func get_Foreground() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Foreground(&__result);
        return WinRT.Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Foreground(Microsoft.UI.Xaml.Media.Brush)
    public func _n_put_Foreground(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, value))
        }
    }
    public func put_Foreground(value : Optional<WinRT.Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Foreground(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextWrapping get_TextWrapping()
    public func _n_get_TextWrapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextWrapping>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, __presult))
        }
    }
    public func get_TextWrapping() throws -> WinRT.Microsoft.UI.Xaml.TextWrapping {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextWrapping = _q_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap;
        try self._n_get_TextWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextWrapping(Microsoft.UI.Xaml.TextWrapping)
    public func _n_put_TextWrapping(_ value : _q_CMicrosoft_CUI_CXaml_CTextWrapping) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
        }
    }
    public func put_TextWrapping(value : WinRT.Microsoft.UI.Xaml.TextWrapping) throws -> Void {
        try self._n_put_TextWrapping(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextTrimming get_TextTrimming()
    public func _n_get_TextTrimming(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextTrimming>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimming(pThis, __presult))
        }
    }
    public func get_TextTrimming() throws -> WinRT.Microsoft.UI.Xaml.TextTrimming {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextTrimming = _q_CMicrosoft_CUI_CXaml_CTextTrimming_None;
        try self._n_get_TextTrimming(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextTrimming(Microsoft.UI.Xaml.TextTrimming)
    public func _n_put_TextTrimming(_ value : _q_CMicrosoft_CUI_CXaml_CTextTrimming) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextTrimming(pThis, value))
        }
    }
    public func put_TextTrimming(value : WinRT.Microsoft.UI.Xaml.TextTrimming) throws -> Void {
        try self._n_put_TextTrimming(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextAlignment get_TextAlignment()
    public func _n_get_TextAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, __presult))
        }
    }
    public func get_TextAlignment() throws -> WinRT.Microsoft.UI.Xaml.TextAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        try self._n_get_TextAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextAlignment(Microsoft.UI.Xaml.TextAlignment)
    public func _n_put_TextAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CTextAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
        }
    }
    public func put_TextAlignment(value : WinRT.Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        try self._n_put_TextAlignment(value);
    }
    // [IsSpecialName] System.String get_Text()
    public func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Text(System.String)
    public func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.hRef.hString);
        }
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.InlineCollection get_Inlines()
    public func _n_get_Inlines(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inlines(pThis, __presult))
        }
    }
    public func get_Inlines() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline>> = nil;
        try self._n_get_Inlines(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    public func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> WinRT.Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    public func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : WinRT.Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] System.Double get_LineHeight()
    public func _n_get_LineHeight(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, __presult))
        }
    }
    public func get_LineHeight() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_LineHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineHeight(System.Double)
    public func _n_put_LineHeight(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
        }
    }
    public func put_LineHeight(value : Swift.Double) throws -> Void {
        try self._n_put_LineHeight(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.LineStackingStrategy get_LineStackingStrategy()
    public func _n_get_LineStackingStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CLineStackingStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, __presult))
        }
    }
    public func get_LineStackingStrategy() throws -> WinRT.Microsoft.UI.Xaml.LineStackingStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy = _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight;
        try self._n_get_LineStackingStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineStackingStrategy(Microsoft.UI.Xaml.LineStackingStrategy)
    public func _n_put_LineStackingStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
        }
    }
    public func put_LineStackingStrategy(value : WinRT.Microsoft.UI.Xaml.LineStackingStrategy) throws -> Void {
        try self._n_put_LineStackingStrategy(value);
    }
    // [IsSpecialName] bool get_IsTextSelectionEnabled()
    public func _n_get_IsTextSelectionEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabled(pThis, __presult))
        }
    }
    public func get_IsTextSelectionEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextSelectionEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextSelectionEnabled(bool)
    public func _n_put_IsTextSelectionEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSelectionEnabled(pThis, value))
        }
    }
    public func put_IsTextSelectionEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextSelectionEnabled(value);
    }
    // [IsSpecialName] System.String get_SelectedText()
    public func _n_get_SelectedText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, __presult))
        }
    }
    public func get_SelectedText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SelectedText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_ContentStart()
    public func _n_get_ContentStart(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentStart(pThis, __presult))
        }
    }
    public func get_ContentStart() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_ContentStart(&__result);
        return WinRT.Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_ContentEnd()
    public func _n_get_ContentEnd(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEnd(pThis, __presult))
        }
    }
    public func get_ContentEnd() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_ContentEnd(&__result);
        return WinRT.Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_SelectionStart()
    public func _n_get_SelectionStart(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, __presult))
        }
    }
    public func get_SelectionStart() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_SelectionStart(&__result);
        return WinRT.Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_SelectionEnd()
    public func _n_get_SelectionEnd(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionEnd(pThis, __presult))
        }
    }
    public func get_SelectionEnd() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_SelectionEnd(&__result);
        return WinRT.Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] System.Double get_BaselineOffset()
    public func _n_get_BaselineOffset(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaselineOffset(pThis, __presult))
        }
    }
    public func get_BaselineOffset() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_BaselineOffset(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.SolidColorBrush get_SelectionHighlightColor()
    public func _n_get_SelectionHighlightColor(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, __presult))
        }
    }
    public func get_SelectionHighlightColor() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>> = nil;
        try self._n_get_SelectionHighlightColor(&__result);
        return WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush(consuming: __result);
    }
    // [IsSpecialName] void put_SelectionHighlightColor(Microsoft.UI.Xaml.Media.SolidColorBrush)
    public func _n_put_SelectionHighlightColor(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, value))
        }
    }
    public func put_SelectionHighlightColor(value : Optional<WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush>) throws -> Void {
        try self._n_put_SelectionHighlightColor(RawPointer(value));
    }
    // [IsSpecialName] System.Int32 get_MaxLines()
    public func _n_get_MaxLines(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, __presult))
        }
    }
    public func get_MaxLines() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_MaxLines(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxLines(System.Int32)
    public func _n_put_MaxLines(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
        }
    }
    public func put_MaxLines(value : Swift.Int32) throws -> Void {
        try self._n_put_MaxLines(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextLineBounds get_TextLineBounds()
    public func _n_get_TextLineBounds(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextLineBounds>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, __presult))
        }
    }
    public func get_TextLineBounds() throws -> WinRT.Microsoft.UI.Xaml.TextLineBounds {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextLineBounds = _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Full;
        try self._n_get_TextLineBounds(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextLineBounds(Microsoft.UI.Xaml.TextLineBounds)
    public func _n_put_TextLineBounds(_ value : _q_CMicrosoft_CUI_CXaml_CTextLineBounds) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
        }
    }
    public func put_TextLineBounds(value : WinRT.Microsoft.UI.Xaml.TextLineBounds) throws -> Void {
        try self._n_put_TextLineBounds(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.OpticalMarginAlignment get_OpticalMarginAlignment()
    public func _n_get_OpticalMarginAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, __presult))
        }
    }
    public func get_OpticalMarginAlignment() throws -> WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None;
        try self._n_get_OpticalMarginAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpticalMarginAlignment(Microsoft.UI.Xaml.OpticalMarginAlignment)
    public func _n_put_OpticalMarginAlignment(_ value : _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
        }
    }
    public func put_OpticalMarginAlignment(value : WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment) throws -> Void {
        try self._n_put_OpticalMarginAlignment(value);
    }
    // [IsSpecialName] bool get_IsColorFontEnabled()
    public func _n_get_IsColorFontEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, __presult))
        }
    }
    public func get_IsColorFontEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsColorFontEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsColorFontEnabled(bool)
    public func _n_put_IsColorFontEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, value))
        }
    }
    public func put_IsColorFontEnabled(value : boolean) throws -> Void {
        try self._n_put_IsColorFontEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextReadingOrder get_TextReadingOrder()
    public func _n_get_TextReadingOrder(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextReadingOrder>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, __presult))
        }
    }
    public func get_TextReadingOrder() throws -> WinRT.Microsoft.UI.Xaml.TextReadingOrder {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextReadingOrder = _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default;
        try self._n_get_TextReadingOrder(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextReadingOrder(Microsoft.UI.Xaml.TextReadingOrder)
    public func _n_put_TextReadingOrder(_ value : _q_CMicrosoft_CUI_CXaml_CTextReadingOrder) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
        }
    }
    public func put_TextReadingOrder(value : WinRT.Microsoft.UI.Xaml.TextReadingOrder) throws -> Void {
        try self._n_put_TextReadingOrder(value);
    }
    // [IsSpecialName] bool get_IsTextScaleFactorEnabled()
    public func _n_get_IsTextScaleFactorEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextScaleFactorEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextScaleFactorEnabled(bool)
    public func _n_put_IsTextScaleFactorEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, value))
        }
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextScaleFactorEnabled(value);
    }
    // [IsSpecialName] Windows.UI.Text.TextDecorations get_TextDecorations()
    public func _n_get_TextDecorations(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CTextDecorations>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorations(pThis, __presult))
        }
    }
    public func get_TextDecorations() throws -> WinRT.Windows.UI.Text.TextDecorations {
        var __result : _q_CWindows_CUI_CText_CTextDecorations = _q_CWindows_CUI_CText_CTextDecorations_None;
        try self._n_get_TextDecorations(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextDecorations(Windows.UI.Text.TextDecorations)
    public func _n_put_TextDecorations(_ value : _q_CWindows_CUI_CText_CTextDecorations) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextDecorations(pThis, value))
        }
    }
    public func put_TextDecorations(value : WinRT.Windows.UI.Text.TextDecorations) throws -> Void {
        try self._n_put_TextDecorations(value);
    }
    // [IsSpecialName] bool get_IsTextTrimmed()
    public func _n_get_IsTextTrimmed(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmed(pThis, __presult))
        }
    }
    public func get_IsTextTrimmed() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextTrimmed(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextAlignment get_HorizontalTextAlignment()
    public func _n_get_HorizontalTextAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalTextAlignment() throws -> WinRT.Microsoft.UI.Xaml.TextAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        try self._n_get_HorizontalTextAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalTextAlignment(Microsoft.UI.Xaml.TextAlignment)
    public func _n_put_HorizontalTextAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CTextAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
        }
    }
    public func put_HorizontalTextAlignment(value : WinRT.Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        try self._n_put_HorizontalTextAlignment(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter> get_TextHighlighters()
    public func _n_get_TextHighlighters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextHighlighters(pThis, __presult))
        }
    }
    public func get_TextHighlighters() throws -> Optional<WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter>> = nil;
        try self._n_get_TextHighlighters(&__result);
        return WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase get_SelectionFlyout()
    public func _n_get_SelectionFlyout(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, __presult))
        }
    }
    public func get_SelectionFlyout() throws -> Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>> = nil;
        try self._n_get_SelectionFlyout(&__result);
        return WinRT.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase(consuming: __result);
    }
    // [IsSpecialName] void put_SelectionFlyout(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)
    public func _n_put_SelectionFlyout(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, value))
        }
    }
    public func put_SelectionFlyout(value : Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase>) throws -> Void {
        try self._n_put_SelectionFlyout(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SelectionChanged(Microsoft.UI.Xaml.RoutedEventHandler)
    public func _n_add_SelectionChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, handler, __presult))
        }
    }
    public func add_SelectionChanged(handler : Optional<WinRT.Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SelectionChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SelectionChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_SelectionChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
        }
    }
    public func remove_SelectionChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SelectionChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ContextMenuOpening(Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler)
    public func _n_add_ContextMenuOpening(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, handler, __presult))
        }
    }
    public func add_ContextMenuOpening(handler : Optional<WinRT.Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ContextMenuOpening(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ContextMenuOpening(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_ContextMenuOpening(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
        }
    }
    public func remove_ContextMenuOpening(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ContextMenuOpening(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_IsTextTrimmedChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock,Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>)
    public func _n_add_IsTextTrimmedChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsTextTrimmedChanged(pThis, handler, __presult))
        }
    }
    public func add_IsTextTrimmedChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_IsTextTrimmedChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_IsTextTrimmedChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_IsTextTrimmedChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsTextTrimmedChanged(pThis, token))
        }
    }
    public func remove_IsTextTrimmedChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_IsTextTrimmedChanged(token);
    }
    // void SelectAll()
    public func _n_SelectAll() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
        }
    }
    public func SelectAll() throws -> Void {
        try self._n_SelectAll();
    }
    // void Select(Microsoft.UI.Xaml.Documents.TextPointer, Microsoft.UI.Xaml.Documents.TextPointer)
    public func _n_Select(_ start : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>, _ end : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, start, end))
        }
    }
    public func Select(start : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer>, end : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer>) throws -> Void {
        try self._n_Select(RawPointer(start), RawPointer(end));
    }
    // Microsoft.UI.Composition.CompositionBrush GetAlphaMask()
    public func _n_GetAlphaMask(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, __presult))
        }
    }
    public func GetAlphaMask() throws -> Optional<WinRT.Microsoft.UI.Composition.ICompositionBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionBrush>> = nil;
        try self._n_GetAlphaMask(&__result);
        return WinRT.Microsoft.UI.Composition.ICompositionBrush(consuming: __result);
    }
    // void CopySelectionToClipboard()
    public func _n_CopySelectionToClipboard() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
        }
    }
    public func CopySelectionToClipboard() throws -> Void {
        try self._n_CopySelectionToClipboard();
    }
    public var BaselineOffset : Swift.Double {
        get throws {
            return try get_BaselineOffset();
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
            return try get_CharacterSpacing();
        }
    }
    public var ContentEnd : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_ContentEnd();
        }
    }
    public var ContentStart : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_ContentStart();
        }
    }
    public var FontFamily : Optional<WinRT.Microsoft.UI.Xaml.Media.IFontFamily> {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Double {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : WinRT.Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : WinRT.Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : WinRT.Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var Foreground : Optional<WinRT.Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Foreground();
        }
    }
    public var HorizontalTextAlignment : WinRT.Microsoft.UI.Xaml.TextAlignment {
        get throws {
            return try get_HorizontalTextAlignment();
        }
    }
    public var Inlines : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Inlines();
        }
    }
    public var IsColorFontEnabled : boolean {
        get throws {
            return try get_IsColorFontEnabled();
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
            return try get_IsTextScaleFactorEnabled();
        }
    }
    public var IsTextSelectionEnabled : boolean {
        get throws {
            return try get_IsTextSelectionEnabled();
        }
    }
    public var IsTextTrimmed : boolean {
        get throws {
            return try get_IsTextTrimmed();
        }
    }
    public var LineHeight : Swift.Double {
        get throws {
            return try get_LineHeight();
        }
    }
    public var LineStackingStrategy : WinRT.Microsoft.UI.Xaml.LineStackingStrategy {
        get throws {
            return try get_LineStackingStrategy();
        }
    }
    public var MaxLines : Swift.Int32 {
        get throws {
            return try get_MaxLines();
        }
    }
    public var OpticalMarginAlignment : WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment {
        get throws {
            return try get_OpticalMarginAlignment();
        }
    }
    public var Padding : WinRT.Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var SelectedText : Swift.String {
        get throws {
            return try get_SelectedText();
        }
    }
    public var SelectionEnd : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_SelectionEnd();
        }
    }
    public var SelectionFlyout : Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        get throws {
            return try get_SelectionFlyout();
        }
    }
    public var SelectionHighlightColor : Optional<WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        get throws {
            return try get_SelectionHighlightColor();
        }
    }
    public var SelectionStart : Optional<WinRT.Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_SelectionStart();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
    public var TextAlignment : WinRT.Microsoft.UI.Xaml.TextAlignment {
        get throws {
            return try get_TextAlignment();
        }
    }
    public var TextDecorations : WinRT.Windows.UI.Text.TextDecorations {
        get throws {
            return try get_TextDecorations();
        }
    }
    public var TextHighlighters : Optional<WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        get throws {
            return try get_TextHighlighters();
        }
    }
    public var TextLineBounds : WinRT.Microsoft.UI.Xaml.TextLineBounds {
        get throws {
            return try get_TextLineBounds();
        }
    }
    public var TextReadingOrder : WinRT.Microsoft.UI.Xaml.TextReadingOrder {
        get throws {
            return try get_TextReadingOrder();
        }
    }
    public var TextTrimming : WinRT.Microsoft.UI.Xaml.TextTrimming {
        get throws {
            return try get_TextTrimming();
        }
    }
    public var TextWrapping : WinRT.Microsoft.UI.Xaml.TextWrapping {
        get throws {
            return try get_TextWrapping();
        }
    }
} // ITextBlock


// type: Microsoft.UI.Xaml.Controls.ITextBlockStatics
// interface type
open class ITextBlockStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3187104b, Data2: 0x65c2, Data3 : 0x5e53, Data4 : (0xb8, 0x89, 0xc8, 0x27, 0x2b, 0x13, 0x14, 0xcd)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontSizeProperty()
    public func _n_get_FontSizeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, __presult))
        }
    }
    public func get_FontSizeProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontSizeProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontFamilyProperty()
    public func _n_get_FontFamilyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, __presult))
        }
    }
    public func get_FontFamilyProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontFamilyProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontWeightProperty()
    public func _n_get_FontWeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, __presult))
        }
    }
    public func get_FontWeightProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontWeightProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStyleProperty()
    public func _n_get_FontStyleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, __presult))
        }
    }
    public func get_FontStyleProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStyleProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStretchProperty()
    public func _n_get_FontStretchProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, __presult))
        }
    }
    public func get_FontStretchProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStretchProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CharacterSpacingProperty()
    public func _n_get_CharacterSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, __presult))
        }
    }
    public func get_CharacterSpacingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CharacterSpacingProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ForegroundProperty()
    public func _n_get_ForegroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, __presult))
        }
    }
    public func get_ForegroundProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ForegroundProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextWrappingProperty()
    public func _n_get_TextWrappingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, __presult))
        }
    }
    public func get_TextWrappingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextWrappingProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextTrimmingProperty()
    public func _n_get_TextTrimmingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimmingProperty(pThis, __presult))
        }
    }
    public func get_TextTrimmingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextTrimmingProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextAlignmentProperty()
    public func _n_get_TextAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, __presult))
        }
    }
    public func get_TextAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextAlignmentProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextProperty()
    public func _n_get_TextProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, __presult))
        }
    }
    public func get_TextProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    public func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LineHeightProperty()
    public func _n_get_LineHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, __presult))
        }
    }
    public func get_LineHeightProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LineHeightProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LineStackingStrategyProperty()
    public func _n_get_LineStackingStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, __presult))
        }
    }
    public func get_LineStackingStrategyProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LineStackingStrategyProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextSelectionEnabledProperty()
    public func _n_get_IsTextSelectionEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextSelectionEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextSelectionEnabledProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectedTextProperty()
    public func _n_get_SelectedTextProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedTextProperty(pThis, __presult))
        }
    }
    public func get_SelectedTextProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectedTextProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectionHighlightColorProperty()
    public func _n_get_SelectionHighlightColorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, __presult))
        }
    }
    public func get_SelectionHighlightColorProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectionHighlightColorProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MaxLinesProperty()
    public func _n_get_MaxLinesProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, __presult))
        }
    }
    public func get_MaxLinesProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MaxLinesProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextLineBoundsProperty()
    public func _n_get_TextLineBoundsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, __presult))
        }
    }
    public func get_TextLineBoundsProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextLineBoundsProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OpticalMarginAlignmentProperty()
    public func _n_get_OpticalMarginAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, __presult))
        }
    }
    public func get_OpticalMarginAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OpticalMarginAlignmentProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsColorFontEnabledProperty()
    public func _n_get_IsColorFontEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsColorFontEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsColorFontEnabledProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextReadingOrderProperty()
    public func _n_get_TextReadingOrderProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, __presult))
        }
    }
    public func get_TextReadingOrderProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextReadingOrderProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextScaleFactorEnabledProperty()
    public func _n_get_IsTextScaleFactorEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextScaleFactorEnabledProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextDecorationsProperty()
    public func _n_get_TextDecorationsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorationsProperty(pThis, __presult))
        }
    }
    public func get_TextDecorationsProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextDecorationsProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextTrimmedProperty()
    public func _n_get_IsTextTrimmedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmedProperty(pThis, __presult))
        }
    }
    public func get_IsTextTrimmedProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextTrimmedProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HorizontalTextAlignmentProperty()
    public func _n_get_HorizontalTextAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, __presult))
        }
    }
    public func get_HorizontalTextAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HorizontalTextAlignmentProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectionFlyoutProperty()
    public func _n_get_SelectionFlyoutProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, __presult))
        }
    }
    public func get_SelectionFlyoutProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectionFlyoutProperty(&__result);
        return WinRT.Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var CharacterSpacingProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CharacterSpacingProperty();
        }
    }
    public var FontFamilyProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontFamilyProperty();
        }
    }
    public var FontSizeProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontSizeProperty();
        }
    }
    public var FontStretchProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStretchProperty();
        }
    }
    public var FontStyleProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStyleProperty();
        }
    }
    public var FontWeightProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontWeightProperty();
        }
    }
    public var ForegroundProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ForegroundProperty();
        }
    }
    public var HorizontalTextAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HorizontalTextAlignmentProperty();
        }
    }
    public var IsColorFontEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsColorFontEnabledProperty();
        }
    }
    public var IsTextScaleFactorEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextScaleFactorEnabledProperty();
        }
    }
    public var IsTextSelectionEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextSelectionEnabledProperty();
        }
    }
    public var IsTextTrimmedProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextTrimmedProperty();
        }
    }
    public var LineHeightProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LineHeightProperty();
        }
    }
    public var LineStackingStrategyProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LineStackingStrategyProperty();
        }
    }
    public var MaxLinesProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MaxLinesProperty();
        }
    }
    public var OpticalMarginAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OpticalMarginAlignmentProperty();
        }
    }
    public var PaddingProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var SelectedTextProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectedTextProperty();
        }
    }
    public var SelectionFlyoutProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectionFlyoutProperty();
        }
    }
    public var SelectionHighlightColorProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectionHighlightColorProperty();
        }
    }
    public var TextAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextAlignmentProperty();
        }
    }
    public var TextDecorationsProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextDecorationsProperty();
        }
    }
    public var TextLineBoundsProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextLineBoundsProperty();
        }
    }
    public var TextProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextProperty();
        }
    }
    public var TextReadingOrderProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextReadingOrderProperty();
        }
    }
    public var TextTrimmingProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextTrimmingProperty();
        }
    }
    public var TextWrappingProperty : Optional<WinRT.Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextWrappingProperty();
        }
    }
} // ITextBlockStatics


// type: Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs
// runtime class
public class IsTextTrimmedChangedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs { return _self; }
}

// type: Microsoft.UI.Xaml.Controls.TextBlock
// runtime class
public class TextBlock
{
    private var _self : WinRT.Microsoft.UI.Xaml.Controls.ITextBlock;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Controls.ITextBlock?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Controls.ITextBlock { return _self; }
    public init() throws {
        let _classId = try HString("Microsoft.UI.Xaml.Controls.TextBlock")
        _self = try RoActivateInstance(_classId)
    }
    private struct _ITextBlockStatics {
        static var x : ITextBlockStatics =
            try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBlock"))
    }
    public static var TextBlockStatics : ITextBlockStatics {
        _ITextBlockStatics.x
    }
    public static func get_FontSizeProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontSizeProperty());
    }
    public static func get_FontFamilyProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontFamilyProperty());
    }
    public static func get_FontWeightProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontWeightProperty());
    }
    public static func get_FontStyleProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontStyleProperty());
    }
    public static func get_FontStretchProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontStretchProperty());
    }
    public static func get_CharacterSpacingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_CharacterSpacingProperty());
    }
    public static func get_ForegroundProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_ForegroundProperty());
    }
    public static func get_TextWrappingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextWrappingProperty());
    }
    public static func get_TextTrimmingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextTrimmingProperty());
    }
    public static func get_TextAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextAlignmentProperty());
    }
    public static func get_TextProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_PaddingProperty());
    }
    public static func get_LineHeightProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_LineHeightProperty());
    }
    public static func get_LineStackingStrategyProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_LineStackingStrategyProperty());
    }
    public static func get_IsTextSelectionEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextSelectionEnabledProperty());
    }
    public static func get_SelectedTextProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectedTextProperty());
    }
    public static func get_SelectionHighlightColorProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectionHighlightColorProperty());
    }
    public static func get_MaxLinesProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_MaxLinesProperty());
    }
    public static func get_TextLineBoundsProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextLineBoundsProperty());
    }
    public static func get_OpticalMarginAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_OpticalMarginAlignmentProperty());
    }
    public static func get_IsColorFontEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsColorFontEnabledProperty());
    }
    public static func get_TextReadingOrderProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextReadingOrderProperty());
    }
    public static func get_IsTextScaleFactorEnabledProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextScaleFactorEnabledProperty());
    }
    public static func get_TextDecorationsProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextDecorationsProperty());
    }
    public static func get_IsTextTrimmedProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextTrimmedProperty());
    }
    public static func get_HorizontalTextAlignmentProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_HorizontalTextAlignmentProperty());
    }
    public static func get_SelectionFlyoutProperty() throws -> Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectionFlyoutProperty());
    }
    public static var CharacterSpacingProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.CharacterSpacingProperty);
        }
    }
    public static var FontFamilyProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontFamilyProperty);
        }
    }
    public static var FontSizeProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontSizeProperty);
        }
    }
    public static var FontStretchProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontStretchProperty);
        }
    }
    public static var FontStyleProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontStyleProperty);
        }
    }
    public static var FontWeightProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontWeightProperty);
        }
    }
    public static var ForegroundProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.ForegroundProperty);
        }
    }
    public static var HorizontalTextAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.HorizontalTextAlignmentProperty);
        }
    }
    public static var IsColorFontEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsColorFontEnabledProperty);
        }
    }
    public static var IsTextScaleFactorEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextScaleFactorEnabledProperty);
        }
    }
    public static var IsTextSelectionEnabledProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextSelectionEnabledProperty);
        }
    }
    public static var IsTextTrimmedProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextTrimmedProperty);
        }
    }
    public static var LineHeightProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.LineHeightProperty);
        }
    }
    public static var LineStackingStrategyProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.LineStackingStrategyProperty);
        }
    }
    public static var MaxLinesProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.MaxLinesProperty);
        }
    }
    public static var OpticalMarginAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.OpticalMarginAlignmentProperty);
        }
    }
    public static var PaddingProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.PaddingProperty);
        }
    }
    public static var SelectedTextProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectedTextProperty);
        }
    }
    public static var SelectionFlyoutProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectionFlyoutProperty);
        }
    }
    public static var SelectionHighlightColorProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectionHighlightColorProperty);
        }
    }
    public static var TextAlignmentProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextAlignmentProperty);
        }
    }
    public static var TextDecorationsProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextDecorationsProperty);
        }
    }
    public static var TextLineBoundsProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextLineBoundsProperty);
        }
    }
    public static var TextProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextProperty);
        }
    }
    public static var TextReadingOrderProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextReadingOrderProperty);
        }
    }
    public static var TextTrimmingProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextTrimmingProperty);
        }
    }
    public static var TextWrappingProperty : Optional<WinRT.Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextWrappingProperty);
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontFamily() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.FontFamily> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.get_FontFamily());
    }
    public func put_FontFamily(value : Optional<WinRT.Microsoft.UI.Xaml.Media.FontFamily>) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value!.Interface());
    }
    public func get_FontWeight() throws -> WinRT.Windows.UI.Text.FontWeight {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : WinRT.Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_FontStyle() throws -> WinRT.Windows.UI.Text.FontStyle {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : WinRT.Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontStretch() throws -> WinRT.Windows.UI.Text.FontStretch {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : WinRT.Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_CharacterSpacing();
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_CharacterSpacing(value: value);
    }
    public func get_Foreground() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Foreground());
    }
    public func put_Foreground(value : Optional<WinRT.Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Foreground(value: value!.Interface());
    }
    public func get_TextWrapping() throws -> WinRT.Microsoft.UI.Xaml.TextWrapping {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextWrapping();
    }
    public func put_TextWrapping(value : WinRT.Microsoft.UI.Xaml.TextWrapping) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextWrapping(value: value);
    }
    public func get_TextTrimming() throws -> WinRT.Microsoft.UI.Xaml.TextTrimming {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextTrimming();
    }
    public func put_TextTrimming(value : WinRT.Microsoft.UI.Xaml.TextTrimming) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextTrimming(value: value);
    }
    public func get_TextAlignment() throws -> WinRT.Microsoft.UI.Xaml.TextAlignment {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextAlignment();
    }
    public func put_TextAlignment(value : WinRT.Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextAlignment(value: value);
    }
    public func get_Text() throws -> Swift.String {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Inlines() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.InlineCollection> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Documents.InlineCollection(plok: _ifc.get_Inlines());
    }
    public func get_Padding() throws -> WinRT.Microsoft.UI.Xaml.Thickness {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : WinRT.Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_LineHeight() throws -> Swift.Double {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_LineHeight();
    }
    public func put_LineHeight(value : Swift.Double) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_LineHeight(value: value);
    }
    public func get_LineStackingStrategy() throws -> WinRT.Microsoft.UI.Xaml.LineStackingStrategy {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_LineStackingStrategy();
    }
    public func put_LineStackingStrategy(value : WinRT.Microsoft.UI.Xaml.LineStackingStrategy) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_LineStackingStrategy(value: value);
    }
    public func get_IsTextSelectionEnabled() throws -> boolean {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextSelectionEnabled();
    }
    public func put_IsTextSelectionEnabled(value : boolean) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsTextSelectionEnabled(value: value);
    }
    public func get_SelectedText() throws -> Swift.String {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_SelectedText();
    }
    public func get_ContentStart() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_ContentStart());
    }
    public func get_ContentEnd() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_ContentEnd());
    }
    public func get_SelectionStart() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_SelectionStart());
    }
    public func get_SelectionEnd() throws -> Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_SelectionEnd());
    }
    public func get_BaselineOffset() throws -> Swift.Double {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_BaselineOffset();
    }
    public func get_SelectionHighlightColor() throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.SolidColorBrush> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Media.SolidColorBrush(plok: _ifc.get_SelectionHighlightColor());
    }
    public func put_SelectionHighlightColor(value : Optional<WinRT.Microsoft.UI.Xaml.Media.SolidColorBrush>) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_SelectionHighlightColor(value: value!.Interface());
    }
    public func get_MaxLines() throws -> Swift.Int32 {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_MaxLines();
    }
    public func put_MaxLines(value : Swift.Int32) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_MaxLines(value: value);
    }
    public func get_TextLineBounds() throws -> WinRT.Microsoft.UI.Xaml.TextLineBounds {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextLineBounds();
    }
    public func put_TextLineBounds(value : WinRT.Microsoft.UI.Xaml.TextLineBounds) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextLineBounds(value: value);
    }
    public func get_OpticalMarginAlignment() throws -> WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_OpticalMarginAlignment();
    }
    public func put_OpticalMarginAlignment(value : WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_OpticalMarginAlignment(value: value);
    }
    public func get_IsColorFontEnabled() throws -> boolean {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsColorFontEnabled();
    }
    public func put_IsColorFontEnabled(value : boolean) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsColorFontEnabled(value: value);
    }
    public func get_TextReadingOrder() throws -> WinRT.Microsoft.UI.Xaml.TextReadingOrder {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextReadingOrder();
    }
    public func put_TextReadingOrder(value : WinRT.Microsoft.UI.Xaml.TextReadingOrder) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextReadingOrder(value: value);
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextScaleFactorEnabled();
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsTextScaleFactorEnabled(value: value);
    }
    public func get_TextDecorations() throws -> WinRT.Windows.UI.Text.TextDecorations {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextDecorations();
    }
    public func put_TextDecorations(value : WinRT.Windows.UI.Text.TextDecorations) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextDecorations(value: value);
    }
    public func get_IsTextTrimmed() throws -> boolean {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextTrimmed();
    }
    public func get_HorizontalTextAlignment() throws -> WinRT.Microsoft.UI.Xaml.TextAlignment {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_HorizontalTextAlignment();
    }
    public func put_HorizontalTextAlignment(value : WinRT.Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_HorizontalTextAlignment(value: value);
    }
    public func get_TextHighlighters() throws -> Optional<WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextHighlighters();
    }
    public func get_SelectionFlyout() throws -> Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.get_SelectionFlyout());
    }
    public func put_SelectionFlyout(value : Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.put_SelectionFlyout(value: value!.Interface());
    }
    public func add_SelectionChanged(handler : Optional<WinRT.Microsoft.UI.Xaml.RoutedEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.add_SelectionChanged(handler: handler!.Interface());
    }
    public func remove_SelectionChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_SelectionChanged(token: token);
    }
    public func add_ContextMenuOpening(handler : Optional<WinRT.Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.add_ContextMenuOpening(handler: handler!.Interface());
    }
    public func remove_ContextMenuOpening(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_ContextMenuOpening(token: token);
    }
    public func add_IsTextTrimmedChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.add_IsTextTrimmedChanged(handler: handler);
    }
    public func remove_IsTextTrimmedChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_IsTextTrimmedChanged(token: token);
    }
    public func SelectAll() throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.SelectAll();
    }
    public func Select(start : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer>, end : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer>) throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.Select(start: start!.Interface(), end: end!.Interface());
    }
    public func GetAlphaMask() throws -> Optional<WinRT.Microsoft.UI.Composition.CompositionBrush> {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Composition.CompositionBrush(plok: _ifc.GetAlphaMask());
    }
    public func CopySelectionToClipboard() throws -> Void {
        let _ifc : ITextBlock = try _self.QueryInterface();
        return try _ifc.CopySelectionToClipboard();
    }
    public var BaselineOffset : Swift.Double {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.BaselineOffset;
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.CharacterSpacing;
        }
    }
    public var ContentEnd : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.ContentEnd);
        }
    }
    public var ContentStart : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.ContentStart);
        }
    }
    public var FontFamily : Optional<WinRT.Microsoft.UI.Xaml.Media.FontFamily> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.FontFamily);
        }
    }
    public var FontSize : Swift.Double {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.FontSize;
        }
    }
    public var FontStretch : WinRT.Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.FontStretch;
        }
    }
    public var FontStyle : WinRT.Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.FontStyle;
        }
    }
    public var FontWeight : WinRT.Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.FontWeight;
        }
    }
    public var Foreground : Optional<WinRT.Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Foreground);
        }
    }
    public var HorizontalTextAlignment : WinRT.Microsoft.UI.Xaml.TextAlignment {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.HorizontalTextAlignment;
        }
    }
    public var Inlines : Optional<WinRT.Microsoft.UI.Xaml.Documents.InlineCollection> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Documents.InlineCollection(plok: _ifc.Inlines);
        }
    }
    public var IsColorFontEnabled : boolean {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.IsColorFontEnabled;
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.IsTextScaleFactorEnabled;
        }
    }
    public var IsTextSelectionEnabled : boolean {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.IsTextSelectionEnabled;
        }
    }
    public var IsTextTrimmed : boolean {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.IsTextTrimmed;
        }
    }
    public var LineHeight : Swift.Double {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.LineHeight;
        }
    }
    public var LineStackingStrategy : WinRT.Microsoft.UI.Xaml.LineStackingStrategy {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.LineStackingStrategy;
        }
    }
    public var MaxLines : Swift.Int32 {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.MaxLines;
        }
    }
    public var OpticalMarginAlignment : WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.OpticalMarginAlignment;
        }
    }
    public var Padding : WinRT.Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.Padding;
        }
    }
    public var SelectedText : Swift.String {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.SelectedText;
        }
    }
    public var SelectionEnd : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.SelectionEnd);
        }
    }
    public var SelectionFlyout : Optional<WinRT.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.SelectionFlyout);
        }
    }
    public var SelectionHighlightColor : Optional<WinRT.Microsoft.UI.Xaml.Media.SolidColorBrush> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Media.SolidColorBrush(plok: _ifc.SelectionHighlightColor);
        }
    }
    public var SelectionStart : Optional<WinRT.Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.SelectionStart);
        }
    }
    public var Text : Swift.String {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.Text;
        }
    }
    public var TextAlignment : WinRT.Microsoft.UI.Xaml.TextAlignment {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextAlignment;
        }
    }
    public var TextDecorations : WinRT.Windows.UI.Text.TextDecorations {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextDecorations;
        }
    }
    public var TextHighlighters : Optional<WinRT.Windows.Foundation.Collections.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextHighlighters;
        }
    }
    public var TextLineBounds : WinRT.Microsoft.UI.Xaml.TextLineBounds {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextLineBounds;
        }
    }
    public var TextReadingOrder : WinRT.Microsoft.UI.Xaml.TextReadingOrder {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextReadingOrder;
        }
    }
    public var TextTrimming : WinRT.Microsoft.UI.Xaml.TextTrimming {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextTrimming;
        }
    }
    public var TextWrapping : WinRT.Microsoft.UI.Xaml.TextWrapping {
        get throws {
        let _ifc : ITextBlock = try _self.QueryInterface();
            return try _ifc.TextWrapping;
        }
    }
}

}
