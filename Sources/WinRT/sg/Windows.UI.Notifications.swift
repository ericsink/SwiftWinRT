// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.UI.Notifications {
// type: Windows.UI.Notifications.INotificationData
// interface type
open class INotificationData
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9ffd2312, Data2: 0x9d6a, Data3 : 0x4aaf, Data4 : (0xb6, 0xac, 0xff, 0x17, 0xf0, 0xc1, 0xf2, 0x80)) }
// method not needed: get_Values
// method not needed: get_SequenceNumber
// method not needed: put_SequenceNumber
} // INotificationData


// type: Windows.UI.Notifications.INotificationDataFactory
// interface type
// ACTIVATION INTERFACE
open class INotificationDataFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23c1e33a, Data2: 0x1c10, Data3 : 0x46fb, Data4 : (0x80, 0x40, 0xde, 0xc3, 0x84, 0x62, 0x1c, 0xf8)) }
    // Windows.UI.Notifications.NotificationData CreateNotificationData(Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<System.String,System.String>>, System.UInt32)
    private func _n_CreateNotificationDataWithValuesAndSequenceNumber(_ initialValues : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>>, _ sequenceNumber : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CINotificationDataFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateNotificationDataWithValuesAndSequenceNumber(pThis, initialValues, sequenceNumber, __presult))
        }
    }
    public func CreateNotificationDataWithValuesAndSequenceNumber(initialValues : Optional<WinRT.ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>, sequenceNumber : Swift.UInt32) throws -> Optional<WinRT.Windows.UI.Notifications.INotificationData> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>> = nil;
        try self._n_CreateNotificationDataWithValuesAndSequenceNumber(RawPointer(initialValues), sequenceNumber, &__result);
        return WinRT.Windows.UI.Notifications.INotificationData(consuming: __result);
    }
    // Windows.UI.Notifications.NotificationData CreateNotificationData(Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<System.String,System.String>>)
    private func _n_CreateNotificationDataWithValues(_ initialValues : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CINotificationDataFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateNotificationDataWithValues(pThis, initialValues, __presult))
        }
    }
    public func CreateNotificationDataWithValues(initialValues : Optional<WinRT.ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>) throws -> Optional<WinRT.Windows.UI.Notifications.INotificationData> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>> = nil;
        try self._n_CreateNotificationDataWithValues(RawPointer(initialValues), &__result);
        return WinRT.Windows.UI.Notifications.INotificationData(consuming: __result);
    }
} // INotificationDataFactory


// type: Windows.UI.Notifications.IScheduledToastNotification
// interface type
open class IScheduledToastNotification
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x79f577f8, Data2: 0x0de7, Data3 : 0x48cd, Data4 : (0x97, 0x40, 0x9b, 0x37, 0x04, 0x90, 0xc8, 0x38)) }
// method not needed: get_Content
// method not needed: get_DeliveryTime
// method not needed: get_SnoozeInterval
// method not needed: get_MaximumSnoozeCount
// method not needed: put_Id
// method not needed: get_Id
} // IScheduledToastNotification


// type: Windows.UI.Notifications.IScheduledToastNotificationFactory
// interface type
// ACTIVATION INTERFACE
open class IScheduledToastNotificationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe7bed191, Data2: 0x0bb9, Data3 : 0x4189, Data4 : (0x83, 0x94, 0x31, 0x76, 0x1b, 0x47, 0x6f, 0xd7)) }
    // Windows.UI.Notifications.ScheduledToastNotification CreateScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument, Windows.Foundation.DateTime)
    private func _n_CreateScheduledToastNotification(_ content : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>, _ deliveryTime : _q_CWindows_CFoundation_CDateTime, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateScheduledToastNotification(pThis, content, deliveryTime, __presult))
        }
    }
    public func CreateScheduledToastNotification(content : Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument>, deliveryTime : WinRT.Windows.Foundation.DateTime) throws -> Optional<WinRT.Windows.UI.Notifications.IScheduledToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>> = nil;
        try self._n_CreateScheduledToastNotification(RawPointer(content), deliveryTime, &__result);
        return WinRT.Windows.UI.Notifications.IScheduledToastNotification(consuming: __result);
    }
    // Windows.UI.Notifications.ScheduledToastNotification CreateScheduledToastNotificationRecurring(Windows.Data.Xml.Dom.XmlDocument, Windows.Foundation.DateTime, Windows.Foundation.TimeSpan, System.UInt32)
    private func _n_CreateScheduledToastNotificationRecurring(_ content : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>, _ deliveryTime : _q_CWindows_CFoundation_CDateTime, _ snoozeInterval : _q_CWindows_CFoundation_CTimeSpan, _ maximumSnoozeCount : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateScheduledToastNotificationRecurring(pThis, content, deliveryTime, snoozeInterval, maximumSnoozeCount, __presult))
        }
    }
    public func CreateScheduledToastNotificationRecurring(content : Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument>, deliveryTime : WinRT.Windows.Foundation.DateTime, snoozeInterval : WinRT.Windows.Foundation.TimeSpan, maximumSnoozeCount : Swift.UInt32) throws -> Optional<WinRT.Windows.UI.Notifications.IScheduledToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>> = nil;
        try self._n_CreateScheduledToastNotificationRecurring(RawPointer(content), deliveryTime, snoozeInterval, maximumSnoozeCount, &__result);
        return WinRT.Windows.UI.Notifications.IScheduledToastNotification(consuming: __result);
    }
} // IScheduledToastNotificationFactory


// type: Windows.UI.Notifications.IScheduledToastNotificationShowingEventArgs
// interface type
open class IScheduledToastNotificationShowingEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6173f6b4, Data2: 0x412a, Data3 : 0x5e2c, Data4 : (0xa6, 0xed, 0xa0, 0x20, 0x9a, 0xef, 0x9a, 0x09)) }
// method not needed: get_Cancel
// method not needed: put_Cancel
// method not needed: get_ScheduledToastNotification
// method not needed: GetDeferral
} // IScheduledToastNotificationShowingEventArgs


// type: Windows.UI.Notifications.IToastDismissedEventArgs
// interface type
open class IToastDismissedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3f89d935, Data2: 0xd9cb, Data3 : 0x4538, Data4 : (0xa0, 0xf0, 0xff, 0xe7, 0x65, 0x99, 0x38, 0xf8)) }
// method not needed: get_Reason
} // IToastDismissedEventArgs


// type: Windows.UI.Notifications.IToastFailedEventArgs
// interface type
open class IToastFailedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x35176862, Data2: 0xcfd4, Data3 : 0x44f8, Data4 : (0xad, 0x64, 0xf5, 0x00, 0xfd, 0x89, 0x6c, 0x3b)) }
// method not needed: get_ErrorCode
} // IToastFailedEventArgs


// type: Windows.UI.Notifications.IToastNotification
// interface type
open class IToastNotification
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x997e2675, Data2: 0x059e, Data3 : 0x4e60, Data4 : (0x8b, 0x06, 0x17, 0x60, 0x91, 0x7c, 0x8b, 0x80)) }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocument get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_get_Content(&__result);
        return WinRT.Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    // [IsSpecialName] void put_ExpirationTime(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_ExpirationTime(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, value))
        }
    }
    public func put_ExpirationTime(value : Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_ExpirationTime(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_ExpirationTime()
    private func _n_get_ExpirationTime(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, __presult))
        }
    }
    public func get_ExpirationTime() throws -> Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_ExpirationTime(&__result);
        return WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Dismissed(Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification,Windows.UI.Notifications.ToastDismissedEventArgs>)
    private func _n_add_Dismissed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Dismissed(pThis, handler, __presult))
        }
    }
    public func add_Dismissed(handler : Optional<WinRT.ClosedGenerics.ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Dismissed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Dismissed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Dismissed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Dismissed(pThis, token))
        }
    }
    public func remove_Dismissed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Dismissed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Activated(Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification,System.Object>)
    private func _n_add_Activated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Activated(pThis, handler, __presult))
        }
    }
    public func add_Activated(handler : Optional<WinRT.ClosedGenerics.ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Activated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Activated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Activated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Activated(pThis, token))
        }
    }
    public func remove_Activated(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Activated(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Failed(Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotification,Windows.UI.Notifications.ToastFailedEventArgs>)
    private func _n_add_Failed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Failed(pThis, handler, __presult))
        }
    }
    public func add_Failed(handler : Optional<WinRT.ClosedGenerics.ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Failed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Failed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Failed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Failed(pThis, token))
        }
    }
    public func remove_Failed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Failed(token);
    }
    public var Content : Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument> {
        get throws {
            return try get_Content();
        }
    }
    public var ExpirationTime : Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_ExpirationTime();
        }
    }
} // IToastNotification


// type: Windows.UI.Notifications.IToastNotification2
// interface type
open class IToastNotification2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9dfb9fd1, Data2: 0x143a, Data3 : 0x490e, Data4 : (0x90, 0xbf, 0xb9, 0xfb, 0xa7, 0x13, 0x2d, 0xe7)) }
    // [IsSpecialName] void put_Tag(System.String)
    private func _n_put_Tag(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, value))
        }
    }
    public func put_Tag(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Tag(__hstr_value.hRef.hString);
        }
    }
    // [IsSpecialName] System.String get_Tag()
    private func _n_get_Tag(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, __presult))
        }
    }
    public func get_Tag() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Tag(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Group(System.String)
    private func _n_put_Group(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Group(pThis, value))
        }
    }
    public func put_Group(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Group(__hstr_value.hRef.hString);
        }
    }
    // [IsSpecialName] System.String get_Group()
    private func _n_get_Group(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, __presult))
        }
    }
    public func get_Group() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Group(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_SuppressPopup(bool)
    private func _n_put_SuppressPopup(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuppressPopup(pThis, value))
        }
    }
    public func put_SuppressPopup(value : boolean) throws -> Void {
        try self._n_put_SuppressPopup(value);
    }
    // [IsSpecialName] bool get_SuppressPopup()
    private func _n_get_SuppressPopup(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuppressPopup(pThis, __presult))
        }
    }
    public func get_SuppressPopup() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_SuppressPopup(&__result);
        return __result;
    }
    public var Group : Swift.String {
        get throws {
            return try get_Group();
        }
    }
    public var SuppressPopup : boolean {
        get throws {
            return try get_SuppressPopup();
        }
    }
    public var Tag : Swift.String {
        get throws {
            return try get_Tag();
        }
    }
} // IToastNotification2


// type: Windows.UI.Notifications.IToastNotification3
// interface type
open class IToastNotification3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31e8aed8, Data2: 0x8141, Data3 : 0x4f99, Data4 : (0xbc, 0x0a, 0xc4, 0xed, 0x21, 0x29, 0x7d, 0x77)) }
    // [IsSpecialName] Windows.UI.Notifications.NotificationMirroring get_NotificationMirroring()
    private func _n_get_NotificationMirroring(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CNotificationMirroring>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationMirroring(pThis, __presult))
        }
    }
    public func get_NotificationMirroring() throws -> WinRT.Windows.UI.Notifications.NotificationMirroring {
        var __result : _q_CWindows_CUI_CNotifications_CNotificationMirroring = _q_CWindows_CUI_CNotifications_CNotificationMirroring_Allowed;
        try self._n_get_NotificationMirroring(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NotificationMirroring(Windows.UI.Notifications.NotificationMirroring)
    private func _n_put_NotificationMirroring(_ value : _q_CWindows_CUI_CNotifications_CNotificationMirroring) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NotificationMirroring(pThis, value))
        }
    }
    public func put_NotificationMirroring(value : WinRT.Windows.UI.Notifications.NotificationMirroring) throws -> Void {
        try self._n_put_NotificationMirroring(value);
    }
    // [IsSpecialName] System.String get_RemoteId()
    private func _n_get_RemoteId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteId(pThis, __presult))
        }
    }
    public func get_RemoteId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemoteId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_RemoteId(System.String)
    private func _n_put_RemoteId(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RemoteId(pThis, value))
        }
    }
    public func put_RemoteId(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_RemoteId(__hstr_value.hRef.hString);
        }
    }
    public var NotificationMirroring : WinRT.Windows.UI.Notifications.NotificationMirroring {
        get throws {
            return try get_NotificationMirroring();
        }
    }
    public var RemoteId : Swift.String {
        get throws {
            return try get_RemoteId();
        }
    }
} // IToastNotification3


// type: Windows.UI.Notifications.IToastNotification4
// interface type
open class IToastNotification4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x15154935, Data2: 0x28ea, Data3 : 0x4727, Data4 : (0x88, 0xe9, 0xc5, 0x86, 0x80, 0xe2, 0xd1, 0x18)) }
    // [IsSpecialName] Windows.UI.Notifications.NotificationData get_Data()
    private func _n_get_Data(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, __presult))
        }
    }
    public func get_Data() throws -> Optional<WinRT.Windows.UI.Notifications.INotificationData> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>> = nil;
        try self._n_get_Data(&__result);
        return WinRT.Windows.UI.Notifications.INotificationData(consuming: __result);
    }
    // [IsSpecialName] void put_Data(Windows.UI.Notifications.NotificationData)
    private func _n_put_Data(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Data(pThis, value))
        }
    }
    public func put_Data(value : Optional<WinRT.Windows.UI.Notifications.INotificationData>) throws -> Void {
        try self._n_put_Data(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotificationPriority get_Priority()
    private func _n_get_Priority(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CToastNotificationPriority>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Priority(pThis, __presult))
        }
    }
    public func get_Priority() throws -> WinRT.Windows.UI.Notifications.ToastNotificationPriority {
        var __result : _q_CWindows_CUI_CNotifications_CToastNotificationPriority = _q_CWindows_CUI_CNotifications_CToastNotificationPriority_Default;
        try self._n_get_Priority(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Priority(Windows.UI.Notifications.ToastNotificationPriority)
    private func _n_put_Priority(_ value : _q_CWindows_CUI_CNotifications_CToastNotificationPriority) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Priority(pThis, value))
        }
    }
    public func put_Priority(value : WinRT.Windows.UI.Notifications.ToastNotificationPriority) throws -> Void {
        try self._n_put_Priority(value);
    }
    public var Data : Optional<WinRT.Windows.UI.Notifications.INotificationData> {
        get throws {
            return try get_Data();
        }
    }
    public var Priority : WinRT.Windows.UI.Notifications.ToastNotificationPriority {
        get throws {
            return try get_Priority();
        }
    }
} // IToastNotification4


// type: Windows.UI.Notifications.IToastNotification6
// interface type
open class IToastNotification6
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43ebfe53, Data2: 0x89ae, Data3 : 0x5c1e, Data4 : (0xa2, 0x79, 0x3a, 0xec, 0xfe, 0x9b, 0x6f, 0x54)) }
    // [IsSpecialName] bool get_ExpiresOnReboot()
    private func _n_get_ExpiresOnReboot(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification6.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpiresOnReboot(pThis, __presult))
        }
    }
    public func get_ExpiresOnReboot() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ExpiresOnReboot(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExpiresOnReboot(bool)
    private func _n_put_ExpiresOnReboot(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotification6.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpiresOnReboot(pThis, value))
        }
    }
    public func put_ExpiresOnReboot(value : boolean) throws -> Void {
        try self._n_put_ExpiresOnReboot(value);
    }
    public var ExpiresOnReboot : boolean {
        get throws {
            return try get_ExpiresOnReboot();
        }
    }
} // IToastNotification6


// type: Windows.UI.Notifications.IToastNotificationFactory
// interface type
// ACTIVATION INTERFACE
open class IToastNotificationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04124b20, Data2: 0x82c6, Data3 : 0x4229, Data4 : (0xb1, 0x09, 0xfd, 0x9e, 0xd4, 0x66, 0x2b, 0x53)) }
    // Windows.UI.Notifications.ToastNotification CreateToastNotification(Windows.Data.Xml.Dom.XmlDocument)
    private func _n_CreateToastNotification(_ content : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotification(pThis, content, __presult))
        }
    }
    public func CreateToastNotification(content : Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument>) throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_CreateToastNotification(RawPointer(content), &__result);
        return WinRT.Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
} // IToastNotificationFactory


// type: Windows.UI.Notifications.IToastNotificationHistory
// interface type
open class IToastNotificationHistory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5caddc63, Data2: 0x01d3, Data3 : 0x4c97, Data4 : (0x98, 0x6f, 0x05, 0x33, 0x48, 0x3f, 0xee, 0x14)) }
// method not needed: RemoveGroup
// method not needed: RemoveGroupWithId
// method not needed: RemoveGroupedTagWithId
// method not needed: RemoveGroupedTag
// method not needed: Remove
// method not needed: Clear
// method not needed: ClearWithId
} // IToastNotificationHistory


// type: Windows.UI.Notifications.IToastNotificationManagerForUser
// interface type
open class IToastNotificationManagerForUser
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x79ab57f6, Data2: 0x43fe, Data3 : 0x487b, Data4 : (0x8a, 0x7f, 0x99, 0x56, 0x72, 0x00, 0xae, 0x94)) }
// method not needed: CreateToastNotifier
// method not needed: CreateToastNotifierWithId
// method not needed: get_History
// method not needed: get_User
} // IToastNotificationManagerForUser


// type: Windows.UI.Notifications.IToastNotificationManagerStatics
// interface type
open class IToastNotificationManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x50ac103f, Data2: 0xd235, Data3 : 0x4598, Data4 : (0xbb, 0xef, 0x98, 0xfe, 0x4d, 0x1a, 0x3a, 0xd4)) }
    // Windows.UI.Notifications.ToastNotifier CreateToastNotifier()
    private func _n_CreateToastNotifier(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotifier>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifier(pThis, __presult))
        }
    }
    public func CreateToastNotifier() throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotifier> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotifier>> = nil;
        try self._n_CreateToastNotifier(&__result);
        return WinRT.Windows.UI.Notifications.IToastNotifier(consuming: __result);
    }
    // Windows.UI.Notifications.ToastNotifier CreateToastNotifier(System.String)
    private func _n_CreateToastNotifierWithId(_ applicationId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotifier>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifierWithId(pThis, applicationId, __presult))
        }
    }
    public func CreateToastNotifierWithId(applicationId : Swift.String) throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotifier> {
        let __hstr_applicationId = try HString(applicationId);
        return try withExtendedLifetime(__hstr_applicationId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotifier>> = nil;
        try self._n_CreateToastNotifierWithId(__hstr_applicationId.hRef.hString, &__result);
        return WinRT.Windows.UI.Notifications.IToastNotifier(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlDocument GetTemplateContent(Windows.UI.Notifications.ToastTemplateType)
    private func _n_GetTemplateContent(_ type : _q_CWindows_CUI_CNotifications_CToastTemplateType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateContent(pThis, type, __presult))
        }
    }
    public func GetTemplateContent(type : WinRT.Windows.UI.Notifications.ToastTemplateType) throws -> Optional<WinRT.Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_GetTemplateContent(type, &__result);
        return WinRT.Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
} // IToastNotificationManagerStatics


// type: Windows.UI.Notifications.IToastNotificationManagerStatics2
// interface type
open class IToastNotificationManagerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7ab93c52, Data2: 0x0e48, Data3 : 0x4750, Data4 : (0xba, 0x9d, 0x1a, 0x41, 0x13, 0x98, 0x18, 0x47)) }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotificationHistory get_History()
    private func _n_get_History(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationHistory>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_History(pThis, __presult))
        }
    }
    public func get_History() throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotificationHistory> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationHistory>> = nil;
        try self._n_get_History(&__result);
        return WinRT.Windows.UI.Notifications.IToastNotificationHistory(consuming: __result);
    }
    public var History : Optional<WinRT.Windows.UI.Notifications.IToastNotificationHistory> {
        get throws {
            return try get_History();
        }
    }
} // IToastNotificationManagerStatics2


// type: Windows.UI.Notifications.IToastNotificationManagerStatics4
// interface type
open class IToastNotificationManagerStatics4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8f993fd3, Data2: 0xe516, Data3 : 0x45fb, Data4 : (0x81, 0x30, 0x39, 0x8e, 0x93, 0xfa, 0x52, 0xc3)) }
    // Windows.UI.Notifications.ToastNotificationManagerForUser GetForUser(Windows.System.User)
    private func _n_GetForUser(_ user : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, user, __presult))
        }
    }
    public func GetForUser(user : Optional<WinRT.Windows.System.IUser>) throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser>> = nil;
        try self._n_GetForUser(RawPointer(user), &__result);
        return WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser(consuming: __result);
    }
    // void ConfigureNotificationMirroring(Windows.UI.Notifications.NotificationMirroring)
    private func _n_ConfigureNotificationMirroring(_ value : _q_CWindows_CUI_CNotifications_CNotificationMirroring) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConfigureNotificationMirroring(pThis, value))
        }
    }
    public func ConfigureNotificationMirroring(value : WinRT.Windows.UI.Notifications.NotificationMirroring) throws -> Void {
        try self._n_ConfigureNotificationMirroring(value);
    }
} // IToastNotificationManagerStatics4


// type: Windows.UI.Notifications.IToastNotificationManagerStatics5
// interface type
open class IToastNotificationManagerStatics5
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd6f5f569, Data2: 0xd40d, Data3 : 0x407c, Data4 : (0x89, 0x89, 0x88, 0xca, 0xb4, 0x2c, 0xfd, 0x14)) }
    // Windows.UI.Notifications.ToastNotificationManagerForUser GetDefault()
    private func _n_GetDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, __presult))
        }
    }
    public func GetDefault() throws -> Optional<WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser>> = nil;
        try self._n_GetDefault(&__result);
        return WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser(consuming: __result);
    }
} // IToastNotificationManagerStatics5


// type: Windows.UI.Notifications.IToastNotifier
// interface type
open class IToastNotifier
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x75927b93, Data2: 0x03f3, Data3 : 0x41ec, Data4 : (0x91, 0xd3, 0x6e, 0x5b, 0xac, 0x1b, 0x38, 0xe7)) }
    // void Show(Windows.UI.Notifications.ToastNotification)
    private func _n_Show(_ notification : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Show(pThis, notification))
        }
    }
    public func Show(notification : Optional<WinRT.Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_Show(RawPointer(notification));
    }
    // void Hide(Windows.UI.Notifications.ToastNotification)
    private func _n_Hide(_ notification : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis, notification))
        }
    }
    public func Hide(notification : Optional<WinRT.Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_Hide(RawPointer(notification));
    }
    // [IsSpecialName] Windows.UI.Notifications.NotificationSetting get_Setting()
    private func _n_get_Setting(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CNotificationSetting>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Setting(pThis, __presult))
        }
    }
    public func get_Setting() throws -> WinRT.Windows.UI.Notifications.NotificationSetting {
        var __result : _q_CWindows_CUI_CNotifications_CNotificationSetting = _q_CWindows_CUI_CNotifications_CNotificationSetting_Enabled;
        try self._n_get_Setting(&__result);
        return __result;
    }
    // void AddToSchedule(Windows.UI.Notifications.ScheduledToastNotification)
    private func _n_AddToSchedule(_ scheduledToast : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddToSchedule(pThis, scheduledToast))
        }
    }
    public func AddToSchedule(scheduledToast : Optional<WinRT.Windows.UI.Notifications.IScheduledToastNotification>) throws -> Void {
        try self._n_AddToSchedule(RawPointer(scheduledToast));
    }
    // void RemoveFromSchedule(Windows.UI.Notifications.ScheduledToastNotification)
    private func _n_RemoveFromSchedule(_ scheduledToast : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIScheduledToastNotification>>) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromSchedule(pThis, scheduledToast))
        }
    }
    public func RemoveFromSchedule(scheduledToast : Optional<WinRT.Windows.UI.Notifications.IScheduledToastNotification>) throws -> Void {
        try self._n_RemoveFromSchedule(RawPointer(scheduledToast));
    }
    // Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ScheduledToastNotification> GetScheduledToastNotifications()
    private func _n_GetScheduledToastNotifications(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetScheduledToastNotifications(pThis, __presult))
        }
    }
    public func GetScheduledToastNotifications() throws -> Optional<WinRT.ClosedGenerics.IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification>> = nil;
        try self._n_GetScheduledToastNotifications(&__result);
        return WinRT.ClosedGenerics.IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification(consuming: __result);
    }
    public var Setting : WinRT.Windows.UI.Notifications.NotificationSetting {
        get throws {
            return try get_Setting();
        }
    }
} // IToastNotifier


// type: Windows.UI.Notifications.IToastNotifier2
// interface type
open class IToastNotifier2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x354389c6, Data2: 0x7c01, Data3 : 0x4bd5, Data4 : (0x9c, 0x20, 0x60, 0x43, 0x40, 0xcd, 0x2b, 0x74)) }
    // Windows.UI.Notifications.NotificationUpdateResult Update(Windows.UI.Notifications.NotificationData, System.String, System.String)
    private func _n_UpdateWithTagAndGroup(_ data : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>, _ tag : Optional<HSTRING>, _ group : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CNotificationUpdateResult>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateWithTagAndGroup(pThis, data, tag, group, __presult))
        }
    }
    public func UpdateWithTagAndGroup(data : Optional<WinRT.Windows.UI.Notifications.INotificationData>, tag : Swift.String, group : Swift.String) throws -> WinRT.Windows.UI.Notifications.NotificationUpdateResult {
        let __hstr_tag = try HString(tag);
        return try withExtendedLifetime(__hstr_tag) {
        let __hstr_group = try HString(group);
        return try withExtendedLifetime(__hstr_group) {
        var __result : _q_CWindows_CUI_CNotifications_CNotificationUpdateResult = _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Succeeded;
        try self._n_UpdateWithTagAndGroup(RawPointer(data), __hstr_tag.hRef.hString, __hstr_group.hRef.hString, &__result);
        return __result;
        }
        }
    }
    // Windows.UI.Notifications.NotificationUpdateResult Update(Windows.UI.Notifications.NotificationData, System.String)
    private func _n_UpdateWithTag(_ data : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CINotificationData>>, _ tag : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CNotificationUpdateResult>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateWithTag(pThis, data, tag, __presult))
        }
    }
    public func UpdateWithTag(data : Optional<WinRT.Windows.UI.Notifications.INotificationData>, tag : Swift.String) throws -> WinRT.Windows.UI.Notifications.NotificationUpdateResult {
        let __hstr_tag = try HString(tag);
        return try withExtendedLifetime(__hstr_tag) {
        var __result : _q_CWindows_CUI_CNotifications_CNotificationUpdateResult = _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Succeeded;
        try self._n_UpdateWithTag(RawPointer(data), __hstr_tag.hRef.hString, &__result);
        return __result;
        }
    }
} // IToastNotifier2


// type: Windows.UI.Notifications.IToastNotifier3
// interface type
open class IToastNotifier3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xae75a04a, Data2: 0x3b0c, Data3 : 0x51ad, Data4 : (0xb7, 0xe8, 0xb0, 0x8a, 0xb6, 0x05, 0x25, 0x49)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ScheduledToastNotificationShowing(Windows.Foundation.TypedEventHandler<Windows.UI.Notifications.ToastNotifier,Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs>)
    private func _n_add_ScheduledToastNotificationShowing(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScheduledToastNotificationShowing(pThis, handler, __presult))
        }
    }
    public func add_ScheduledToastNotificationShowing(handler : Optional<WinRT.ClosedGenerics.ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ScheduledToastNotificationShowing(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ScheduledToastNotificationShowing(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ScheduledToastNotificationShowing(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CNotifications_CIToastNotifier3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScheduledToastNotificationShowing(pThis, token))
        }
    }
    public func remove_ScheduledToastNotificationShowing(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ScheduledToastNotificationShowing(token);
    }
} // IToastNotifier3


// type: Windows.UI.Notifications.NotificationData
// runtime class
public class NotificationData
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.INotificationData;
    internal init(plok: WinRT.Windows.UI.Notifications.INotificationData?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.INotificationData { return _self; }
    public init(initialValues : Optional<WinRT.ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>, sequenceNumber : Swift.UInt32) throws {
        let _af : INotificationDataFactory = try RoGetActivationFactory("Windows.UI.Notifications.NotificationData");
        _self = try _af.CreateNotificationDataWithValuesAndSequenceNumber(initialValues: initialValues, sequenceNumber: sequenceNumber)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(initialValues : Optional<WinRT.ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING>) throws {
        let _af : INotificationDataFactory = try RoGetActivationFactory("Windows.UI.Notifications.NotificationData");
        _self = try _af.CreateNotificationDataWithValues(initialValues: initialValues)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.UI.Notifications.NotificationData")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Values
    // method not needed: get_SequenceNumber
    // method not needed: put_SequenceNumber
}

// type: Windows.UI.Notifications.NotificationMirroring
// enum type
public typealias NotificationMirroring = _q_CWindows_CUI_CNotifications_CNotificationMirroring;

// type: Windows.UI.Notifications.NotificationSetting
// enum type
public typealias NotificationSetting = _q_CWindows_CUI_CNotifications_CNotificationSetting;

// type: Windows.UI.Notifications.NotificationUpdateResult
// enum type
public typealias NotificationUpdateResult = _q_CWindows_CUI_CNotifications_CNotificationUpdateResult;

// type: Windows.UI.Notifications.ScheduledToastNotification
// runtime class
public class ScheduledToastNotification
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IScheduledToastNotification;
    internal init(plok: WinRT.Windows.UI.Notifications.IScheduledToastNotification?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IScheduledToastNotification { return _self; }
    public init(content : Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument>, deliveryTime : WinRT.Windows.Foundation.DateTime) throws {
        let _af : IScheduledToastNotificationFactory = try RoGetActivationFactory("Windows.UI.Notifications.ScheduledToastNotification");
        _self = try _af.CreateScheduledToastNotification(content: content!.Interface(), deliveryTime: deliveryTime)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(content : Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument>, deliveryTime : WinRT.Windows.Foundation.DateTime, snoozeInterval : WinRT.Windows.Foundation.TimeSpan, maximumSnoozeCount : Swift.UInt32) throws {
        let _af : IScheduledToastNotificationFactory = try RoGetActivationFactory("Windows.UI.Notifications.ScheduledToastNotification");
        _self = try _af.CreateScheduledToastNotificationRecurring(content: content!.Interface(), deliveryTime: deliveryTime, snoozeInterval: snoozeInterval, maximumSnoozeCount: maximumSnoozeCount)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Content
    // method not needed: get_DeliveryTime
    // method not needed: get_SnoozeInterval
    // method not needed: get_MaximumSnoozeCount
    // method not needed: put_Id
    // method not needed: get_Id
    // instance interface not needed: Windows.UI.Notifications.IScheduledToastNotification2
    // instance interface not needed: Windows.UI.Notifications.IScheduledToastNotification3
    // instance interface not needed: Windows.UI.Notifications.IScheduledToastNotification4
}

// type: Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs
// runtime class
public class ScheduledToastNotificationShowingEventArgs
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IScheduledToastNotificationShowingEventArgs;
    internal init(plok: WinRT.Windows.UI.Notifications.IScheduledToastNotificationShowingEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IScheduledToastNotificationShowingEventArgs { return _self; }
    // method not needed: get_Cancel
    // method not needed: put_Cancel
    // method not needed: get_ScheduledToastNotification
    // method not needed: GetDeferral
}

// type: Windows.UI.Notifications.ToastDismissedEventArgs
// runtime class
public class ToastDismissedEventArgs
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastDismissedEventArgs;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastDismissedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastDismissedEventArgs { return _self; }
    // method not needed: get_Reason
}

// type: Windows.UI.Notifications.ToastFailedEventArgs
// runtime class
public class ToastFailedEventArgs
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastFailedEventArgs;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastFailedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastFailedEventArgs { return _self; }
    // method not needed: get_ErrorCode
}

// type: Windows.UI.Notifications.ToastNotification
// runtime class
public class ToastNotification
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastNotification;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastNotification?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastNotification { return _self; }
    public init(content : Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument>) throws {
        let _af : IToastNotificationFactory = try RoGetActivationFactory("Windows.UI.Notifications.ToastNotification");
        _self = try _af.CreateToastNotification(content: content!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Content() throws -> Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try WinRT.Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_Content());
    }
    public func put_ExpirationTime(value : Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.put_ExpirationTime(value: value);
    }
    public func get_ExpirationTime() throws -> Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.get_ExpirationTime();
    }
    public func add_Dismissed(handler : @escaping (Optional<WinRT.Windows.UI.Notifications.ToastNotification>, Optional<WinRT.Windows.UI.Notifications.ToastDismissedEventArgs>) throws -> Void) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.add_Dismissed(handler: WinRT.ClosedGenerics.TypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs(cb: handler).Interface());
    }
    public func remove_Dismissed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.remove_Dismissed(token: token);
    }
    public func add_Activated(handler : @escaping (Optional<WinRT.Windows.UI.Notifications.ToastNotification>, Optional<WinRT.Object>) throws -> Void) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.add_Activated(handler: WinRT.ClosedGenerics.TypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable(cb: handler).Interface());
    }
    public func remove_Activated(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.remove_Activated(token: token);
    }
    public func add_Failed(handler : @escaping (Optional<WinRT.Windows.UI.Notifications.ToastNotification>, Optional<WinRT.Windows.UI.Notifications.ToastFailedEventArgs>) throws -> Void) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.add_Failed(handler: WinRT.ClosedGenerics.TypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs(cb: handler).Interface());
    }
    public func remove_Failed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
        return try _ifc.remove_Failed(token: token);
    }
    public var Content : Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
            return try WinRT.Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.Content);
        }
    }
    public var ExpirationTime : Optional<WinRT.ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification = try _self.QueryInterface();
            return try _ifc.ExpirationTime;
        }
    }
    public func put_Tag(value : Swift.String) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.put_Tag(value: value);
    }
    public func get_Tag() throws -> Swift.String {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.get_Tag();
    }
    public func put_Group(value : Swift.String) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.put_Group(value: value);
    }
    public func get_Group() throws -> Swift.String {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.get_Group();
    }
    public func put_SuppressPopup(value : boolean) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.put_SuppressPopup(value: value);
    }
    public func get_SuppressPopup() throws -> boolean {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
        return try _ifc.get_SuppressPopup();
    }
    public var Group : Swift.String {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
            return try _ifc.Group;
        }
    }
    public var SuppressPopup : boolean {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
            return try _ifc.SuppressPopup;
        }
    }
    public var Tag : Swift.String {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification2 = try _self.QueryInterface();
            return try _ifc.Tag;
        }
    }
    public func get_NotificationMirroring() throws -> WinRT.Windows.UI.Notifications.NotificationMirroring {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
        return try _ifc.get_NotificationMirroring();
    }
    public func put_NotificationMirroring(value : WinRT.Windows.UI.Notifications.NotificationMirroring) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
        return try _ifc.put_NotificationMirroring(value: value);
    }
    public func get_RemoteId() throws -> Swift.String {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
        return try _ifc.get_RemoteId();
    }
    public func put_RemoteId(value : Swift.String) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
        return try _ifc.put_RemoteId(value: value);
    }
    public var NotificationMirroring : WinRT.Windows.UI.Notifications.NotificationMirroring {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
            return try _ifc.NotificationMirroring;
        }
    }
    public var RemoteId : Swift.String {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification3 = try _self.QueryInterface();
            return try _ifc.RemoteId;
        }
    }
    public func get_Data() throws -> Optional<WinRT.Windows.UI.Notifications.NotificationData> {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
        return try WinRT.Windows.UI.Notifications.NotificationData(plok: _ifc.get_Data());
    }
    public func put_Data(value : Optional<WinRT.Windows.UI.Notifications.NotificationData>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
        return try _ifc.put_Data(value: value!.Interface());
    }
    public func get_Priority() throws -> WinRT.Windows.UI.Notifications.ToastNotificationPriority {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
        return try _ifc.get_Priority();
    }
    public func put_Priority(value : WinRT.Windows.UI.Notifications.ToastNotificationPriority) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
        return try _ifc.put_Priority(value: value);
    }
    public var Data : Optional<WinRT.Windows.UI.Notifications.NotificationData> {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
            return try WinRT.Windows.UI.Notifications.NotificationData(plok: _ifc.Data);
        }
    }
    public var Priority : WinRT.Windows.UI.Notifications.ToastNotificationPriority {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification4 = try _self.QueryInterface();
            return try _ifc.Priority;
        }
    }
    public func get_ExpiresOnReboot() throws -> boolean {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification6 = try _self.QueryInterface();
        return try _ifc.get_ExpiresOnReboot();
    }
    public func put_ExpiresOnReboot(value : boolean) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification6 = try _self.QueryInterface();
        return try _ifc.put_ExpiresOnReboot(value: value);
    }
    public var ExpiresOnReboot : boolean {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotification6 = try _self.QueryInterface();
            return try _ifc.ExpiresOnReboot;
        }
    }
}

// type: Windows.UI.Notifications.ToastNotificationHistory
// runtime class
public class ToastNotificationHistory
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastNotificationHistory;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastNotificationHistory?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastNotificationHistory { return _self; }
    // instance interface not needed: Windows.UI.Notifications.IToastNotificationHistory2
    // method not needed: RemoveGroup
    // method not needed: RemoveGroup
    // method not needed: Remove
    // method not needed: Remove
    // method not needed: Remove
    // method not needed: Clear
    // method not needed: Clear
}

// type: Windows.UI.Notifications.ToastNotificationManager
// static class
public class ToastNotificationManager
{
    private struct _IToastNotificationManagerStatics5 {
        static var x : IToastNotificationManagerStatics5 =
            try! RoGetActivationFactory("Windows.UI.Notifications.ToastNotificationManager")
    }
    public static var ToastNotificationManagerStatics5 : IToastNotificationManagerStatics5 {
        _IToastNotificationManagerStatics5.x
    }
    public static func GetDefault() throws -> Optional<WinRT.Windows.UI.Notifications.ToastNotificationManagerForUser> {
        return try WinRT.Windows.UI.Notifications.ToastNotificationManagerForUser(plok: ToastNotificationManagerStatics5.GetDefault());
    }
    private struct _IToastNotificationManagerStatics2 {
        static var x : IToastNotificationManagerStatics2 =
            try! RoGetActivationFactory("Windows.UI.Notifications.ToastNotificationManager")
    }
    public static var ToastNotificationManagerStatics2 : IToastNotificationManagerStatics2 {
        _IToastNotificationManagerStatics2.x
    }
    public static func get_History() throws -> Optional<WinRT.Windows.UI.Notifications.ToastNotificationHistory> {
        return try WinRT.Windows.UI.Notifications.ToastNotificationHistory(plok: ToastNotificationManagerStatics2.get_History());
    }
    public static var History : Optional<WinRT.Windows.UI.Notifications.ToastNotificationHistory> {
        get throws {
        return try WinRT.Windows.UI.Notifications.ToastNotificationHistory(plok: ToastNotificationManagerStatics2.History);
        }
    }
    private struct _IToastNotificationManagerStatics {
        static var x : IToastNotificationManagerStatics =
            try! RoGetActivationFactory("Windows.UI.Notifications.ToastNotificationManager")
    }
    public static var ToastNotificationManagerStatics : IToastNotificationManagerStatics {
        _IToastNotificationManagerStatics.x
    }
    public static func CreateToastNotifier() throws -> Optional<WinRT.Windows.UI.Notifications.ToastNotifier> {
        return try WinRT.Windows.UI.Notifications.ToastNotifier(plok: ToastNotificationManagerStatics.CreateToastNotifier());
    }
    public static func CreateToastNotifier(applicationId : Swift.String) throws -> Optional<WinRT.Windows.UI.Notifications.ToastNotifier> {
        return try WinRT.Windows.UI.Notifications.ToastNotifier(plok: ToastNotificationManagerStatics.CreateToastNotifierWithId(applicationId: applicationId));
    }
    public static func GetTemplateContent(type : WinRT.Windows.UI.Notifications.ToastTemplateType) throws -> Optional<WinRT.Windows.Data.Xml.Dom.XmlDocument> {
        return try WinRT.Windows.Data.Xml.Dom.XmlDocument(plok: ToastNotificationManagerStatics.GetTemplateContent(type: type));
    }
    private struct _IToastNotificationManagerStatics4 {
        static var x : IToastNotificationManagerStatics4 =
            try! RoGetActivationFactory("Windows.UI.Notifications.ToastNotificationManager")
    }
    public static var ToastNotificationManagerStatics4 : IToastNotificationManagerStatics4 {
        _IToastNotificationManagerStatics4.x
    }
    public static func GetForUser(user : Optional<WinRT.Windows.System.User>) throws -> Optional<WinRT.Windows.UI.Notifications.ToastNotificationManagerForUser> {
        return try WinRT.Windows.UI.Notifications.ToastNotificationManagerForUser(plok: ToastNotificationManagerStatics4.GetForUser(user: user!.Interface()));
    }
    public static func ConfigureNotificationMirroring(value : WinRT.Windows.UI.Notifications.NotificationMirroring) throws -> Void {
        return try ToastNotificationManagerStatics4.ConfigureNotificationMirroring(value: value);
    }
}

// type: Windows.UI.Notifications.ToastNotificationManagerForUser
// runtime class
public class ToastNotificationManagerForUser
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastNotificationManagerForUser { return _self; }
    // method not needed: CreateToastNotifier
    // method not needed: CreateToastNotifier
    // method not needed: get_History
    // method not needed: get_User
    // instance interface not needed: Windows.UI.Notifications.IToastNotificationManagerForUser2
}

// type: Windows.UI.Notifications.ToastNotificationPriority
// enum type
public typealias ToastNotificationPriority = _q_CWindows_CUI_CNotifications_CToastNotificationPriority;

// type: Windows.UI.Notifications.ToastNotifier
// runtime class
public class ToastNotifier
    :
    WinRT.Object
{
    private var _self : WinRT.Windows.UI.Notifications.IToastNotifier;
    internal init(plok: WinRT.Windows.UI.Notifications.IToastNotifier?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Windows.UI.Notifications.IToastNotifier { return _self; }
    public func Show(notification : Optional<WinRT.Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.Show(notification: notification!.Interface());
    }
    public func Hide(notification : Optional<WinRT.Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.Hide(notification: notification!.Interface());
    }
    public func get_Setting() throws -> WinRT.Windows.UI.Notifications.NotificationSetting {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.get_Setting();
    }
    public func AddToSchedule(scheduledToast : Optional<WinRT.Windows.UI.Notifications.ScheduledToastNotification>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.AddToSchedule(scheduledToast: scheduledToast!.Interface());
    }
    public func RemoveFromSchedule(scheduledToast : Optional<WinRT.Windows.UI.Notifications.ScheduledToastNotification>) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.RemoveFromSchedule(scheduledToast: scheduledToast!.Interface());
    }
    public func GetScheduledToastNotifications() throws -> Optional<WinRT.ClosedGenerics.IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification> {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
        return try _ifc.GetScheduledToastNotifications();
    }
    public var Setting : WinRT.Windows.UI.Notifications.NotificationSetting {
        get throws {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier = try _self.QueryInterface();
            return try _ifc.Setting;
        }
    }
    public func Update(data : Optional<WinRT.Windows.UI.Notifications.NotificationData>, tag : Swift.String, group : Swift.String) throws -> WinRT.Windows.UI.Notifications.NotificationUpdateResult {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier2 = try _self.QueryInterface();
        return try _ifc.UpdateWithTagAndGroup(data: data!.Interface(), tag: tag, group: group);
    }
    public func Update(data : Optional<WinRT.Windows.UI.Notifications.NotificationData>, tag : Swift.String) throws -> WinRT.Windows.UI.Notifications.NotificationUpdateResult {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier2 = try _self.QueryInterface();
        return try _ifc.UpdateWithTag(data: data!.Interface(), tag: tag);
    }
    public func add_ScheduledToastNotificationShowing(handler : @escaping (Optional<WinRT.Windows.UI.Notifications.ToastNotifier>, Optional<WinRT.Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs>) throws -> Void) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier3 = try _self.QueryInterface();
        return try _ifc.add_ScheduledToastNotificationShowing(handler: WinRT.ClosedGenerics.TypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs(cb: handler).Interface());
    }
    public func remove_ScheduledToastNotificationShowing(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : WinRT.Windows.UI.Notifications.IToastNotifier3 = try _self.QueryInterface();
        return try _ifc.remove_ScheduledToastNotificationShowing(token: token);
    }
}

// type: Windows.UI.Notifications.ToastTemplateType
// enum type
public typealias ToastTemplateType = _q_CWindows_CUI_CNotifications_CToastTemplateType;

}
extension WinRT.Windows.UI.Notifications.NotificationMirroring {
    public static var Allowed : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationMirroring_Allowed;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationMirroring_Disabled;
        }
    }
}
extension WinRT.Windows.UI.Notifications.NotificationSetting {
    public static var Enabled : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationSetting_Enabled;
        }
    }
    public static var DisabledForApplication : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForApplication;
        }
    }
    public static var DisabledForUser : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForUser;
        }
    }
    public static var DisabledByGroupPolicy : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByGroupPolicy;
        }
    }
    public static var DisabledByManifest : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByManifest;
        }
    }
}
extension WinRT.Windows.UI.Notifications.NotificationUpdateResult {
    public static var Succeeded : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Succeeded;
        }
    }
    public static var Failed : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Failed;
        }
    }
    public static var NotificationNotFound : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_NotificationNotFound;
        }
    }
}
extension WinRT.Windows.UI.Notifications.ToastNotificationPriority {
    public static var Default : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastNotificationPriority_Default;
        }
    }
    public static var High : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastNotificationPriority_High;
        }
    }
}
extension WinRT.Windows.UI.Notifications.ToastTemplateType {
    public static var ToastImageAndText01 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText01;
        }
    }
    public static var ToastImageAndText02 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText02;
        }
    }
    public static var ToastImageAndText03 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText03;
        }
    }
    public static var ToastImageAndText04 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText04;
        }
    }
    public static var ToastText01 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText01;
        }
    }
    public static var ToastText02 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText02;
        }
    }
    public static var ToastText03 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText03;
        }
    }
    public static var ToastText04 : Self {
        get {
            return _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText04;
        }
    }
}
