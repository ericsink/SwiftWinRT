// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.Networking.Sockets {
// type: Windows.Networking.Sockets.DatagramSocket
// runtime class
public class DatagramSocket
{
    public init() throws {
        _self = try RoActivateInstance(HString("Windows.Networking.Sockets.DatagramSocket"))
        _IDatagramSocket = try _self.QueryInterface();
    }
    private struct _IDatagramSocketStatics {
        static var x : IDatagramSocketStatics =
            try! RoGetActivationFactory(HString("Windows.Networking.Sockets.DatagramSocket"))
    }
    public static var DatagramSocketStatics : IDatagramSocketStatics {
        _IDatagramSocketStatics.x
    }
    public static func GetEndpointPairsAsync(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try DatagramSocketStatics.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName);
    }
    public static func GetEndpointPairsWithSortOptionsAsync(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions) throws -> Optional<WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try DatagramSocketStatics.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions);
    }
    private var _self : IInspectable;
    public var _IDatagramSocket : IDatagramSocket;
    // method not needed: get_Control
    // method not needed: get_Information
    // method not needed: get_OutputStream
    // method not needed: ConnectAsync
    // method not needed: ConnectAsync
    // method not needed: BindServiceNameAsync
    // method not needed: BindEndpointAsync
    // method not needed: JoinMulticastGroup
    // method not needed: GetOutputStreamAsync
    // method not needed: GetOutputStreamAsync
    // method not needed: add_MessageReceived
    // method not needed: remove_MessageReceived
    // instance interface not needed: Windows.Foundation.IClosable
    // instance interface not needed: Windows.Networking.Sockets.IDatagramSocket2
    // instance interface not needed: Windows.Networking.Sockets.IDatagramSocket3
}

// type: Windows.Networking.Sockets.IDatagramSocket
// interface type
public class IDatagramSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7fe25bbb, Data2: 0xc3bc, Data3 : 0x4677, Data4 : (0x84, 0x46, 0xca, 0x28, 0xa4, 0x65, 0xa3, 0xaf)) }
// method not needed: get_Control
// method not needed: get_Information
// method not needed: get_OutputStream
// method not needed: ConnectAsync
// method not needed: ConnectWithEndpointPairAsync
// method not needed: BindServiceNameAsync
// method not needed: BindEndpointAsync
// method not needed: JoinMulticastGroup
// method not needed: GetOutputStreamAsync
// method not needed: GetOutputStreamWithEndpointPairAsync
// method not needed: add_MessageReceived
// method not needed: remove_MessageReceived
} // IDatagramSocket


// type: Windows.Networking.Sockets.IDatagramSocketStatics
// interface type
public class IDatagramSocketStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe9c62aee, Data2: 0x1494, Data3 : 0x4a21, Data4 : (0xbb, 0x7e, 0x85, 0x89, 0xfc, 0x75, 0x1d, 0x9d)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String)
    public func _n_GetEndpointPairsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func GetEndpointPairsAsync(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.hRef.hString, &__result);
        return WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairs(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Optional<WinRT.Windows.Foundation.Collections.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String, Windows.Networking.HostNameSortOptions)
    public func _n_GetEndpointPairsWithSortOptionsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsWithSortOptionsAsync(pThis, remoteHostName, remoteServiceName, sortOptions, __presult))
        }
    }
    public func GetEndpointPairsWithSortOptionsAsync(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions) throws -> Optional<WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsWithSortOptionsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.hRef.hString, sortOptions, &__result);
        return WinRT.Windows.Foundation.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairsWithSortOptions(remoteHostName : Optional<WinRT.Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions) async throws -> Optional<WinRT.Windows.Foundation.Collections.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IDatagramSocketStatics


}
