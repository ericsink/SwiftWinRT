// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.UI.Xaml {
// type: Microsoft.UI.Xaml.Application
// runtime class
open class Application
{
    private var _self : WinRT.Microsoft.UI.Xaml.IApplication;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IApplication?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IApplication { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IApplicationFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IApplicationFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Application"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    private struct _IApplicationStatics {
        static var x : IApplicationStatics =
            try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Application"))
    }
    public static var ApplicationStatics : IApplicationStatics {
        _IApplicationStatics.x
    }
    public static func get_Current() throws -> Optional<WinRT.Microsoft.UI.Xaml.Application> {
        return try WinRT.Microsoft.UI.Xaml.Application(plok: ApplicationStatics.get_Current());
    }
    public static func Start(callback : Optional<WinRT.Microsoft.UI.Xaml.ApplicationInitializationCallback>) throws -> Void {
        return try ApplicationStatics.Start(callback: callback!.Interface());
    }
    public static func LoadComponent(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.Uri>) throws -> Void {
        return try ApplicationStatics.LoadComponent(component: component, resourceLocator: resourceLocator!.Interface());
    }
    public static func LoadComponentWithResourceLocation(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.Uri>, componentResourceLocation : WinRT.Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        return try ApplicationStatics.LoadComponentWithResourceLocation(component: component, resourceLocator: resourceLocator!.Interface(), componentResourceLocation: componentResourceLocation);
    }
    public static var Current : Optional<WinRT.Microsoft.UI.Xaml.Application> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.Application(plok: ApplicationStatics.Current);
        }
    }
    public func get_Resources() throws -> Optional<WinRT.Microsoft.UI.Xaml.ResourceDictionary> {
        let _ifc : IApplication = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.get_Resources());
    }
    public func put_Resources(value : Optional<WinRT.Microsoft.UI.Xaml.ResourceDictionary>) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_Resources(value: value!.Interface());
    }
    public func get_DebugSettings() throws -> Optional<WinRT.Microsoft.UI.Xaml.DebugSettings> {
        let _ifc : IApplication = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.DebugSettings(plok: _ifc.get_DebugSettings());
    }
    public func get_RequestedTheme() throws -> WinRT.Microsoft.UI.Xaml.ApplicationTheme {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.get_RequestedTheme();
    }
    public func put_RequestedTheme(value : WinRT.Microsoft.UI.Xaml.ApplicationTheme) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_RequestedTheme(value: value);
    }
    public func get_FocusVisualKind() throws -> WinRT.Microsoft.UI.Xaml.FocusVisualKind {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.get_FocusVisualKind();
    }
    public func put_FocusVisualKind(value : WinRT.Microsoft.UI.Xaml.FocusVisualKind) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_FocusVisualKind(value: value);
    }
    public func get_HighContrastAdjustment() throws -> WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.get_HighContrastAdjustment();
    }
    public func put_HighContrastAdjustment(value : WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_HighContrastAdjustment(value: value);
    }
    public func add_UnhandledException(handler : Optional<WinRT.Microsoft.UI.Xaml.UnhandledExceptionEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.add_UnhandledException(handler: handler!.Interface());
    }
    public func remove_UnhandledException(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.remove_UnhandledException(token: token);
    }
    public func Exit() throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.Exit();
    }
    public var DebugSettings : Optional<WinRT.Microsoft.UI.Xaml.DebugSettings> {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.DebugSettings(plok: _ifc.DebugSettings);
        }
    }
    public var FocusVisualKind : WinRT.Microsoft.UI.Xaml.FocusVisualKind {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try _ifc.FocusVisualKind;
        }
    }
    public var HighContrastAdjustment : WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try _ifc.HighContrastAdjustment;
        }
    }
    public var RequestedTheme : WinRT.Microsoft.UI.Xaml.ApplicationTheme {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try _ifc.RequestedTheme;
        }
    }
    public var Resources : Optional<WinRT.Microsoft.UI.Xaml.ResourceDictionary> {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.Resources);
        }
    }
    open func OnLaunched(args : Optional<WinRT.Microsoft.UI.Xaml.LaunchActivatedEventArgs>) throws -> Void {
    }
}

// type: Microsoft.UI.Xaml.ApplicationHighContrastAdjustment
// enum type
public typealias ApplicationHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment;

// type: Microsoft.UI.Xaml.ApplicationInitializationCallback
// delegate type
open class IApplicationInitializationCallback
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8eef1c9, Data2: 0x1234, Data3 : 0x56f1, Data4 : (0x99, 0x63, 0x45, 0xdd, 0x9c, 0x80, 0xa6, 0x61)) }
    // [IsSpecialName] void Invoke(Microsoft.UI.Xaml.ApplicationInitializationCallbackParams)
    public func _n_Invoke(_ p : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, p))
        }
    }
    public func Invoke(p : Optional<WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams>) throws -> Void {
        try self._n_Invoke(RawPointer(p));
    }
}
// impl delegate type
open class ApplicationInitializationCallback
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallback.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = ApplicationInitializationCallback.from($0)
        _ = instance?.retain()
        let __res = ULONG(_getRetainCount(instance!.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let instance = ApplicationInitializationCallback.from($0)
        let __res = ULONG(_getRetainCount(instance!.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ p : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>>) in
        guard let self = ApplicationInitializationCallback.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(p: WinRT.Microsoft.UI.Xaml.ApplicationInitializationCallbackParams(plok: WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams(p)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback
        public var wrapper: Unmanaged<ApplicationInitializationCallback>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<ApplicationInitializationCallback>.passUnretained(self)
    }
    private static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<ApplicationInitializationCallback>? {
        return pUnk?.bindMemory(to: ApplicationInitializationCallback.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(p : Optional<WinRT.Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void {
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallback {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallback(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.ApplicationInitializationCallbackParams
// runtime class
public class ApplicationInitializationCallbackParams
{
    private var _self : WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallbackParams { return _self; }
}

// type: Microsoft.UI.Xaml.ApplicationTheme
// enum type
public typealias ApplicationTheme = _q_CMicrosoft_CUI_CXaml_CApplicationTheme;

// type: Microsoft.UI.Xaml.DebugSettings
// runtime class
public class DebugSettings
{
    private var _self : WinRT.Microsoft.UI.Xaml.IDebugSettings;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IDebugSettings?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IDebugSettings { return _self; }
    // method not needed: get_EnableFrameRateCounter
    // method not needed: put_EnableFrameRateCounter
    // method not needed: get_IsBindingTracingEnabled
    // method not needed: put_IsBindingTracingEnabled
    // method not needed: get_IsTextPerformanceVisualizationEnabled
    // method not needed: put_IsTextPerformanceVisualizationEnabled
    // method not needed: get_FailFastOnErrors
    // method not needed: put_FailFastOnErrors
    // method not needed: add_BindingFailed
    // method not needed: remove_BindingFailed
}

// type: Microsoft.UI.Xaml.DependencyObject
// runtime class
open class DependencyObject
{
    private var _self : WinRT.Microsoft.UI.Xaml.IDependencyObject;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IDependencyObject?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IDependencyObject { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IDependencyObjectFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IDependencyObjectFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.DependencyObject"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    // method not needed: GetValue
    // method not needed: SetValue
    // method not needed: ClearValue
    // method not needed: ReadLocalValue
    // method not needed: GetAnimationBaseValue
    // method not needed: RegisterPropertyChangedCallback
    // method not needed: UnregisterPropertyChangedCallback
    // method not needed: get_Dispatcher
    // method not needed: get_DispatcherQueue
}

// type: Microsoft.UI.Xaml.DependencyProperty
// runtime class
public class DependencyProperty
{
    private var _self : WinRT.Microsoft.UI.Xaml.IDependencyProperty;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IDependencyProperty?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IDependencyProperty { return _self; }
    // static interface not needed: Microsoft.UI.Xaml.IDependencyPropertyStatics
    // method not needed: GetMetadata
}

// type: Microsoft.UI.Xaml.FocusVisualKind
// enum type
public typealias FocusVisualKind = _q_CMicrosoft_CUI_CXaml_CFocusVisualKind;

// type: Microsoft.UI.Xaml.FrameworkElement
// runtime class
open class FrameworkElement
{
    private var _self : WinRT.Microsoft.UI.Xaml.IFrameworkElement;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IFrameworkElement?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IFrameworkElement { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IFrameworkElementFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IFrameworkElementFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.FrameworkElement"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    // static interface not needed: Microsoft.UI.Xaml.IFrameworkElementStatics
    // method not needed: get_Triggers
    // method not needed: get_Resources
    // method not needed: put_Resources
    // method not needed: get_Tag
    // method not needed: put_Tag
    // method not needed: get_Language
    // method not needed: put_Language
    // method not needed: get_ActualWidth
    // method not needed: get_ActualHeight
    // method not needed: get_Width
    // method not needed: put_Width
    // method not needed: get_Height
    // method not needed: put_Height
    // method not needed: get_MinWidth
    // method not needed: put_MinWidth
    // method not needed: get_MaxWidth
    // method not needed: put_MaxWidth
    // method not needed: get_MinHeight
    // method not needed: put_MinHeight
    // method not needed: get_MaxHeight
    // method not needed: put_MaxHeight
    // method not needed: get_HorizontalAlignment
    // method not needed: put_HorizontalAlignment
    // method not needed: get_VerticalAlignment
    // method not needed: put_VerticalAlignment
    // method not needed: get_Margin
    // method not needed: put_Margin
    // method not needed: get_Name
    // method not needed: put_Name
    // method not needed: get_BaseUri
    // method not needed: get_DataContext
    // method not needed: put_DataContext
    // method not needed: get_AllowFocusOnInteraction
    // method not needed: put_AllowFocusOnInteraction
    // method not needed: get_FocusVisualMargin
    // method not needed: put_FocusVisualMargin
    // method not needed: get_FocusVisualSecondaryThickness
    // method not needed: put_FocusVisualSecondaryThickness
    // method not needed: get_FocusVisualPrimaryThickness
    // method not needed: put_FocusVisualPrimaryThickness
    // method not needed: get_FocusVisualSecondaryBrush
    // method not needed: put_FocusVisualSecondaryBrush
    // method not needed: get_FocusVisualPrimaryBrush
    // method not needed: put_FocusVisualPrimaryBrush
    // method not needed: get_AllowFocusWhenDisabled
    // method not needed: put_AllowFocusWhenDisabled
    // method not needed: get_Style
    // method not needed: put_Style
    // method not needed: get_Parent
    // method not needed: get_FlowDirection
    // method not needed: put_FlowDirection
    // method not needed: get_RequestedTheme
    // method not needed: put_RequestedTheme
    // method not needed: get_IsLoaded
    // method not needed: get_ActualTheme
    // method not needed: add_Loaded
    // method not needed: remove_Loaded
    // method not needed: add_Unloaded
    // method not needed: remove_Unloaded
    // method not needed: add_DataContextChanged
    // method not needed: remove_DataContextChanged
    // method not needed: add_SizeChanged
    // method not needed: remove_SizeChanged
    // method not needed: add_LayoutUpdated
    // method not needed: remove_LayoutUpdated
    // method not needed: add_Loading
    // method not needed: remove_Loading
    // method not needed: add_ActualThemeChanged
    // method not needed: remove_ActualThemeChanged
    // method not needed: add_EffectiveViewportChanged
    // method not needed: remove_EffectiveViewportChanged
    // method not needed: FindName
    // method not needed: SetBinding
    // method not needed: GetBindingExpression
    // instance interface not needed: Microsoft.UI.Xaml.IFrameworkElementProtected
    // instance interface not needed: Microsoft.UI.Xaml.IFrameworkElementOverrides
}

// type: Microsoft.UI.Xaml.IApplication
// interface type
open class IApplication
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x06a8f4e7, Data2: 0x1146, Data3 : 0x55af, Data4 : (0x82, 0x0d, 0xeb, 0xd5, 0x56, 0x43, 0xb0, 0x21)) }
    // [IsSpecialName] Microsoft.UI.Xaml.ResourceDictionary get_Resources()
    public func _n_get_Resources(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Resources(pThis, __presult))
        }
    }
    public func get_Resources() throws -> Optional<WinRT.Microsoft.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>> = nil;
        try self._n_get_Resources(&__result);
        return WinRT.Microsoft.UI.Xaml.IResourceDictionary(consuming: __result);
    }
    // [IsSpecialName] void put_Resources(Microsoft.UI.Xaml.ResourceDictionary)
    public func _n_put_Resources(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Resources(pThis, value))
        }
    }
    public func put_Resources(value : Optional<WinRT.Microsoft.UI.Xaml.IResourceDictionary>) throws -> Void {
        try self._n_put_Resources(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DebugSettings get_DebugSettings()
    public func _n_get_DebugSettings(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDebugSettings>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DebugSettings(pThis, __presult))
        }
    }
    public func get_DebugSettings() throws -> Optional<WinRT.Microsoft.UI.Xaml.IDebugSettings> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDebugSettings>> = nil;
        try self._n_get_DebugSettings(&__result);
        return WinRT.Microsoft.UI.Xaml.IDebugSettings(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ApplicationTheme get_RequestedTheme()
    public func _n_get_RequestedTheme(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CApplicationTheme>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedTheme(pThis, __presult))
        }
    }
    public func get_RequestedTheme() throws -> WinRT.Microsoft.UI.Xaml.ApplicationTheme {
        var __result : _q_CMicrosoft_CUI_CXaml_CApplicationTheme = _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Light;
        try self._n_get_RequestedTheme(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequestedTheme(Microsoft.UI.Xaml.ApplicationTheme)
    public func _n_put_RequestedTheme(_ value : _q_CMicrosoft_CUI_CXaml_CApplicationTheme) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedTheme(pThis, value))
        }
    }
    public func put_RequestedTheme(value : WinRT.Microsoft.UI.Xaml.ApplicationTheme) throws -> Void {
        try self._n_put_RequestedTheme(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.FocusVisualKind get_FocusVisualKind()
    public func _n_get_FocusVisualKind(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CFocusVisualKind>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualKind(pThis, __presult))
        }
    }
    public func get_FocusVisualKind() throws -> WinRT.Microsoft.UI.Xaml.FocusVisualKind {
        var __result : _q_CMicrosoft_CUI_CXaml_CFocusVisualKind = _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine;
        try self._n_get_FocusVisualKind(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualKind(Microsoft.UI.Xaml.FocusVisualKind)
    public func _n_put_FocusVisualKind(_ value : _q_CMicrosoft_CUI_CXaml_CFocusVisualKind) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualKind(pThis, value))
        }
    }
    public func put_FocusVisualKind(value : WinRT.Microsoft.UI.Xaml.FocusVisualKind) throws -> Void {
        try self._n_put_FocusVisualKind(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ApplicationHighContrastAdjustment get_HighContrastAdjustment()
    public func _n_get_HighContrastAdjustment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastAdjustment(pThis, __presult))
        }
    }
    public func get_HighContrastAdjustment() throws -> WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        var __result : _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        try self._n_get_HighContrastAdjustment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HighContrastAdjustment(Microsoft.UI.Xaml.ApplicationHighContrastAdjustment)
    public func _n_put_HighContrastAdjustment(_ value : _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighContrastAdjustment(pThis, value))
        }
    }
    public func put_HighContrastAdjustment(value : WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        try self._n_put_HighContrastAdjustment(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_UnhandledException(Microsoft.UI.Xaml.UnhandledExceptionEventHandler)
    public func _n_add_UnhandledException(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_UnhandledException(pThis, handler, __presult))
        }
    }
    public func add_UnhandledException(handler : Optional<WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_UnhandledException(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_UnhandledException(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_UnhandledException(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UnhandledException(pThis, token))
        }
    }
    public func remove_UnhandledException(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_UnhandledException(token);
    }
    // void Exit()
    public func _n_Exit() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Exit(pThis))
        }
    }
    public func Exit() throws -> Void {
        try self._n_Exit();
    }
    public var DebugSettings : Optional<WinRT.Microsoft.UI.Xaml.IDebugSettings> {
        get throws {
            return try get_DebugSettings();
        }
    }
    public var FocusVisualKind : WinRT.Microsoft.UI.Xaml.FocusVisualKind {
        get throws {
            return try get_FocusVisualKind();
        }
    }
    public var HighContrastAdjustment : WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
            return try get_HighContrastAdjustment();
        }
    }
    public var RequestedTheme : WinRT.Microsoft.UI.Xaml.ApplicationTheme {
        get throws {
            return try get_RequestedTheme();
        }
    }
    public var Resources : Optional<WinRT.Microsoft.UI.Xaml.IResourceDictionary> {
        get throws {
            return try get_Resources();
        }
    }
} // IApplication


// type: Microsoft.UI.Xaml.IApplicationFactory
// interface type
// COMPOSITION INTERFACE
open class IApplicationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9fd96657, Data2: 0x5294, Data3 : 0x5a65, Data4 : (0xa1, 0xdb, 0x4f, 0xea, 0x14, 0x35, 0x97, 0xda)) }
    // Microsoft.UI.Xaml.Application CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IApplication(consuming: __result);
    }
} // IApplicationFactory


// type: Microsoft.UI.Xaml.IApplicationInitializationCallbackParams
// interface type
open class IApplicationInitializationCallbackParams
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1b1906ea, Data2: 0x5b7b, Data3 : 0x5876, Data4 : (0x81, 0xab, 0x7c, 0x22, 0x81, 0xac, 0x3d, 0x20)) }
} // IApplicationInitializationCallbackParams


// type: Microsoft.UI.Xaml.IApplicationOverrides
// interface type
open class IApplicationOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa33e81ef, Data2: 0xc665, Data3 : 0x503b, Data4 : (0x88, 0x27, 0xd2, 0x7e, 0xf1, 0x72, 0x0a, 0x06)) }
    // void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs)
    public func _n_OnLaunched(_ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnLaunched(pThis, args))
        }
    }
    public func OnLaunched(args : Optional<WinRT.Microsoft.UI.Xaml.ILaunchActivatedEventArgs>) throws -> Void {
        try self._n_OnLaunched(RawPointer(args));
    }
} // IApplicationOverrides

// impl interface type
open class ApplicationOverrides
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIApplicationOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, WinRT.Microsoft.UI.Xaml.IApplicationOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = ApplicationOverrides.from($0)
        _ = instance?.retain()
        let __res = ULONG(_getRetainCount(instance!.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let instance = ApplicationOverrides.from($0)
        let __res = ULONG(_getRetainCount(instance!.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        mem.pointee = WinRT.Microsoft.UI.Xaml.IApplicationOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.IApplicationOverrides").hRef.hString
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = TrustLevel.FullTrust;
        return S_OK;
    },
    OnLaunched: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnLaunched(args: WinRT.Microsoft.UI.Xaml.LaunchActivatedEventArgs(plok: WinRT.Microsoft.UI.Xaml.ILaunchActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides
        public var wrapper: Unmanaged<ApplicationOverrides>?
    }
    private var instance: WithTrailingObjects
    private var _app: Optional<Microsoft.UI.Xaml.Application>
    private var _inner: Optional<WinRT.IInspectable>

    public init() throws {
        self.instance = WithTrailingObjects(super: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides(lpVtbl: &Self.vtable), wrapper: nil)
        self._app = nil
        self._inner = nil
        self.instance.wrapper = Unmanaged<ApplicationOverrides>.passUnretained(self)
        self._app = try Microsoft.UI.Xaml.Application(baseInterface: self.Interface().QueryInterface(), innerInterface: &self._inner)
    }
    private static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<ApplicationOverrides>? {
        return pUnk?.bindMemory(to: ApplicationOverrides.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    public func Interface() -> WinRT.Microsoft.UI.Xaml.IApplicationOverrides {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Microsoft.UI.Xaml.IApplicationOverrides(UnsafeMutableRawPointer($0))
        }
    }
    open func OnLaunched(args : Optional<WinRT.Microsoft.UI.Xaml.LaunchActivatedEventArgs>) throws -> Void {
    }
}

// type: Microsoft.UI.Xaml.IApplicationStatics
// interface type
open class IApplicationStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4e0d09f5, Data2: 0x4358, Data3 : 0x512c, Data4 : (0xa9, 0x87, 0x50, 0x3b, 0x52, 0x84, 0x8e, 0x95)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Application get_Current()
    public func _n_get_Current(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, __presult))
        }
    }
    public func get_Current() throws -> Optional<WinRT.Microsoft.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>> = nil;
        try self._n_get_Current(&__result);
        return WinRT.Microsoft.UI.Xaml.IApplication(consuming: __result);
    }
    // void Start(Microsoft.UI.Xaml.ApplicationInitializationCallback)
    public func _n_Start(_ callback : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis, callback))
        }
    }
    public func Start(callback : Optional<WinRT.Microsoft.UI.Xaml.IApplicationInitializationCallback>) throws -> Void {
        try self._n_Start(RawPointer(callback));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri)
    public func _n_LoadComponent(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponent(pThis, component, resourceLocator))
        }
    }
    public func LoadComponent(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_LoadComponent(RawPointer(component), RawPointer(resourceLocator));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri, Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation)
    public func _n_LoadComponentWithResourceLocation(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ componentResourceLocation : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponentWithResourceLocation(pThis, component, resourceLocator, componentResourceLocation))
        }
    }
    public func LoadComponentWithResourceLocation(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.IUriRuntimeClass>, componentResourceLocation : WinRT.Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        try self._n_LoadComponentWithResourceLocation(RawPointer(component), RawPointer(resourceLocator), componentResourceLocation);
    }
    public var Current : Optional<WinRT.Microsoft.UI.Xaml.IApplication> {
        get throws {
            return try get_Current();
        }
    }
} // IApplicationStatics


// type: Microsoft.UI.Xaml.IDebugSettings
// interface type
open class IDebugSettings
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4004943b, Data2: 0x2509, Data3 : 0x5476, Data4 : (0xbb, 0xa2, 0x3f, 0xe0, 0x5e, 0xcf, 0x61, 0x5d)) }
// method not needed: get_EnableFrameRateCounter
// method not needed: put_EnableFrameRateCounter
// method not needed: get_IsBindingTracingEnabled
// method not needed: put_IsBindingTracingEnabled
// method not needed: get_IsTextPerformanceVisualizationEnabled
// method not needed: put_IsTextPerformanceVisualizationEnabled
// method not needed: get_FailFastOnErrors
// method not needed: put_FailFastOnErrors
// method not needed: add_BindingFailed
// method not needed: remove_BindingFailed
} // IDebugSettings


// type: Microsoft.UI.Xaml.IDependencyObject
// interface type
open class IDependencyObject
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe7beaee7, Data2: 0x160e, Data3 : 0x50f7, Data4 : (0x87, 0x89, 0xd6, 0x34, 0x63, 0xf9, 0x79, 0xfa)) }
// method not needed: GetValue
// method not needed: SetValue
// method not needed: ClearValue
// method not needed: ReadLocalValue
// method not needed: GetAnimationBaseValue
// method not needed: RegisterPropertyChangedCallback
// method not needed: UnregisterPropertyChangedCallback
// method not needed: get_Dispatcher
// method not needed: get_DispatcherQueue
} // IDependencyObject


// type: Microsoft.UI.Xaml.IDependencyObjectFactory
// interface type
// COMPOSITION INTERFACE
open class IDependencyObjectFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x936b614c, Data2: 0x475f, Data3 : 0x5d7d, Data4 : (0xb3, 0xf7, 0xbf, 0x1f, 0xbe, 0xa2, 0x81, 0x26)) }
    // Microsoft.UI.Xaml.DependencyObject CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
} // IDependencyObjectFactory


// type: Microsoft.UI.Xaml.IDependencyProperty
// interface type
open class IDependencyProperty
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x960eab49, Data2: 0x9672, Data3 : 0x58a0, Data4 : (0x99, 0x5b, 0x3a, 0x42, 0xe5, 0xea, 0x62, 0x78)) }
// method not needed: GetMetadata
} // IDependencyProperty


// type: Microsoft.UI.Xaml.IFrameworkElement
// interface type
open class IFrameworkElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe08f13d, Data2: 0xdc6a, Data3 : 0x5495, Data4 : (0xad, 0x44, 0xc2, 0xd8, 0xd2, 0x18, 0x63, 0xb0)) }
// method not needed: get_Triggers
// method not needed: get_Resources
// method not needed: put_Resources
// method not needed: get_Tag
// method not needed: put_Tag
// method not needed: get_Language
// method not needed: put_Language
// method not needed: get_ActualWidth
// method not needed: get_ActualHeight
// method not needed: get_Width
// method not needed: put_Width
// method not needed: get_Height
// method not needed: put_Height
// method not needed: get_MinWidth
// method not needed: put_MinWidth
// method not needed: get_MaxWidth
// method not needed: put_MaxWidth
// method not needed: get_MinHeight
// method not needed: put_MinHeight
// method not needed: get_MaxHeight
// method not needed: put_MaxHeight
// method not needed: get_HorizontalAlignment
// method not needed: put_HorizontalAlignment
// method not needed: get_VerticalAlignment
// method not needed: put_VerticalAlignment
// method not needed: get_Margin
// method not needed: put_Margin
// method not needed: get_Name
// method not needed: put_Name
// method not needed: get_BaseUri
// method not needed: get_DataContext
// method not needed: put_DataContext
// method not needed: get_AllowFocusOnInteraction
// method not needed: put_AllowFocusOnInteraction
// method not needed: get_FocusVisualMargin
// method not needed: put_FocusVisualMargin
// method not needed: get_FocusVisualSecondaryThickness
// method not needed: put_FocusVisualSecondaryThickness
// method not needed: get_FocusVisualPrimaryThickness
// method not needed: put_FocusVisualPrimaryThickness
// method not needed: get_FocusVisualSecondaryBrush
// method not needed: put_FocusVisualSecondaryBrush
// method not needed: get_FocusVisualPrimaryBrush
// method not needed: put_FocusVisualPrimaryBrush
// method not needed: get_AllowFocusWhenDisabled
// method not needed: put_AllowFocusWhenDisabled
// method not needed: get_Style
// method not needed: put_Style
// method not needed: get_Parent
// method not needed: get_FlowDirection
// method not needed: put_FlowDirection
// method not needed: get_RequestedTheme
// method not needed: put_RequestedTheme
// method not needed: get_IsLoaded
// method not needed: get_ActualTheme
// method not needed: add_Loaded
// method not needed: remove_Loaded
// method not needed: add_Unloaded
// method not needed: remove_Unloaded
// method not needed: add_DataContextChanged
// method not needed: remove_DataContextChanged
// method not needed: add_SizeChanged
// method not needed: remove_SizeChanged
// method not needed: add_LayoutUpdated
// method not needed: remove_LayoutUpdated
// method not needed: add_Loading
// method not needed: remove_Loading
// method not needed: add_ActualThemeChanged
// method not needed: remove_ActualThemeChanged
// method not needed: add_EffectiveViewportChanged
// method not needed: remove_EffectiveViewportChanged
// method not needed: FindName
// method not needed: SetBinding
// method not needed: GetBindingExpression
} // IFrameworkElement


// type: Microsoft.UI.Xaml.IFrameworkElementFactory
// interface type
// COMPOSITION INTERFACE
open class IFrameworkElementFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd3f2272, Data2: 0x3efa, Data3 : 0x5f92, Data4 : (0xb7, 0x59, 0x90, 0xb1, 0xcc, 0x3e, 0x78, 0x4c)) }
    // Microsoft.UI.Xaml.FrameworkElement CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IFrameworkElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IFrameworkElement(consuming: __result);
    }
} // IFrameworkElementFactory


// type: Microsoft.UI.Xaml.ILaunchActivatedEventArgs
// interface type
open class ILaunchActivatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd505cea9, Data2: 0x1bcb, Data3 : 0x5b29, Data4 : (0xa8, 0xbe, 0x94, 0x4e, 0x00, 0xf0, 0x6f, 0x78)) }
// method not needed: get_Arguments
// method not needed: get_UWPLaunchActivatedEventArgs
} // ILaunchActivatedEventArgs


// type: Microsoft.UI.Xaml.IResourceDictionary
// interface type
open class IResourceDictionary
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1b690975, Data2: 0xa710, Data3 : 0x5783, Data4 : (0xa6, 0xe1, 0x15, 0x83, 0x6f, 0x61, 0x86, 0xc2)) }
// method not needed: get_Source
// method not needed: put_Source
// method not needed: get_MergedDictionaries
// method not needed: get_ThemeDictionaries
} // IResourceDictionary


// type: Microsoft.UI.Xaml.IResourceDictionaryFactory
// interface type
// COMPOSITION INTERFACE
open class IResourceDictionaryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xea22a48f, Data2: 0xab71, Data3 : 0x56f6, Data4 : (0xa3, 0x92, 0xd8, 0x23, 0x10, 0xc8, 0xaa, 0x7b)) }
    // Microsoft.UI.Xaml.ResourceDictionary CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IResourceDictionary(consuming: __result);
    }
} // IResourceDictionaryFactory


// type: Microsoft.UI.Xaml.IRoutedEventArgs
// interface type
open class IRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0908c407, Data2: 0x1c7d, Data3 : 0x5de3, Data4 : (0x9c, 0x50, 0xd9, 0x71, 0xc6, 0x2e, 0xc8, 0xec)) }
// method not needed: get_OriginalSource
} // IRoutedEventArgs


// type: Microsoft.UI.Xaml.IRoutedEventArgsFactory
// interface type
// COMPOSITION INTERFACE
open class IRoutedEventArgsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x914b02c7, Data2: 0x076b, Data3 : 0x5b89, Data4 : (0x98, 0xe7, 0x6c, 0x37, 0x33, 0x79, 0xe9, 0xaf)) }
    // Microsoft.UI.Xaml.RoutedEventArgs CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IRoutedEventArgs> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IRoutedEventArgs(consuming: __result);
    }
} // IRoutedEventArgsFactory


// type: Microsoft.UI.Xaml.IUIElement
// interface type
open class IUIElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc3c01020, Data2: 0x320c, Data3 : 0x5cf6, Data4 : (0x9d, 0x24, 0xd3, 0x96, 0xbb, 0xfa, 0x4d, 0x8b)) }
// method not needed: get_DesiredSize
// method not needed: get_AllowDrop
// method not needed: put_AllowDrop
// method not needed: get_Opacity
// method not needed: put_Opacity
// method not needed: get_Clip
// method not needed: put_Clip
// method not needed: get_RenderTransform
// method not needed: put_RenderTransform
// method not needed: get_Projection
// method not needed: put_Projection
// method not needed: get_Transform3D
// method not needed: put_Transform3D
// method not needed: get_RenderTransformOrigin
// method not needed: put_RenderTransformOrigin
// method not needed: get_IsHitTestVisible
// method not needed: put_IsHitTestVisible
// method not needed: get_Visibility
// method not needed: put_Visibility
// method not needed: get_RenderSize
// method not needed: get_UseLayoutRounding
// method not needed: put_UseLayoutRounding
// method not needed: get_Transitions
// method not needed: put_Transitions
// method not needed: get_CacheMode
// method not needed: put_CacheMode
// method not needed: get_IsTapEnabled
// method not needed: put_IsTapEnabled
// method not needed: get_IsDoubleTapEnabled
// method not needed: put_IsDoubleTapEnabled
// method not needed: get_CanDrag
// method not needed: put_CanDrag
// method not needed: get_IsRightTapEnabled
// method not needed: put_IsRightTapEnabled
// method not needed: get_IsHoldingEnabled
// method not needed: put_IsHoldingEnabled
// method not needed: get_ManipulationMode
// method not needed: put_ManipulationMode
// method not needed: get_PointerCaptures
// method not needed: get_ContextFlyout
// method not needed: put_ContextFlyout
// method not needed: get_CompositeMode
// method not needed: put_CompositeMode
// method not needed: get_Lights
// method not needed: get_CanBeScrollAnchor
// method not needed: put_CanBeScrollAnchor
// method not needed: get_ExitDisplayModeOnAccessKeyInvoked
// method not needed: put_ExitDisplayModeOnAccessKeyInvoked
// method not needed: get_IsAccessKeyScope
// method not needed: put_IsAccessKeyScope
// method not needed: get_AccessKeyScopeOwner
// method not needed: put_AccessKeyScopeOwner
// method not needed: get_AccessKey
// method not needed: put_AccessKey
// method not needed: get_KeyTipPlacementMode
// method not needed: put_KeyTipPlacementMode
// method not needed: get_KeyTipHorizontalOffset
// method not needed: put_KeyTipHorizontalOffset
// method not needed: get_KeyTipVerticalOffset
// method not needed: put_KeyTipVerticalOffset
// method not needed: get_KeyTipTarget
// method not needed: put_KeyTipTarget
// method not needed: get_XYFocusKeyboardNavigation
// method not needed: put_XYFocusKeyboardNavigation
// method not needed: get_XYFocusUpNavigationStrategy
// method not needed: put_XYFocusUpNavigationStrategy
// method not needed: get_XYFocusDownNavigationStrategy
// method not needed: put_XYFocusDownNavigationStrategy
// method not needed: get_XYFocusLeftNavigationStrategy
// method not needed: put_XYFocusLeftNavigationStrategy
// method not needed: get_XYFocusRightNavigationStrategy
// method not needed: put_XYFocusRightNavigationStrategy
// method not needed: get_KeyboardAccelerators
// method not needed: get_KeyboardAcceleratorPlacementTarget
// method not needed: put_KeyboardAcceleratorPlacementTarget
// method not needed: get_KeyboardAcceleratorPlacementMode
// method not needed: put_KeyboardAcceleratorPlacementMode
// method not needed: get_HighContrastAdjustment
// method not needed: put_HighContrastAdjustment
// method not needed: get_TabFocusNavigation
// method not needed: put_TabFocusNavigation
// method not needed: get_OpacityTransition
// method not needed: put_OpacityTransition
// method not needed: get_Translation
// method not needed: put_Translation
// method not needed: get_TranslationTransition
// method not needed: put_TranslationTransition
// method not needed: get_Rotation
// method not needed: put_Rotation
// method not needed: get_RotationTransition
// method not needed: put_RotationTransition
// method not needed: get_Scale
// method not needed: put_Scale
// method not needed: get_ScaleTransition
// method not needed: put_ScaleTransition
// method not needed: get_TransformMatrix
// method not needed: put_TransformMatrix
// method not needed: get_CenterPoint
// method not needed: put_CenterPoint
// method not needed: get_RotationAxis
// method not needed: put_RotationAxis
// method not needed: get_ActualOffset
// method not needed: get_ActualSize
// method not needed: get_XamlRoot
// method not needed: put_XamlRoot
// method not needed: get_Shadow
// method not needed: put_Shadow
// method not needed: get_RasterizationScale
// method not needed: put_RasterizationScale
// method not needed: get_FocusState
// method not needed: get_UseSystemFocusVisuals
// method not needed: put_UseSystemFocusVisuals
// method not needed: get_XYFocusLeft
// method not needed: put_XYFocusLeft
// method not needed: get_XYFocusRight
// method not needed: put_XYFocusRight
// method not needed: get_XYFocusUp
// method not needed: put_XYFocusUp
// method not needed: get_XYFocusDown
// method not needed: put_XYFocusDown
// method not needed: get_IsTabStop
// method not needed: put_IsTabStop
// method not needed: get_TabIndex
// method not needed: put_TabIndex
// method not needed: add_KeyUp
// method not needed: remove_KeyUp
// method not needed: add_KeyDown
// method not needed: remove_KeyDown
// method not needed: add_GotFocus
// method not needed: remove_GotFocus
// method not needed: add_LostFocus
// method not needed: remove_LostFocus
// method not needed: add_DragStarting
// method not needed: remove_DragStarting
// method not needed: add_DropCompleted
// method not needed: remove_DropCompleted
// method not needed: add_CharacterReceived
// method not needed: remove_CharacterReceived
// method not needed: add_DragEnter
// method not needed: remove_DragEnter
// method not needed: add_DragLeave
// method not needed: remove_DragLeave
// method not needed: add_DragOver
// method not needed: remove_DragOver
// method not needed: add_Drop
// method not needed: remove_Drop
// method not needed: add_PointerPressed
// method not needed: remove_PointerPressed
// method not needed: add_PointerMoved
// method not needed: remove_PointerMoved
// method not needed: add_PointerReleased
// method not needed: remove_PointerReleased
// method not needed: add_PointerEntered
// method not needed: remove_PointerEntered
// method not needed: add_PointerExited
// method not needed: remove_PointerExited
// method not needed: add_PointerCaptureLost
// method not needed: remove_PointerCaptureLost
// method not needed: add_PointerCanceled
// method not needed: remove_PointerCanceled
// method not needed: add_PointerWheelChanged
// method not needed: remove_PointerWheelChanged
// method not needed: add_Tapped
// method not needed: remove_Tapped
// method not needed: add_DoubleTapped
// method not needed: remove_DoubleTapped
// method not needed: add_Holding
// method not needed: remove_Holding
// method not needed: add_ContextRequested
// method not needed: remove_ContextRequested
// method not needed: add_ContextCanceled
// method not needed: remove_ContextCanceled
// method not needed: add_RightTapped
// method not needed: remove_RightTapped
// method not needed: add_ManipulationStarting
// method not needed: remove_ManipulationStarting
// method not needed: add_ManipulationInertiaStarting
// method not needed: remove_ManipulationInertiaStarting
// method not needed: add_ManipulationStarted
// method not needed: remove_ManipulationStarted
// method not needed: add_ManipulationDelta
// method not needed: remove_ManipulationDelta
// method not needed: add_ManipulationCompleted
// method not needed: remove_ManipulationCompleted
// method not needed: add_AccessKeyDisplayRequested
// method not needed: remove_AccessKeyDisplayRequested
// method not needed: add_AccessKeyDisplayDismissed
// method not needed: remove_AccessKeyDisplayDismissed
// method not needed: add_AccessKeyInvoked
// method not needed: remove_AccessKeyInvoked
// method not needed: add_ProcessKeyboardAccelerators
// method not needed: remove_ProcessKeyboardAccelerators
// method not needed: add_GettingFocus
// method not needed: remove_GettingFocus
// method not needed: add_LosingFocus
// method not needed: remove_LosingFocus
// method not needed: add_NoFocusCandidateFound
// method not needed: remove_NoFocusCandidateFound
// method not needed: add_PreviewKeyDown
// method not needed: remove_PreviewKeyDown
// method not needed: add_PreviewKeyUp
// method not needed: remove_PreviewKeyUp
// method not needed: add_BringIntoViewRequested
// method not needed: remove_BringIntoViewRequested
// method not needed: Measure
// method not needed: Arrange
// method not needed: CapturePointer
// method not needed: ReleasePointerCapture
// method not needed: ReleasePointerCaptures
// method not needed: AddHandler
// method not needed: RemoveHandler
// method not needed: TransformToVisual
// method not needed: InvalidateMeasure
// method not needed: InvalidateArrange
// method not needed: UpdateLayout
// method not needed: CancelDirectManipulations
// method not needed: StartDragAsync
// method not needed: StartBringIntoView
// method not needed: StartBringIntoViewWithOptions
// method not needed: TryInvokeKeyboardAccelerator
// method not needed: Focus
// method not needed: StartAnimation
// method not needed: StopAnimation
} // IUIElement


// type: Microsoft.UI.Xaml.IUnhandledExceptionEventArgs
// interface type
open class IUnhandledExceptionEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x59eaeba9, Data2: 0x8f9c, Data3 : 0x5be7, Data4 : (0x9b, 0x3b, 0x82, 0x09, 0x60, 0xfa, 0xa2, 0x20)) }
// method not needed: get_Exception
// method not needed: get_Message
// method not needed: get_Handled
// method not needed: put_Handled
} // IUnhandledExceptionEventArgs


// type: Microsoft.UI.Xaml.IWindow
// interface type
open class IWindow
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61f0ec79, Data2: 0x5d52, Data3 : 0x56b5, Data4 : (0x86, 0xfb, 0x40, 0xfa, 0x4a, 0xf2, 0x88, 0xb0)) }
    // [IsSpecialName] Windows.Foundation.Rect get_Bounds()
    public func _n_get_Bounds(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, __presult))
        }
    }
    public func get_Bounds() throws -> WinRT.Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_Bounds(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Visible()
    public func _n_get_Visible(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Visible(pThis, __presult))
        }
    }
    public func get_Visible() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Visible(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.UIElement get_Content()
    public func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<WinRT.Microsoft.UI.Xaml.IUIElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>> = nil;
        try self._n_get_Content(&__result);
        return WinRT.Microsoft.UI.Xaml.IUIElement(consuming: __result);
    }
    // [IsSpecialName] void put_Content(Microsoft.UI.Xaml.UIElement)
    public func _n_put_Content(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<WinRT.Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Core.CoreWindow get_CoreWindow()
    public func _n_get_CoreWindow(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWindow(pThis, __presult))
        }
    }
    public func get_CoreWindow() throws -> Optional<WinRT.Windows.UI.Core.ICoreWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreWindow>> = nil;
        try self._n_get_CoreWindow(&__result);
        return WinRT.Windows.UI.Core.ICoreWindow(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Composition.Compositor get_Compositor()
    public func _n_get_Compositor(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositor>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Compositor(pThis, __presult))
        }
    }
    public func get_Compositor() throws -> Optional<WinRT.Microsoft.UI.Composition.ICompositor> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositor>> = nil;
        try self._n_get_Compositor(&__result);
        return WinRT.Microsoft.UI.Composition.ICompositor(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Core.CoreDispatcher get_Dispatcher()
    public func _n_get_Dispatcher(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dispatcher(pThis, __presult))
        }
    }
    public func get_Dispatcher() throws -> Optional<WinRT.Windows.UI.Core.ICoreDispatcher> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>> = nil;
        try self._n_get_Dispatcher(&__result);
        return WinRT.Windows.UI.Core.ICoreDispatcher(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue()
    public func _n_get_DispatcherQueue(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, __presult))
        }
    }
    public func get_DispatcherQueue() throws -> Optional<WinRT.Microsoft.UI.Dispatching.IDispatcherQueue> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>> = nil;
        try self._n_get_DispatcherQueue(&__result);
        return WinRT.Microsoft.UI.Dispatching.IDispatcherQueue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Title()
    public func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    public func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.hRef.hString);
        }
    }
    // [IsSpecialName] bool get_ExtendsContentIntoTitleBar()
    public func _n_get_ExtendsContentIntoTitleBar(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendsContentIntoTitleBar(pThis, __presult))
        }
    }
    public func get_ExtendsContentIntoTitleBar() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ExtendsContentIntoTitleBar(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendsContentIntoTitleBar(bool)
    public func _n_put_ExtendsContentIntoTitleBar(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendsContentIntoTitleBar(pThis, value))
        }
    }
    public func put_ExtendsContentIntoTitleBar(value : boolean) throws -> Void {
        try self._n_put_ExtendsContentIntoTitleBar(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Activated(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowActivatedEventArgs>)
    public func _n_add_Activated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Activated(pThis, handler, __presult))
        }
    }
    public func add_Activated(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Activated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Activated(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_Activated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Activated(pThis, token))
        }
    }
    public func remove_Activated(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Activated(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closed(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowEventArgs>)
    public func _n_add_Closed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, handler, __presult))
        }
    }
    public func add_Closed(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closed(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_Closed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
        }
    }
    public func remove_Closed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SizeChanged(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowSizeChangedEventArgs>)
    public func _n_add_SizeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SizeChanged(pThis, handler, __presult))
        }
    }
    public func add_SizeChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SizeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_SizeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SizeChanged(pThis, token))
        }
    }
    public func remove_SizeChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SizeChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_VisibilityChanged(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>)
    public func _n_add_VisibilityChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_VisibilityChanged(pThis, handler, __presult))
        }
    }
    public func add_VisibilityChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_VisibilityChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_VisibilityChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_VisibilityChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VisibilityChanged(pThis, token))
        }
    }
    public func remove_VisibilityChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_VisibilityChanged(token);
    }
    // void Activate()
    public func _n_Activate() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Activate(pThis))
        }
    }
    public func Activate() throws -> Void {
        try self._n_Activate();
    }
    // void Close()
    public func _n_Close() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
    // void SetTitleBar(Microsoft.UI.Xaml.UIElement)
    public func _n_SetTitleBar(_ titleBar : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetTitleBar(pThis, titleBar))
        }
    }
    public func SetTitleBar(titleBar : Optional<WinRT.Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_SetTitleBar(RawPointer(titleBar));
    }
    public var Bounds : WinRT.Windows.Foundation.Rect {
        get throws {
            return try get_Bounds();
        }
    }
    public var Compositor : Optional<WinRT.Microsoft.UI.Composition.ICompositor> {
        get throws {
            return try get_Compositor();
        }
    }
    public var Content : Optional<WinRT.Microsoft.UI.Xaml.IUIElement> {
        get throws {
            return try get_Content();
        }
    }
    public var CoreWindow : Optional<WinRT.Windows.UI.Core.ICoreWindow> {
        get throws {
            return try get_CoreWindow();
        }
    }
    public var Dispatcher : Optional<WinRT.Windows.UI.Core.ICoreDispatcher> {
        get throws {
            return try get_Dispatcher();
        }
    }
    public var DispatcherQueue : Optional<WinRT.Microsoft.UI.Dispatching.IDispatcherQueue> {
        get throws {
            return try get_DispatcherQueue();
        }
    }
    public var ExtendsContentIntoTitleBar : boolean {
        get throws {
            return try get_ExtendsContentIntoTitleBar();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
    public var Visible : boolean {
        get throws {
            return try get_Visible();
        }
    }
} // IWindow


// type: Microsoft.UI.Xaml.IWindowActivatedEventArgs
// interface type
open class IWindowActivatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc723a5ea, Data2: 0x82c4, Data3 : 0x5dd6, Data4 : (0x86, 0x1b, 0x70, 0xef, 0x57, 0x3b, 0x88, 0xd6)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_WindowActivationState
} // IWindowActivatedEventArgs


// type: Microsoft.UI.Xaml.IWindowEventArgs
// interface type
open class IWindowEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1140827c, Data2: 0xfe0a, Data3 : 0x5268, Data4 : (0xbc, 0x2b, 0xf4, 0x49, 0x2c, 0x2c, 0xcb, 0x49)) }
// method not needed: get_Handled
// method not needed: put_Handled
} // IWindowEventArgs


// type: Microsoft.UI.Xaml.IWindowFactory
// interface type
// COMPOSITION INTERFACE
open class IWindowFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf0441536, Data2: 0xafef, Data3 : 0x5222, Data4 : (0x91, 0x8f, 0x32, 0x4a, 0x9b, 0x2d, 0xec, 0x75)) }
    // Microsoft.UI.Xaml.Window CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindowFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.IWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.IWindow(consuming: __result);
    }
} // IWindowFactory


// type: Microsoft.UI.Xaml.IWindowSizeChangedEventArgs
// interface type
open class IWindowSizeChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x542f6f2c, Data2: 0x4b64, Data3 : 0x5c72, Data4 : (0xa7, 0xa5, 0x3a, 0x7e, 0x06, 0x64, 0xb8, 0xff)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Size
} // IWindowSizeChangedEventArgs


// type: Microsoft.UI.Xaml.IWindowStatics
// interface type
open class IWindowStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8cc985e3, Data2: 0xa41a, Data3 : 0x5df4, Data4 : (0xb5, 0x31, 0xd3, 0xa1, 0x78, 0x8d, 0x86, 0xc5)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Window get_Current()
    public func _n_get_Current(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindowStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, __presult))
        }
    }
    public func get_Current() throws -> Optional<WinRT.Microsoft.UI.Xaml.IWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>> = nil;
        try self._n_get_Current(&__result);
        return WinRT.Microsoft.UI.Xaml.IWindow(consuming: __result);
    }
    public var Current : Optional<WinRT.Microsoft.UI.Xaml.IWindow> {
        get throws {
            return try get_Current();
        }
    }
} // IWindowStatics


// type: Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs
// interface type
open class IWindowVisibilityChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7bb24a6d, Data2: 0x070c, Data3 : 0x5cb6, Data4 : (0x8e, 0x9c, 0x54, 0x79, 0x05, 0xbe, 0x82, 0x65)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Visible
} // IWindowVisibilityChangedEventArgs


// type: Microsoft.UI.Xaml.LaunchActivatedEventArgs
// runtime class
public class LaunchActivatedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.ILaunchActivatedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.ILaunchActivatedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.ILaunchActivatedEventArgs { return _self; }
    // method not needed: get_Arguments
    // method not needed: get_UWPLaunchActivatedEventArgs
}

// type: Microsoft.UI.Xaml.LineStackingStrategy
// enum type
public typealias LineStackingStrategy = _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy;

// type: Microsoft.UI.Xaml.OpticalMarginAlignment
// enum type
public typealias OpticalMarginAlignment = _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment;

// type: Microsoft.UI.Xaml.ResourceDictionary
// runtime class
open class ResourceDictionary
{
    private var _self : WinRT.Microsoft.UI.Xaml.IResourceDictionary;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IResourceDictionary?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IResourceDictionary { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IResourceDictionaryFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IResourceDictionaryFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.ResourceDictionary"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    // method not needed: get_Source
    // method not needed: put_Source
    // method not needed: get_MergedDictionaries
    // method not needed: get_ThemeDictionaries
    // instance interface not needed: Windows.Foundation.Collections.IMap`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Foundation.Collections.IKeyValuePair`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.RoutedEventArgs
// runtime class
open class RoutedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IRoutedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IRoutedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IRoutedEventArgs { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IRoutedEventArgsFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IRoutedEventArgsFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.RoutedEventArgs"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    // method not needed: get_OriginalSource
}

// type: Microsoft.UI.Xaml.RoutedEventHandler
// delegate type
open class IRoutedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdae23d85, Data2: 0x69ca, Data3 : 0x5bdf, Data4 : (0x80, 0x5b, 0x61, 0x61, 0xa3, 0xa2, 0x15, 0xcc)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.RoutedEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class RoutedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Microsoft.UI.Xaml.IRoutedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = RoutedEventHandler.from($0)
        _ = instance?.retain()
        let __res = ULONG(_getRetainCount(instance!.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let instance = RoutedEventHandler.from($0)
        let __res = ULONG(_getRetainCount(instance!.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) in
        guard let self = RoutedEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Microsoft.UI.Xaml.RoutedEventArgs(plok: WinRT.Microsoft.UI.Xaml.IRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler
        public var wrapper: Unmanaged<RoutedEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<RoutedEventHandler>.passUnretained(self)
    }
    private static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<RoutedEventHandler>? {
        return pUnk?.bindMemory(to: RoutedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IRoutedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Microsoft.UI.Xaml.IRoutedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.TextAlignment
// enum type
public typealias TextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment;

// type: Microsoft.UI.Xaml.TextLineBounds
// enum type
public typealias TextLineBounds = _q_CMicrosoft_CUI_CXaml_CTextLineBounds;

// type: Microsoft.UI.Xaml.TextReadingOrder
// enum type
public typealias TextReadingOrder = _q_CMicrosoft_CUI_CXaml_CTextReadingOrder;

// type: Microsoft.UI.Xaml.TextTrimming
// enum type
public typealias TextTrimming = _q_CMicrosoft_CUI_CXaml_CTextTrimming;

// type: Microsoft.UI.Xaml.TextWrapping
// enum type
public typealias TextWrapping = _q_CMicrosoft_CUI_CXaml_CTextWrapping;

// type: Microsoft.UI.Xaml.Thickness
// struct type
public typealias Thickness = _q_CMicrosoft_CUI_CXaml_CThickness;

// type: Microsoft.UI.Xaml.UIElement
// runtime class
open class UIElement
{
    private var _self : WinRT.Microsoft.UI.Xaml.IUIElement;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IUIElement?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IUIElement { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IUIElementFactory
// composable interface not needed: Microsoft.UI.Xaml.IUIElementFactory
    // static interface not needed: Microsoft.UI.Xaml.IUIElementStatics
    // method not needed: get_DesiredSize
    // method not needed: get_AllowDrop
    // method not needed: put_AllowDrop
    // method not needed: get_Opacity
    // method not needed: put_Opacity
    // method not needed: get_Clip
    // method not needed: put_Clip
    // method not needed: get_RenderTransform
    // method not needed: put_RenderTransform
    // method not needed: get_Projection
    // method not needed: put_Projection
    // method not needed: get_Transform3D
    // method not needed: put_Transform3D
    // method not needed: get_RenderTransformOrigin
    // method not needed: put_RenderTransformOrigin
    // method not needed: get_IsHitTestVisible
    // method not needed: put_IsHitTestVisible
    // method not needed: get_Visibility
    // method not needed: put_Visibility
    // method not needed: get_RenderSize
    // method not needed: get_UseLayoutRounding
    // method not needed: put_UseLayoutRounding
    // method not needed: get_Transitions
    // method not needed: put_Transitions
    // method not needed: get_CacheMode
    // method not needed: put_CacheMode
    // method not needed: get_IsTapEnabled
    // method not needed: put_IsTapEnabled
    // method not needed: get_IsDoubleTapEnabled
    // method not needed: put_IsDoubleTapEnabled
    // method not needed: get_CanDrag
    // method not needed: put_CanDrag
    // method not needed: get_IsRightTapEnabled
    // method not needed: put_IsRightTapEnabled
    // method not needed: get_IsHoldingEnabled
    // method not needed: put_IsHoldingEnabled
    // method not needed: get_ManipulationMode
    // method not needed: put_ManipulationMode
    // method not needed: get_PointerCaptures
    // method not needed: get_ContextFlyout
    // method not needed: put_ContextFlyout
    // method not needed: get_CompositeMode
    // method not needed: put_CompositeMode
    // method not needed: get_Lights
    // method not needed: get_CanBeScrollAnchor
    // method not needed: put_CanBeScrollAnchor
    // method not needed: get_ExitDisplayModeOnAccessKeyInvoked
    // method not needed: put_ExitDisplayModeOnAccessKeyInvoked
    // method not needed: get_IsAccessKeyScope
    // method not needed: put_IsAccessKeyScope
    // method not needed: get_AccessKeyScopeOwner
    // method not needed: put_AccessKeyScopeOwner
    // method not needed: get_AccessKey
    // method not needed: put_AccessKey
    // method not needed: get_KeyTipPlacementMode
    // method not needed: put_KeyTipPlacementMode
    // method not needed: get_KeyTipHorizontalOffset
    // method not needed: put_KeyTipHorizontalOffset
    // method not needed: get_KeyTipVerticalOffset
    // method not needed: put_KeyTipVerticalOffset
    // method not needed: get_KeyTipTarget
    // method not needed: put_KeyTipTarget
    // method not needed: get_XYFocusKeyboardNavigation
    // method not needed: put_XYFocusKeyboardNavigation
    // method not needed: get_XYFocusUpNavigationStrategy
    // method not needed: put_XYFocusUpNavigationStrategy
    // method not needed: get_XYFocusDownNavigationStrategy
    // method not needed: put_XYFocusDownNavigationStrategy
    // method not needed: get_XYFocusLeftNavigationStrategy
    // method not needed: put_XYFocusLeftNavigationStrategy
    // method not needed: get_XYFocusRightNavigationStrategy
    // method not needed: put_XYFocusRightNavigationStrategy
    // method not needed: get_KeyboardAccelerators
    // method not needed: get_KeyboardAcceleratorPlacementTarget
    // method not needed: put_KeyboardAcceleratorPlacementTarget
    // method not needed: get_KeyboardAcceleratorPlacementMode
    // method not needed: put_KeyboardAcceleratorPlacementMode
    // method not needed: get_HighContrastAdjustment
    // method not needed: put_HighContrastAdjustment
    // method not needed: get_TabFocusNavigation
    // method not needed: put_TabFocusNavigation
    // method not needed: get_OpacityTransition
    // method not needed: put_OpacityTransition
    // method not needed: get_Translation
    // method not needed: put_Translation
    // method not needed: get_TranslationTransition
    // method not needed: put_TranslationTransition
    // method not needed: get_Rotation
    // method not needed: put_Rotation
    // method not needed: get_RotationTransition
    // method not needed: put_RotationTransition
    // method not needed: get_Scale
    // method not needed: put_Scale
    // method not needed: get_ScaleTransition
    // method not needed: put_ScaleTransition
    // method not needed: get_TransformMatrix
    // method not needed: put_TransformMatrix
    // method not needed: get_CenterPoint
    // method not needed: put_CenterPoint
    // method not needed: get_RotationAxis
    // method not needed: put_RotationAxis
    // method not needed: get_ActualOffset
    // method not needed: get_ActualSize
    // method not needed: get_XamlRoot
    // method not needed: put_XamlRoot
    // method not needed: get_Shadow
    // method not needed: put_Shadow
    // method not needed: get_RasterizationScale
    // method not needed: put_RasterizationScale
    // method not needed: get_FocusState
    // method not needed: get_UseSystemFocusVisuals
    // method not needed: put_UseSystemFocusVisuals
    // method not needed: get_XYFocusLeft
    // method not needed: put_XYFocusLeft
    // method not needed: get_XYFocusRight
    // method not needed: put_XYFocusRight
    // method not needed: get_XYFocusUp
    // method not needed: put_XYFocusUp
    // method not needed: get_XYFocusDown
    // method not needed: put_XYFocusDown
    // method not needed: get_IsTabStop
    // method not needed: put_IsTabStop
    // method not needed: get_TabIndex
    // method not needed: put_TabIndex
    // method not needed: add_KeyUp
    // method not needed: remove_KeyUp
    // method not needed: add_KeyDown
    // method not needed: remove_KeyDown
    // method not needed: add_GotFocus
    // method not needed: remove_GotFocus
    // method not needed: add_LostFocus
    // method not needed: remove_LostFocus
    // method not needed: add_DragStarting
    // method not needed: remove_DragStarting
    // method not needed: add_DropCompleted
    // method not needed: remove_DropCompleted
    // method not needed: add_CharacterReceived
    // method not needed: remove_CharacterReceived
    // method not needed: add_DragEnter
    // method not needed: remove_DragEnter
    // method not needed: add_DragLeave
    // method not needed: remove_DragLeave
    // method not needed: add_DragOver
    // method not needed: remove_DragOver
    // method not needed: add_Drop
    // method not needed: remove_Drop
    // method not needed: add_PointerPressed
    // method not needed: remove_PointerPressed
    // method not needed: add_PointerMoved
    // method not needed: remove_PointerMoved
    // method not needed: add_PointerReleased
    // method not needed: remove_PointerReleased
    // method not needed: add_PointerEntered
    // method not needed: remove_PointerEntered
    // method not needed: add_PointerExited
    // method not needed: remove_PointerExited
    // method not needed: add_PointerCaptureLost
    // method not needed: remove_PointerCaptureLost
    // method not needed: add_PointerCanceled
    // method not needed: remove_PointerCanceled
    // method not needed: add_PointerWheelChanged
    // method not needed: remove_PointerWheelChanged
    // method not needed: add_Tapped
    // method not needed: remove_Tapped
    // method not needed: add_DoubleTapped
    // method not needed: remove_DoubleTapped
    // method not needed: add_Holding
    // method not needed: remove_Holding
    // method not needed: add_ContextRequested
    // method not needed: remove_ContextRequested
    // method not needed: add_ContextCanceled
    // method not needed: remove_ContextCanceled
    // method not needed: add_RightTapped
    // method not needed: remove_RightTapped
    // method not needed: add_ManipulationStarting
    // method not needed: remove_ManipulationStarting
    // method not needed: add_ManipulationInertiaStarting
    // method not needed: remove_ManipulationInertiaStarting
    // method not needed: add_ManipulationStarted
    // method not needed: remove_ManipulationStarted
    // method not needed: add_ManipulationDelta
    // method not needed: remove_ManipulationDelta
    // method not needed: add_ManipulationCompleted
    // method not needed: remove_ManipulationCompleted
    // method not needed: add_AccessKeyDisplayRequested
    // method not needed: remove_AccessKeyDisplayRequested
    // method not needed: add_AccessKeyDisplayDismissed
    // method not needed: remove_AccessKeyDisplayDismissed
    // method not needed: add_AccessKeyInvoked
    // method not needed: remove_AccessKeyInvoked
    // method not needed: add_ProcessKeyboardAccelerators
    // method not needed: remove_ProcessKeyboardAccelerators
    // method not needed: add_GettingFocus
    // method not needed: remove_GettingFocus
    // method not needed: add_LosingFocus
    // method not needed: remove_LosingFocus
    // method not needed: add_NoFocusCandidateFound
    // method not needed: remove_NoFocusCandidateFound
    // method not needed: add_PreviewKeyDown
    // method not needed: remove_PreviewKeyDown
    // method not needed: add_PreviewKeyUp
    // method not needed: remove_PreviewKeyUp
    // method not needed: add_BringIntoViewRequested
    // method not needed: remove_BringIntoViewRequested
    // method not needed: Measure
    // method not needed: Arrange
    // method not needed: CapturePointer
    // method not needed: ReleasePointerCapture
    // method not needed: ReleasePointerCaptures
    // method not needed: AddHandler
    // method not needed: RemoveHandler
    // method not needed: TransformToVisual
    // method not needed: InvalidateMeasure
    // method not needed: InvalidateArrange
    // method not needed: UpdateLayout
    // method not needed: CancelDirectManipulations
    // method not needed: StartDragAsync
    // method not needed: StartBringIntoView
    // method not needed: StartBringIntoView
    // method not needed: TryInvokeKeyboardAccelerator
    // method not needed: Focus
    // method not needed: StartAnimation
    // method not needed: StopAnimation
    // instance interface not needed: Microsoft.UI.Xaml.IUIElementProtected
    // instance interface not needed: Microsoft.UI.Xaml.IUIElementOverrides
    // instance interface not needed: Microsoft.UI.Composition.IAnimationObject
    // instance interface not needed: Microsoft.UI.Composition.IVisualElement
    // instance interface not needed: Microsoft.UI.Composition.IVisualElement2
}

// type: Microsoft.UI.Xaml.UnhandledExceptionEventArgs
// runtime class
public class UnhandledExceptionEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs { return _self; }
    // method not needed: get_Exception
    // method not needed: get_Message
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.UnhandledExceptionEventHandler
// delegate type
open class IUnhandledExceptionEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3427c1b6, Data2: 0x5eca, Data3 : 0x5631, Data4 : (0x84, 0xb8, 0x5b, 0xae, 0x73, 0x2f, 0xb6, 0x7f)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.UnhandledExceptionEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class UnhandledExceptionEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = UnhandledExceptionEventHandler.from($0)
        _ = instance?.retain()
        let __res = ULONG(_getRetainCount(instance!.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let instance = UnhandledExceptionEventHandler.from($0)
        let __res = ULONG(_getRetainCount(instance!.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>>) in
        guard let self = UnhandledExceptionEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Microsoft.UI.Xaml.UnhandledExceptionEventArgs(plok: WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler
        public var wrapper: Unmanaged<UnhandledExceptionEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<UnhandledExceptionEventHandler>.passUnretained(self)
    }
    private static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<UnhandledExceptionEventHandler>? {
        return pUnk?.bindMemory(to: UnhandledExceptionEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Microsoft.UI.Xaml.IUnhandledExceptionEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.Window
// runtime class
open class Window
{
    private var _self : WinRT.Microsoft.UI.Xaml.IWindow;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IWindow?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IWindow { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IWindowFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IWindowFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Window"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    private struct _IWindowStatics {
        static var x : IWindowStatics =
            try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Window"))
    }
    public static var WindowStatics : IWindowStatics {
        _IWindowStatics.x
    }
    public static func get_Current() throws -> Optional<WinRT.Microsoft.UI.Xaml.Window> {
        return try WinRT.Microsoft.UI.Xaml.Window(plok: WindowStatics.get_Current());
    }
    public static var Current : Optional<WinRT.Microsoft.UI.Xaml.Window> {
        get throws {
        return try WinRT.Microsoft.UI.Xaml.Window(plok: WindowStatics.Current);
        }
    }
    public func get_Bounds() throws -> WinRT.Windows.Foundation.Rect {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.get_Bounds();
    }
    public func get_Visible() throws -> boolean {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.get_Visible();
    }
    public func get_Content() throws -> Optional<WinRT.Microsoft.UI.Xaml.UIElement> {
        let _ifc : IWindow = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Xaml.UIElement(plok: _ifc.get_Content());
    }
    public func put_Content(value : Optional<WinRT.Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.Interface());
    }
    public func get_CoreWindow() throws -> Optional<WinRT.Windows.UI.Core.CoreWindow> {
        let _ifc : IWindow = try _self.QueryInterface();
        return try WinRT.Windows.UI.Core.CoreWindow(plok: _ifc.get_CoreWindow());
    }
    public func get_Compositor() throws -> Optional<WinRT.Microsoft.UI.Composition.Compositor> {
        let _ifc : IWindow = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Composition.Compositor(plok: _ifc.get_Compositor());
    }
    public func get_Dispatcher() throws -> Optional<WinRT.Windows.UI.Core.CoreDispatcher> {
        let _ifc : IWindow = try _self.QueryInterface();
        return try WinRT.Windows.UI.Core.CoreDispatcher(plok: _ifc.get_Dispatcher());
    }
    public func get_DispatcherQueue() throws -> Optional<WinRT.Microsoft.UI.Dispatching.DispatcherQueue> {
        let _ifc : IWindow = try _self.QueryInterface();
        return try WinRT.Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.get_DispatcherQueue());
    }
    public func get_Title() throws -> Swift.String {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_ExtendsContentIntoTitleBar() throws -> boolean {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.get_ExtendsContentIntoTitleBar();
    }
    public func put_ExtendsContentIntoTitleBar(value : boolean) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.put_ExtendsContentIntoTitleBar(value: value);
    }
    public func add_Activated(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.add_Activated(handler: handler);
    }
    public func remove_Activated(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.remove_Activated(token: token);
    }
    public func add_Closed(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.add_Closed(handler: handler);
    }
    public func remove_Closed(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.remove_Closed(token: token);
    }
    public func add_SizeChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.add_SizeChanged(handler: handler);
    }
    public func remove_SizeChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.remove_SizeChanged(token: token);
    }
    public func add_VisibilityChanged(handler : Optional<WinRT.Windows.Foundation.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.add_VisibilityChanged(handler: handler);
    }
    public func remove_VisibilityChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.remove_VisibilityChanged(token: token);
    }
    public func Activate() throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.Activate();
    }
    public func Close() throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func SetTitleBar(titleBar : Optional<WinRT.Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : IWindow = try _self.QueryInterface();
        return try _ifc.SetTitleBar(titleBar: titleBar!.Interface());
    }
    public var Bounds : WinRT.Windows.Foundation.Rect {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try _ifc.Bounds;
        }
    }
    public var Compositor : Optional<WinRT.Microsoft.UI.Composition.Compositor> {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Composition.Compositor(plok: _ifc.Compositor);
        }
    }
    public var Content : Optional<WinRT.Microsoft.UI.Xaml.UIElement> {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Xaml.UIElement(plok: _ifc.Content);
        }
    }
    public var CoreWindow : Optional<WinRT.Windows.UI.Core.CoreWindow> {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try WinRT.Windows.UI.Core.CoreWindow(plok: _ifc.CoreWindow);
        }
    }
    public var Dispatcher : Optional<WinRT.Windows.UI.Core.CoreDispatcher> {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try WinRT.Windows.UI.Core.CoreDispatcher(plok: _ifc.Dispatcher);
        }
    }
    public var DispatcherQueue : Optional<WinRT.Microsoft.UI.Dispatching.DispatcherQueue> {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try WinRT.Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.DispatcherQueue);
        }
    }
    public var ExtendsContentIntoTitleBar : boolean {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try _ifc.ExtendsContentIntoTitleBar;
        }
    }
    public var Title : Swift.String {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try _ifc.Title;
        }
    }
    public var Visible : boolean {
        get throws {
        let _ifc : IWindow = try _self.QueryInterface();
            return try _ifc.Visible;
        }
    }
}

// type: Microsoft.UI.Xaml.WindowActivatedEventArgs
// runtime class
public class WindowActivatedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IWindowActivatedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IWindowActivatedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IWindowActivatedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_WindowActivationState
}

// type: Microsoft.UI.Xaml.WindowEventArgs
// runtime class
public class WindowEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IWindowEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IWindowEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IWindowEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.WindowSizeChangedEventArgs
// runtime class
public class WindowSizeChangedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IWindowSizeChangedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IWindowSizeChangedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IWindowSizeChangedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Size
}

// type: Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs
// runtime class
public class WindowVisibilityChangedEventArgs
{
    private var _self : WinRT.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs;
    internal init(plok: WinRT.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Visible
}

}
extension WinRT.Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        }
    }
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_Auto;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.ApplicationTheme {
    public static var Light : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Light;
        }
    }
    public static var Dark : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Dark;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.FocusVisualKind {
    public static var DottedLine : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine;
        }
    }
    public static var HighVisibility : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_HighVisibility;
        }
    }
    public static var Reveal : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_Reveal;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.LineStackingStrategy {
    public static var MaxHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight;
        }
    }
    public static var BlockLineHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BlockLineHeight;
        }
    }
    public static var BaselineToBaseline : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.OpticalMarginAlignment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None;
        }
    }
    public static var TrimSideBearings : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.TextAlignment {
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        }
    }
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Left;
        }
    }
    public static var Start : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Start;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Right;
        }
    }
    public static var End : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_End;
        }
    }
    public static var Justify : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Justify;
        }
    }
    public static var DetectFromContent : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_DetectFromContent;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.TextLineBounds {
    public static var Full : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Full;
        }
    }
    public static var TrimToCapHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToCapHeight;
        }
    }
    public static var TrimToBaseline : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToBaseline;
        }
    }
    public static var Tight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Tight;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.TextReadingOrder {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default;
        }
    }
    public static var UseFlowDirection : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_UseFlowDirection;
        }
    }
    public static var DetectFromContent : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_DetectFromContent;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.TextTrimming {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_None;
        }
    }
    public static var CharacterEllipsis : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_CharacterEllipsis;
        }
    }
    public static var WordEllipsis : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_WordEllipsis;
        }
    }
    public static var Clip : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_Clip;
        }
    }
}
extension WinRT.Microsoft.UI.Xaml.TextWrapping {
    public static var NoWrap : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap;
        }
    }
    public static var Wrap : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_Wrap;
        }
    }
    public static var WrapWholeWords : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_WrapWholeWords;
        }
    }
}
