// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.System.Power {
// type: Windows.System.Power.BatteryStatus
// enum type
public typealias BatteryStatus = _q_CWindows_CSystem_CPower_CBatteryStatus;

// type: Windows.System.Power.EnergySaverStatus
// enum type
public typealias EnergySaverStatus = _q_CWindows_CSystem_CPower_CEnergySaverStatus;

// type: Windows.System.Power.IPowerManagerStatics
// interface type
open class IPowerManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1394825d, Data2: 0x62ce, Data3 : 0x4364, Data4 : (0x98, 0xd5, 0xaa, 0x28, 0xc7, 0xfb, 0xd1, 0x5b)) }
    // [IsSpecialName] Windows.System.Power.EnergySaverStatus get_EnergySaverStatus()
    public func _n_get_EnergySaverStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CPower_CEnergySaverStatus>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnergySaverStatus(pThis, __presult))
        }
    }
    public func get_EnergySaverStatus() throws -> WinRT.Windows.System.Power.EnergySaverStatus {
        var __result : _q_CWindows_CSystem_CPower_CEnergySaverStatus = _q_CWindows_CSystem_CPower_CEnergySaverStatus_Disabled;
        try self._n_get_EnergySaverStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnergySaverStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_EnergySaverStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnergySaverStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_EnergySaverStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnergySaverStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnergySaverStatusChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_EnergySaverStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnergySaverStatusChanged(pThis, token))
        }
    }
    public func remove_EnergySaverStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnergySaverStatusChanged(token);
    }
    // [IsSpecialName] Windows.System.Power.BatteryStatus get_BatteryStatus()
    public func _n_get_BatteryStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CPower_CBatteryStatus>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BatteryStatus(pThis, __presult))
        }
    }
    public func get_BatteryStatus() throws -> WinRT.Windows.System.Power.BatteryStatus {
        var __result : _q_CWindows_CSystem_CPower_CBatteryStatus = _q_CWindows_CSystem_CPower_CBatteryStatus_NotPresent;
        try self._n_get_BatteryStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_BatteryStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_BatteryStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_BatteryStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_BatteryStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_BatteryStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_BatteryStatusChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_BatteryStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BatteryStatusChanged(pThis, token))
        }
    }
    public func remove_BatteryStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_BatteryStatusChanged(token);
    }
    // [IsSpecialName] Windows.System.Power.PowerSupplyStatus get_PowerSupplyStatus()
    public func _n_get_PowerSupplyStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CPower_CPowerSupplyStatus>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSupplyStatus(pThis, __presult))
        }
    }
    public func get_PowerSupplyStatus() throws -> WinRT.Windows.System.Power.PowerSupplyStatus {
        var __result : _q_CWindows_CSystem_CPower_CPowerSupplyStatus = _q_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent;
        try self._n_get_PowerSupplyStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PowerSupplyStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_PowerSupplyStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PowerSupplyStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_PowerSupplyStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PowerSupplyStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PowerSupplyStatusChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_PowerSupplyStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PowerSupplyStatusChanged(pThis, token))
        }
    }
    public func remove_PowerSupplyStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PowerSupplyStatusChanged(token);
    }
    // [IsSpecialName] System.Int32 get_RemainingChargePercent()
    public func _n_get_RemainingChargePercent(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingChargePercent(pThis, __presult))
        }
    }
    public func get_RemainingChargePercent() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_RemainingChargePercent(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RemainingChargePercentChanged(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_RemainingChargePercentChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingChargePercentChanged(pThis, handler, __presult))
        }
    }
    public func add_RemainingChargePercentChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RemainingChargePercentChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RemainingChargePercentChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_RemainingChargePercentChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingChargePercentChanged(pThis, token))
        }
    }
    public func remove_RemainingChargePercentChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RemainingChargePercentChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_RemainingDischargeTime()
    public func _n_get_RemainingDischargeTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingDischargeTime(pThis, __presult))
        }
    }
    public func get_RemainingDischargeTime() throws -> WinRT.Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_RemainingDischargeTime(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RemainingDischargeTimeChanged(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_RemainingDischargeTimeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingDischargeTimeChanged(pThis, handler, __presult))
        }
    }
    public func add_RemainingDischargeTimeChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RemainingDischargeTimeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RemainingDischargeTimeChanged(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_RemainingDischargeTimeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingDischargeTimeChanged(pThis, token))
        }
    }
    public func remove_RemainingDischargeTimeChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RemainingDischargeTimeChanged(token);
    }
    public var BatteryStatus : WinRT.Windows.System.Power.BatteryStatus {
        get throws {
            return try get_BatteryStatus();
        }
    }
    public var EnergySaverStatus : WinRT.Windows.System.Power.EnergySaverStatus {
        get throws {
            return try get_EnergySaverStatus();
        }
    }
    public var PowerSupplyStatus : WinRT.Windows.System.Power.PowerSupplyStatus {
        get throws {
            return try get_PowerSupplyStatus();
        }
    }
    public var RemainingChargePercent : Swift.Int32 {
        get throws {
            return try get_RemainingChargePercent();
        }
    }
    public var RemainingDischargeTime : WinRT.Windows.Foundation.TimeSpan {
        get throws {
            return try get_RemainingDischargeTime();
        }
    }
} // IPowerManagerStatics


// type: Windows.System.Power.PowerManager
// static class
public class PowerManager
{
    private struct _IPowerManagerStatics {
        static var x : IPowerManagerStatics =
            try! RoGetActivationFactory(HString("Windows.System.Power.PowerManager"))
    }
    public static var PowerManagerStatics : IPowerManagerStatics {
        _IPowerManagerStatics.x
    }
    public static func get_EnergySaverStatus() throws -> WinRT.Windows.System.Power.EnergySaverStatus {
        return try PowerManagerStatics.get_EnergySaverStatus();
    }
    public static func add_EnergySaverStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_EnergySaverStatusChanged(handler: handler);
    }
    public static func remove_EnergySaverStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_EnergySaverStatusChanged(token: token);
    }
    public static func get_BatteryStatus() throws -> WinRT.Windows.System.Power.BatteryStatus {
        return try PowerManagerStatics.get_BatteryStatus();
    }
    public static func add_BatteryStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_BatteryStatusChanged(handler: handler);
    }
    public static func remove_BatteryStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_BatteryStatusChanged(token: token);
    }
    public static func get_PowerSupplyStatus() throws -> WinRT.Windows.System.Power.PowerSupplyStatus {
        return try PowerManagerStatics.get_PowerSupplyStatus();
    }
    public static func add_PowerSupplyStatusChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_PowerSupplyStatusChanged(handler: handler);
    }
    public static func remove_PowerSupplyStatusChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_PowerSupplyStatusChanged(token: token);
    }
    public static func get_RemainingChargePercent() throws -> Swift.Int32 {
        return try PowerManagerStatics.get_RemainingChargePercent();
    }
    public static func add_RemainingChargePercentChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_RemainingChargePercentChanged(handler: handler);
    }
    public static func remove_RemainingChargePercentChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_RemainingChargePercentChanged(token: token);
    }
    public static func get_RemainingDischargeTime() throws -> WinRT.Windows.Foundation.TimeSpan {
        return try PowerManagerStatics.get_RemainingDischargeTime();
    }
    public static func add_RemainingDischargeTimeChanged(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_RemainingDischargeTimeChanged(handler: handler);
    }
    public static func remove_RemainingDischargeTimeChanged(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_RemainingDischargeTimeChanged(token: token);
    }
    public static var BatteryStatus : WinRT.Windows.System.Power.BatteryStatus {
        get throws {
        return try PowerManagerStatics.BatteryStatus;
        }
    }
    public static var EnergySaverStatus : WinRT.Windows.System.Power.EnergySaverStatus {
        get throws {
        return try PowerManagerStatics.EnergySaverStatus;
        }
    }
    public static var PowerSupplyStatus : WinRT.Windows.System.Power.PowerSupplyStatus {
        get throws {
        return try PowerManagerStatics.PowerSupplyStatus;
        }
    }
    public static var RemainingChargePercent : Swift.Int32 {
        get throws {
        return try PowerManagerStatics.RemainingChargePercent;
        }
    }
    public static var RemainingDischargeTime : WinRT.Windows.Foundation.TimeSpan {
        get throws {
        return try PowerManagerStatics.RemainingDischargeTime;
        }
    }
}

// type: Windows.System.Power.PowerSupplyStatus
// enum type
public typealias PowerSupplyStatus = _q_CWindows_CSystem_CPower_CPowerSupplyStatus;

}
extension WinRT.Windows.System.Power.BatteryStatus {
    public static var NotPresent : Self {
        get {
            return _q_CWindows_CSystem_CPower_CBatteryStatus_NotPresent;
        }
    }
    public static var Discharging : Self {
        get {
            return _q_CWindows_CSystem_CPower_CBatteryStatus_Discharging;
        }
    }
    public static var Idle : Self {
        get {
            return _q_CWindows_CSystem_CPower_CBatteryStatus_Idle;
        }
    }
    public static var Charging : Self {
        get {
            return _q_CWindows_CSystem_CPower_CBatteryStatus_Charging;
        }
    }
}
extension WinRT.Windows.System.Power.EnergySaverStatus {
    public static var Disabled : Self {
        get {
            return _q_CWindows_CSystem_CPower_CEnergySaverStatus_Disabled;
        }
    }
    public static var Off : Self {
        get {
            return _q_CWindows_CSystem_CPower_CEnergySaverStatus_Off;
        }
    }
    public static var On : Self {
        get {
            return _q_CWindows_CSystem_CPower_CEnergySaverStatus_On;
        }
    }
}
extension WinRT.Windows.System.Power.PowerSupplyStatus {
    public static var NotPresent : Self {
        get {
            return _q_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent;
        }
    }
    public static var Inadequate : Self {
        get {
            return _q_CWindows_CSystem_CPower_CPowerSupplyStatus_Inadequate;
        }
    }
    public static var Adequate : Self {
        get {
            return _q_CWindows_CSystem_CPower_CPowerSupplyStatus_Adequate;
        }
    }
}
